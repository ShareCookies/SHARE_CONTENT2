状态模式
	定义：
		允许对象在内部状态改变时改变它的行为.
		对象看起来好像修改了它的类。
		解释：
			这个模式将状态封装为独立的类，并将并将动作委托到代表当前状态的对象。
			所以一个机器的同一个动作会表现出不同的行为，因为其内部状态改变了。	
	例：
		1.定义一个所有具体状态的共有接口，这样子状态之间才可以互相替换。
			./例/State.java
		2.糖果机有两个状态，投钱和没投钱
			糖果机：./例/GumballMachine.java
			具体状态投钱：./例/HasQuarterState.java
			具体状态没投钱：./例/NoQuarterState.java
		3.
			测试入口：
				调用糖果机的投币方法，然后糖果机的内部当前状态变为已投钱状态，
				然后在调用已投钱状态的出糖果等方法，已投钱状态出糖果后自动把糖果机的状态置为没投钱状态。
					附：使用了组合通过引用不同的状态对象来造成类改变的假象。
				./例/GumballMachine.java 的main方法。
			
附：
	状态模式与策略模式区别：
		通常状态模式是在运行时改变行为，而策略模式是在一开始就决定号对象使用什么策略。
		策略模式作用：
			一般把策略模式当成是除了继承之外的一种弹性替代方案。
			如果你使用继承定义了一个类的行为,你将被这个行为困住,甚至要修改它都很难。
			有了策略模式,你可以通过组合不同的对象来改变行为。
		状态模式作用：
			一般把状态模式想成是不用在context中放置许多条件判断的替代方案。
			通过将行为包装进状态对象中,你可以通过在context内简单地改变状态对象来改变context的行为。
策略模式与状态模式的区别：
	策略模式是同一个操作，能表现出不同的行为。
	状态模式是同一个操作，也能表现出不同的行为，
		但关键的是状态模式的行为是根据状态来决定的，如果内部是同一个状态则还是同一个行为。(所以这是属于动态改变)