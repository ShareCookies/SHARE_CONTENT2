设计模式（Design pattern）是代码设计经验的总结。
常用设计模式：
	https://blog.csdn.net/heijunwei/article/details/82056313
详解设计模式六大原则：
	http://www.cnblogs.com/toutou/p/4870926.html
23种GOF设计模式：
	1.简单工厂模式（不包含在gof23中） 
	2.工厂模式 
	3.抽象工厂模式 
	4.单例模式 
	5.原型模式 
	创建者模式 
	6.结构型模式： 
	7.组合模式 
	8.装饰者模式 
	9.外观模式 
	10.适配器模式 
	11.代理模式 
	12.享元模式 
	13.桥接模式 
	行为型模式： 
	14.观察者模式 
	15.策略模式 
	16.状态模式 
	17.中介模式 
	18.模板方法 
	19.命令模式 
	20.备忘录模式 
	21.访问者模式 
	22.解释器模式 
	23.迭代器模式 
	24.职责链模式 

java设计6大设计原则：
	一 ： 单一职责原则：
		一个类只有一个引起这个类变化的原因。
		即一个类只完成一个功能，如果做不到一个类只完成一个功能，最少要保证一个方法只完成一个功能。
	六：开闭原则：！
		  对扩展开放，对修改闭合
	三：里氏代换原则：
		凡是父类出现的地方都可以用子类代替并且原功能没有发生变化，子类不应该覆盖父类的非抽象方法。
	五：接口隔离原则：
		一个接口完成的功能尽可能的单一，不要让一个接口承担过多的责任。

	二：依赖倒置原则：
		高层组件应该依赖抽象而不依赖具体。
		即面向接口编程，一般依赖的成员变量或者参数都应该是抽象的不应该是具体的。
	
	四：迪米特法则：！
		 一个类要尽量的封装自己，一个类只与自己的朋友类打交道，一般朋友类是成员变量或者参数，非朋友类一般都是局部变量
	组合优于继承原则:
		https://zjliu.iteye.com/blog/423223
		通过创建一个由其他对象组合的对象,来获得新功能的重用方法。
		新功能的获得是通过调用组合对象的功能实现的.
		

模式()
	概念：
	介绍：
	优点/缺点：
		优点：
		缺点：
	使用场景：
	实现：
创建型模式：
	单例模式，工厂方法模式，抽象工厂模式，建造者模式，原型模式
	
结构型模式：
	外观模式，适配器模式，装饰器模式，代理模式，桥接模式，组合模式，享元模式
单例模式(Singleton)：
	概念：
		保证一个类仅有一个实例，并提供一个访问它的全局访问点。避免一个全局使用的类频繁的创建和销毁，节省系统资源，提高程序效率。
	单例模式优点:
		1 节省内存空间，因为在内存中只有一个对象。
		2 提高性能，因为避免频繁的创建销毁对象。
		3 节省系统资源，避免了共享资源的多重占用。
		4 可以全局访问。
	单例模式实现：
		怎么创建唯一的实例，Java是这么创建实例的 Person p = new Person();
		但是这么创建会创建多个实例，所以我们必须把构造器设为私有，这样其他类就不能使用new来实例化一个类。
		例：
		public class Singleton {
			//定义一个属性,用来保存Singleton类对象的实例
			private static Singleton instance;
			//私有构造器,该类不能被外部类使用new方式实例化
			private Singleton(){
			}
			public static Singleton getInstance() {
				//synchronized加锁同步会降低效率,这里先判断是否为空
				//不为空则不需要加锁,提高程序效率
				if (instance == null) {
					synchronized (Singleton.class) {
						if (instance == null) {
							instance = new Singleton();
						}
					}
				}
				return instance;
			}
		}
	单例模式线程安全：
		多个线程，获取了单例对象，操作数据会出现线程安全问题把？
	适用场景
		1 需要频繁实例化然后销毁的对象。
		2 创建对象时耗时过多或者耗资源过多，但又经常用到的对象。
		3 有状态的工具类对象。
		4 频繁访问数据库或文件的对象。
		5 ...
简单工厂模式：
	http://www.cnblogs.com/Bobby0322/p/4178412.html
	概念：
		当你需要什么只需传入正确参数，就可获得你所需的对象，无需知道其创建细节。
	简单工厂的优点/缺点： 
		优点：简单工厂模式能够根据外界给定的信息，决定创建哪个具体类的对象。明确区分了各自的职责和权力，有利于整个软件体系结构的优化。
		缺点：很明显工厂类集中了所有实例的创建逻辑，容易违反GRASPR的高内聚的责任分配原则
	介绍：
		简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。
		在简单工厂模式中，可以根据参数的不同返回不同类的实例。
	实现：
		简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。
		    // 简单工厂模式中的核心部分:工厂类
			public class Factory
			{
				public ICoat CreateCoat(string styleName)
				{
					switch (styleName)
					{
						case "business": //商务上衣
							return new BusinessCoat();
						case "fashion"://时尚上衣
							return new FashionCoat();
						default:
							throw new Exception("还没有你要的那种衣服");
					}
				}
			}
		
		
工厂方法模式(Factory Method)：
	概念：
		核心工厂类仅负责给出具体工厂子类必须实现的接口。
	介绍：
		在工厂方法模式中，核心的工厂类不再负责所有的产品的创建，而是将具体创建的工作交给子类去做。
		该核心类成为一个抽象工厂角色，仅负责给出具体工厂子类必须实现的接口，而不接触哪一个产品类应当被实例化这种细节。
		工厂方法模式是简单工厂模式的衍生，解决了许多简单工厂模式的问题。
		首先完全实现‘开－闭 原则’，实现了可扩展。其次更复杂的层次结构，可以应用于产品结果复杂的场合。
	优点/缺点： 	
			优点：
				子类提供挂钩。基类为工厂方法提供缺省实现，子类可以重写新的实现，也可以继承父类的实现。-- 加一层间接性，增加了灵活性
				屏蔽产品类。产品类的实现如何变化，调用者都不需要关心，只需关心产品的接口，只要接口保持不变，系统中的上层模块就不会发生变化。
				典型的解耦框架。高层模块只需要知道产品的抽象类，其他的实现类都不需要关心，符合迪米特法则，符合依赖倒置原则，符合里氏替换原则。
				多态性：客户代码可以做到与特定应用无关，适用于任何实体类。
			缺点：
	实现：
		核心工厂接口指定所有工厂必须实现的方法
		public interface IFactory<T>{
			public T createProduct();
		}	
		public class CarFactory implements IFactory<Car> {
			@Override
			public Car createProduct() {
				return new Car();
			}
		}
		public interface ICar{
			void GetCar();
		}
		public class Car implements ICar{
			public void GetCar(){
				syso("场务把越野车交给范·迪塞尔");
			}
		}
抽象工厂模式(Abstract Factory):
	概念：
		抽象工厂模式（Abstract Factory Pattern）是围绕一个超级工厂创建其他工厂。该超级工厂又称为其他工厂的工厂。
	实现：
		抽象工厂创建工厂，工厂在生成cpu
		//创建抽象工厂类接口
		public interface Provider {
			public CPUFactory createCPUFactory();
		}
		public class InterCPUFactoryProvider implements Provider {
			@Override
			public CPUFactory createCPUFactory() {
				return new InterCPUFactory();
			}
		}
		public class AMDCPUFactoryProvider implements Provider {
			@Override
			public CPUFactory createCPUFactory() {
				return new AMDCPUFactory();
			}
		}
		//CPU工厂接口
		public interface CPUFactory {
			public void createCPU();
		}
		//IntelCPU工厂
		public class IntelCPUFactory implements CPUFactory {
			@Override
			public void createCPU() {
				System.out.println("Intel CPU");
			}
		}
		//AMDCPU工厂
		public class AMDCPUFactory implements CPUFactory {
			@Override
			public void createCPU() {
				System.out.println("AMD CPU");
			}
		}

		public static void main(String[] args) {
				//创建一个生产CPU工厂的工厂
				Provider factoryProvider = new InterCPUFactoryProvider();
				//通过CPU工厂的工厂创建一个IntelCPU工厂
				CPUFactory intelcpuFactory = factoryProvider.createCPUFactory();
				//IntelCPU工厂生产intelCPU
				intelcpu.createCPU();
		}
建造者模式:！
	概念：
		将复杂对象的建造过程抽象出来，使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。
	介绍：
		建造者模式（Builder Pattern） 又名生成器模式，是一种对象构建模式。
		1.产品类Product：一般是一个较为复杂的对象，也就是说创建对象的过程比较复杂，一般会有比较多的代码量。​​​​​​​
		2.抽象建造者类Builder: 将建造的具体过程交与它的子类来实现，这样更容易扩展。​​​​​​​
		3.建造者类ConcreteBuilder: 组建产品；返回组建好的产品。​​​​​​​
		4.指导类Director: 负责调用适当的建造者来组建产品，指导类一般不与产品类发生依赖关系，与指导类直接交互的是建造者类。
	优点/缺点： 	
		优点：
			1.建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指导者类中对整体而言可以取得比较好的稳定性。​​​​​​​
			2.建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成。
	实现：
		public static void main(String[] args) {
			//只需要关心具体建造者,无需关心产品内部构建流程。
			//如果需要其他的复杂产品对象，只需要选择其他的建造者.
			Builder builder = new ConcreteBuilder();
			//把建造者注入指导者
			Director director = new Director(builder);
			//指导者负责流程把控
			director.buildProduct();
			// 建造者返回一个组合好的复杂产品对象
			Product product = builder.buildProduct();
		}
外观模式(Facade)
	概念：
	介绍：
		也叫门面模式,这种类型的设计模式属于结构性模式。他隐藏了系统的复杂性，并向客户端提供了一个可以访问系统的接口。
		为子系统中的一组接口提供了一个统一的访问接口，这个接口使得子系统更容易被访问或者使用。 
	优点/缺点： 	
		优点：
			松散耦合：
				使得客户端和子系统之间解耦，让子系统内部的模块功能更容易扩展和维护；
			简单易用：
				客户端根本不需要知道子系统内部的实现，或者根本不需要知道子系统内部的构成，它只需要跟Facade类交互即可。
			更好的划分访问层次：
				有些方法是对系统外的，有些方法是系统内部相互交互的使用的。
				子系统把那些暴露给外部的功能集中到门面中，这样就可以实现客户端的使用，很好的隐藏了子系统内部的细节。
	实现：
		如Dao我们定义了很多持久化方法，我们通过Service层将Dao的原子方法组成业务逻辑，再通过方法向上层提供服务。
模板方法：
	https://www.jianshu.com/p/54833e3c9b8a
	概念：
		定义一个操作中的算法框架，而将具体的实现细节推迟到子类中实现。这样可以使子类不改变算法结构来重新定义算法的某些特定逻辑。
	介绍：
		暂认为，完成一件事情，把公有的步骤放在父类中完成，子类在进行具体的实现。
		或一些功能在基类中实现，一个或多个抽象方法在派生类中定义。！
	优点/缺点：
		优点：
			模板方法通过将不变的行为在基类中实现，去除了子类中的重复代码；
			在子类中负责具体的细节实现，有利于算法的扩展；
			通过父类调用子类实现的操作，通过子类扩展增加新的行为，符合“开闭原则”
		缺点：
			每个不同的实现都需要定义一个子类，这会导致类个数的增加，设计更加抽象。
	使用场景：
		在某些类的算法中，用了相同的方法，造成代码的重复；
控制子类的扩展，子类必须遵守算法的框架规则。
	实现：
策略模式：
	https://blog.csdn.net/u012124438/article/details/70039943/
	概念：
		定义了一系列的算法，并将每一个算法封装起来，而且使他们可以相互替换，让算法独立于使用它的客户而独立变化。
	介绍：
		分析下定义，策略模式定义和封装了一系列的算法，它们是可以相互替换的，也就是说它们具有共性，而它们的共性就体现在策略接口的行为上，
		让算法独立于使用它的客户而独立变化，也就是说我们需要让客户端依赖于策略接口。
	优点/缺点：
		优点：
		缺点：
	实现：
		模式涉及到三个角色：
			环境(Context)角色：持有一个Strategy的引用。
			抽象策略(Strategy)角色：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。
			具体策略(ConcreteStrategy)角色：包装了相关的算法或行为。
		看博客
装饰者模式（Decorator模式）：
	https://www.jianshu.com/p/d7f20ae63186
	概念：
		1.装饰者模式又名包装(Wrapper)模式。
		2.装饰者模式动态地将责任附加到对象身上。
		装饰者模式以对客户端透明的方式扩展对象的功能，是继承关系的一个替代方案。
		若要扩展功能，装饰者提供了比继承更有弹性的替代方案
	介绍：
		涉及角色：
		（1）Component抽象组件:定义一个抽象接口，来规范准备附加功能的类。
		（2）ConcreteComponent具体组件：将要被附加功能的类，实现抽象组件角色接口。
		（3）Decorator抽象装饰者：持有一个构建（component）对象的实例，并定义与抽象组件接口一致的接口。
		（4）ConcreteDecorator具体装饰：实现抽象装饰者角色，负责对具体组件添加额外功能。
	优点/缺点：
		优点：
		缺点：
	使用场景：
	实现：
	Component：
		//抽象组件接口，人接口定义一个eat()方法，这是所有的具体构件类和装饰类必须实现的。
		public interface Component {
			void eat();
		}
		//具体构件角色,人的一具体分类男人，男人一定有人的eat()方法
	ConcreteComponent：具体组件实现抽象组件接口
		public class ConcreteComponent implements Component {
			public void eat() {
				System.out.println("男人在吃");
			}
		}
		//抽象装饰角色,
	Decorator：抽象装饰者1.得到具体组件的引用。2.利用引用，实现抽象组件接口
		public abstract class Decorator implements Component {
			protected Component person;
			public void setPerson(Component person) {
				this.person = person;
			}
			public void eat() {
				person.eat();
			}
		}
	//具体装饰角色,a类型男，能吃两顿
	ConcreteDectrator：	具体装饰类继承抽象装饰者，负责对具体组件添加额外功能（即给具体组件方法添加额外功能）
		public class ConcreteDectratorA extends Decorator {
			public void eat() {
				super.eat();
				reEat();
				System.out.println("ManDecoratorA类");
			}
			public void reEat() {
				System.out.println("再吃一顿饭");
			}
		}
		//具体装饰角色,b类型男，能吃一顿
		public class ConcreteDectratorB extends Decorator {
			public void eat() {
				super.eat();
				System.out.println("===============");
				System.out.println("ManDecoratorB类，吃一顿");
			}
		}