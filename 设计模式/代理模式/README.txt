代理模式:
	定义：
		代理模式为一个对象提供一个替身以控制对这个对象的访问。
		即：
			为一个对象创建一个替身，用户需要时调用这个替身，然后由替身来具体调用实际的对象。
	代理模式的种类：
		1.远程代理
			似乎是在调用一个远程对象方法，但其实只是调用本地堆中的'代理'对象上的方法，在由代理处理网络通信的底层细节。
		2.虚拟代理
			实际对象并未被创建，由虚拟代理来扮演对象的替身。
			直到我们真正调用的时候才创建它，对象创建后,代理就会将请求直接委托给对象。
			附：
				虚拟代理作为创建开销大的对象的代表。
		3.动态代理
			介绍：
				在不改变源码的情况下，实现对目标对象的功能扩展。
				因为代理类是在运行时创建的,我们称这个Java技术为:动态代理。
			解析：
				java在java.lang.refect包提供了对代理支持。
				利用这个包你可以在运行时动态地创建一个代理类,并将方法的调用转发到你所指定的类。
				当代理的方法被调用时，代理会把这个调用转发给对应的InvocationHandler的invoke方法，
				此时你就可以在这个方法中决定是否允许调用代理的方法。
			例：
				SHARE_CONTENT/java基础编程/反射/javaJdk动态代理/jdkProxyUseCase/ProxyTest.java
			附：
				https://www.cnblogs.com/boboxing/p/8126046.html
				如何运行时动态的创建类：
					通过.newInstance()方法就能够在运行时动态的创建类。
					https://www.cnblogs.com/superxuezhazha/p/12356258.html
					https://www.cnblogs.com/superxuezhazha/p/12356258.html




