代理模式:
	定义：
		代理模式为一个对象提供一个替身以控制对这个对象的访问。
		即：
			为一个对象创建一个替身，用户需要时调用这个替身，然后由替身来具体调用实际的对象。
	代理模式的种类：
		1.远程代理
			似乎是在调用一个远程对象方法，但其实只是调用本地堆中的'代理'对象上的方法，在由代理处理网络通信的底层细节。
		2.虚拟代理
			实际对象并未被创建，由虚拟代理来扮演对象的替身。
			直到我们真正调用的时候才创建它，对象创建后,代理就会将请求直接委托给对象。
			附：
				虚拟代理作为创建开销大的对象的代表。
		3.对目标对象的功能扩展：
			动态代理
				介绍：
					在不改变源码的情况下，实现对目标对象的功能扩展。
					因为代理类是在运行时创建的,我们称这个Java技术为:动态代理。
				java在java.lang.refect包中有自己的代理支持,利用这个包你可以在运行时动态地创建一个代理类,
				实现一个或多个接口,并将方法的调用转发到你所指定的类。
				解析：
					，
					当代理的方法被调用时，代理会把这个调用转发给对应的InvocationHandler的invoke方法，、
					此时你就可以在这个方法中决定是否允许调用代理的方法。
				例：
					./动态代理例子/ProxyTest.java
			附：
				https://www.cnblogs.com/boboxing/p/8126046.html

		总：java动态代理的代理类会有java自动生成
			被代理的对象暂时可以总结为，
			远程的对象、
			创建开销大的对象或
			对目标对象的功能扩展（需要安全控制的对象）。


附：
	java 动态代理 为什么在debug 时会多次执行invoke 内部方法：
		https://blog.csdn.net/Java_HuiLong/article/details/85321828
		debug时候，idea会调用“被代理类”的toString()方法

