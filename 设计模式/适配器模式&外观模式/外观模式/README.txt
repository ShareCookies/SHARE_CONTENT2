外观模式定义：
	外观模式提供了一个统一的接口,用来访问子系统中的一群接口。
		外观定义了一个高层接口,让子系统更容易使用。
	hcg：
		外观模式提供了一个统一的接口,用来访问子系统中的一群接口。
		（或外观模式提供了一个接口,这个接口使用了子系统中的一群接口。）
	外观模式意图：
		外观模式意图是提供子系统的一个简化接口，便于用户使用子系统。
设计原则：
	最少知识原则:只和你的密友对话。
		最少知识（Least Knowledge)原则告诉我们要减少对象之间的交互,
		这个原则希望我们在设计中,设计对象时你要注意它所交互的类有哪些，
		不要让太多的类耦合在一起,免得修改系统中一部分,会影响到其他部分。
	这个原则提供了一些方针:
		就任何对象而言,在该对象的方法内,我们只应该调用属于以下范围的方法:
			1.该对象本身
			2.被当做方法的参数而传递进来的对象
			3.此方法所创建或实例化的任何对象
			4.对象的任何组件
			以上告诉我们：
				如果某对象调用其他方法返回的接口，不要调用该对象的方法。
				不推荐：
					这里,我们从气象站取得了温度计(themometet）对象,然后再从温度计对象取得温度。
					public float getremp(){
						Thermometer thermometer= station.getThermometer();
						return thermometer.getTemperature();
					}
				推荐：
					我们在气象站中加进一个方法,用来向温度计请求温度。这可以减少我们所依赖的类数目。
					pub1lic foat getTemp(){
						return station.getTempezature();
					}
	注：
		所有的原则都应该在有帮助的时候才遵守。
		所有的设计都不免需要折表（在抽象和速度之间取舍,在空间和时间之间平衡……）。
		虽然原则提供少了对象之间的依赖,但在采用原则之前,必须全盘考虑所有的因素。