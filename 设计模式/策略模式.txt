算法：
	一行为的实现逻辑。
委托delegate：p15
	将一行为委托给别人处理，而不是定义在类中。
	例：
		Duck类加入两个实例变量flyBehavior和quackBehavior，声明为接口类型，
		然后每个鸭子对象都会动态的设置这些变量，以在运行时引用正确的行为。
	注：
		实现了委托，就会实现组合。
组合：
		将两个类结合起来使用就是组合。
		例:
			每个鸭子都有个FlyBehavior和QuackBehavior，好将飞行和叫行为委托它们代为处理。
策略模式：
	定义了算法族，分别封装起来，让它们之间可以相互替换。
	此模式让算法的变化独立于使用算法的客户。
	即：	
		实现了委托即可算策略模式。

	解析：
		即定义了一组算法，这组算法均是实现了一个行为但又不同的实现方式，如游泳可以狗刨可以蝶泳，
		将每一种算法都封装到具有共同接口（接口就是行为）的独立的类中，从而使这组算法可以相互替换。
	
	例：
		...
		即指对象有某个行为，但是在不同的场景中，该行为有不同的实现算法。

废：
	继承不是合适的解决方案，使用接口则造成代码无法复用。