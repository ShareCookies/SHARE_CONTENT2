运行Python：
	通过解释器：
		$ python script.py # Unix/Linux
		或者
		C:>python script.py # Windows/DOS
注释：
	# 单行
	'''
	多行
	'''
	"""
	开头不能使用多行注解
	"""
Python 标识符：
	标识符组成：
		英文、数字以及下划线(_)。
	1.标识符是区分大小写的。
	2.标识符不能以数字开头。
	3.以下划线开头的标识符是有特殊意义的。
		以单下划线开头：
			_foo 的代表不能直接访问的类属性，需通过类提供的接口进行访问，不能用 from xxx import * 而导入。

		以双下划线开头：
			__foo 代表类的私有成员
		以双下划线开头和结尾的：
			__foo__ 代表 Python 里特殊方法专用的标识，如 __init__() 代表类的构造函数。

代码块：
	1.python 最具特色的就是用缩进来写模块。
		Python 与其他语言最大的区别就是，Python 的代码块不使用大括号 {} 来控制类，函数以及其他逻辑判断。
	2.缩进的空白数量是可变的，但是所有代码块语句必须包含相同的缩进空白数量，这个必须严格执行否则会报错。
		建议你在每个缩进层次使用 单个制表符 或 两个空格 或 四个空格 , 切记不能混用
	例：
		if True:
			print ("True")
		else:
			# 没有严格缩进，在执行时会报错
		  print ("False")
	附：
	代码组：
		缩进相同的一组语句构成一个代码块，我们称之代码组。
			多个语句构成代码组
		像if、while、def和class这样的复合语句，
		首行以关键字开始，以冒号( : )结束，
		该行之后的一行或多行代码构成代码组。我们将首行及后面的代码组称为一个子句(clause)。
		如下实例：

		if expression : 
		   suite 
		elif expression :  
		   suite  
		else :  
		   suite 
语句的结束：
	Python语句中一般以新行作为语句的结束符。
	一条语句分多行：
		1.但是我们可以使用斜杠（\）将一行的语句分为多行显示，如下所示：
		total = item_one + \
				item_two + \
				item_three
		2.语句中包含 [], {} 或 () 括号就不需要使用多行连接符。如下实例：
		days = ['Monday', 'Tuesday', 'Wednesday',
				'Thursday', 'Friday']
	同一行显示多条语句：
		Python可以在同一行中写多条语句，语句之间使用分号(;)分割，
		import sys; x = 'runoob'; sys.stdout.write(x + '\n')

函数的分隔：
	函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。
	注：
		这是非强制的：
			空行与代码缩进不同，空行并不是Python语法的一部分。
			书写时不插入空行，Python解释器运行也不会出错。
			但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。	
常用：
	变量：
		介绍：
			1.Python 中的变量赋值不需要类型声明。
			2.变量存储在内存中，基于变量的数据类型，解释器会分配不同的内存

		Python有五个标准的数据类型：
			Numbers（数字）String（字符串）List（列表）Tuple（元组）Dictionary（字典）
		Python列表：
			列表用 [ ] 标识，是 python 最通用的复合数据类型。
			列表可以完成大多数集合类的数据结构实现，它支持字符，数字，字符串甚至可以包含列表（即嵌套）。
			例：
				list = [ 'runoob', 786] 
				print list               # 输出完整列表
				print list[0]            # 输出列表的第一个元素
				print list[2:]           # 输出从第三个开始至列表末尾的所有元素
				print tinylist * 2       # 输出列表两次。星号（*）是重复操作
				print list + tinylist    # 打印组合的列表

		Python数字
		Python字符串：
			python的字串列表有2种取值顺序:
				从左到右：索引默认0开始的
				从右到左：索引默认-1开始的
				
				获取的子字符串：[头下标:尾下标]
					获取的子字符串包含头下标的字符，但不包含尾下标的字符。
					例:
						s = 'abcdef'
						s[0:5]
						'abcde'
						下标可以为空表示取到头或尾：
							print str[2:]       # 输出从第三个字符开始的字符串
					附：
						Python 列表截取可以接收第三个参数：
							参数作用是截取的步长。
							以下实例在索引 1 到索引 4 的位置并设置为步长为 2（间隔一个位置）来截取字符串：
							
				字符串操作：
					print str * 2       # 输出字符串两次 。
					print str + "TEST"  # 输出连接的字符串
		Python 元组：
			元组是另一个数据类型，类似于 List（列表）。
			元组用 () 标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。
			例：
				tuple = (123, 'john')
				print tuple[0]            # 输出元组的第一个元素
				tuple[1] = 1000    # 该元组无效的，因为元组是不允许更新的。而列表是允许更新的：
		Python 字典：
			字典用"{ }"标识，字典由索引(key)和它对应的值value组成。
			例：
				dict = {};dict['one'] = "This is one";dict[2] = "This is two"
				tinydict = {'name': 'john','code':6734, 'dept': 'sales'}
				print dict['one']          # 输出键为'one' 的值
				print dict[2]              # 输出键为 2 的值
				print tinydict             # 输出完整的字典
				print tinydict.keys()      # 输出所有键
				print tinydict.values()    # 输出所有值

		Python数据类型转换：
			可以使用内置的函数，对数据类型进行转换。
			例：
				str(x) 将对象 x 转换为字符串
				注：函数名通常为对应的数据类型名
	Python 运算符:
		Python成员运算符:
			in	如果在指定的序列中找到值返回 True，否则返回 False。
			not in	如果在指定的序列中没有找到值返回 True，否则返回 False。
	输出：
		x = y = 1
		# 输出1.print输出默认是换行的
		print x 
		print y
		# 输出2.实现不换行输出，需要在变量末尾加上逗号
		x, y = 1, 2		
		print x,
		print y,
		print x,y
	输入：
		raw_input("按下 enter 键退出，其他任意键显示...\n")

Module 模块:
	介绍：
		一个Python 模块就是一个 Python 文件，以 .py 结尾。
			模块让你能够有逻辑地组织你的 Python 代码段，把相关的代码分配到一个模块里能让你的代码更好用，更易懂。
		模块里能定义函数，类和变量，也能包含可执行的代码。	
	模块的引入：
		语法如下：
			import module1[, module2[,... moduleN]]
			例：
				 引入math模块：
					import math 
				 引入后，调用 math 模块中的函数：
					模块名.函数名
		部分引入：
			from 语句让你从模块中导入一个指定的部分到当前命名空间中。
			语法如下：
				from modname import name1[, name2[, ... nameN]]
				例：
					导入模块 fib 的 fibonacci 函数：
					from fib import fibonacci
				注：
					1.这个声明不会把整个 fib 模块导入到当前的命名空间中，它只会将 fib 里的 fibonacci 单个引入到执行这个声明的模块的全局符号表。
					2.
						from modname import *
						把一个模块的所有内容全都导入到当前的命名空间，不推荐使用。

	搜索路径：
		当你导入一个模块，Python 解析器对模块位置的搜索顺序是：
			1、当前目录
			2、如果不在当前目录，Python 则搜索在 shell 变量 PYTHONPATH 下的每个目录。
				PYTHONPATH 环境变量，由装在一个列表里的许多目录组成。
				PYTHONPATH 的语法和 shell 变量 PATH 的一样。
				在 Windows 系统，典型的 PYTHONPATH 如下：
					set PYTHONPATH=c:\python27\lib;
				在 UNIX 系统，典型的 PYTHONPATH 如下：
					set PYTHONPATH=/usr/local/lib/python
			3、如果都找不到，Python会察看默认路径。
				UNIX下，默认路径一般为/usr/local/lib/python/。
		模块搜索路径存储在 system 模块的 sys.path 变量中。
		变量里包含当前目录，PYTHONPATH和由安装过程决定的默认目录。
python 包：
	包是一个分层次的文件目录结构，它定义了一个由模块及子包，和子包下的子包等组成的 Python 的应用环境。

		简单来说，包就是文件夹，但该文件夹下必须存在 __init__.py 文件, 该文件的内容可以为空。
		__init__.py 用于标识当前文件夹是一个包。
	__init__.py:
		package_runoob/__init__.py
		#!/usr/bin/python
		# -*- coding: UTF-8 -*-
		 
		if __name__ == '__main__':
			#当 .py 文件被直接运行时,会执行该处代码
			print '作为主程序运行'
		else:
			#当被导入时,会执行该处代码
			print 'package_runoob 初始化'
	导入包：
		...


命名空间和作用域
	命名空间：
		命名空间是一个包含了变量名称们（键）和它们各自相应的对象们（值）的字典。
			变量是拥有匹配对象的名字（标识符）。
	作用域
		每个函数都有自己的命名空间。类的方法的作用域规则和通常函数的一样。
		Python 会智能地猜测一个变量是局部的还是全局的，它假设任何在函数内赋值的变量都是局部的。
		如果一个局部变量和一个全局变量重名，则局部变量会覆盖全局变量。
		函数内定义全局变量：
			因此，如果要给函数内的全局变量赋值，必须使用 global 语句。
			Money = 2000
			def AddMoney():
			   # 下一行加注释会报异常:
			   global Money
			   Money = Money + 1
			print Money
			AddMoney()
			print Money




idea no python interpreter configured for the module
	https://blog.csdn.net/qq_43354101/article/details/83896825