基本数据结构：
	附：
		动态集合：
			集合作为算机科学的基础，就如同他们在数学中所起的作用。
			数学中的集合是不变的,而由算法操作的集合却在整个过程中增大,缩小或发生其他变化。我们称这样的集合为动态集合。
			
			附:
				10-14章描述了能够用于实现动态集合的几种数据结构。
					本书后面的算法中也会使用其中多种构造来解决各种不同问题。
		指针和对象的实现p134
			当有些语言不支持指针和对象数据类型时，应当如何实现它们呢。
			本节我们将利用数组和数组下标来构造对象和指针。
			...
	栈（stack）：
		介绍：
			1.栈实现的是一种后进先出(last-in，first-out，LIFO)数据策略。
			2.栈作为一种数据结构，是一种只能在一端进行插入和删除操作的特殊线性表。
		实现：
			利用一个简单的数组实现栈。
			public class stack {
				// 用一个数组S[1..n]来实现一个最多可容纳n个元素的栈。
				Objects[] capacity = new Objects[10];
				// 属性top，指向最新插入的元素
				int top = 0;

				// 栈上的INSERT操作称为压人(PUSH)，
				void push(Objects o){
					capacity[top] = o;
					top++;
				}
				// 而无元素参数的DELETE操作称为弹出(POP)。
				void pop(){
					top --;
				}
				// 空栈,进行查询操作STACK-EMPTY。
				// 如果试图对一个空栈执行弹出操作，则称栈下溢(underflow).代码未避免改bug
				// 如果S. top超过了n，则称栈上溢(overflow).代码未避免改bug
				//
			}
	队列（queue）：
		介绍：
			1.队列实现的是一种先进先出(first-in，first-out，FIFO)策略。
			2.队列作为一种数据结构，队列有队头(head)和队尾(tail)，当有一个元素入队时，它被放在队尾的位置，而出队的元素则总是在队头。
				（是一种队尾插入和队尾删除进行操作的线性表）。
		
	链表（linked-list）:
		介绍：
			概念：
				链表(linked list)是一种这样的数据结构，其中的各对象按线性顺序排列。
				数组的线性顺序是由数组下标决定的，然而与数组不同的是，链表的顺序是由各个对象里的指针决定的。

			双向链表(doubly linked list)：
				实现思路：
					链表元素属性作用介绍：
						双向链表(doubly linked list)L的每个元素都是一个对象，每个对象有一个关键字key和两个指针:next和 prev。对象中还可以包含其他的辅助数据(或称卫星数据)。
					链表的头(head)：
						链表的第一个元素 （x.prev=NIL，即元素α没有前驱）。
						属性L.head指向链表的第一个元素。如果L.head=NIL，则链表为空。
					链表的尾(tail)：
						链表的最后一个元素（ x. next=NIL ，即元素α没有后继）。
					例：
						图：./imgs/双向链表.png
			单链表：
				如果一个链表是单链接的(ingly linked)，则省略每个元素中的prev指针。
			循环链表(circular list):
				在循环链表(circular list)中，表头元素的prev指针指向表尾元素，而表尾元素的next指针则指向表头元素。
				我们可以将循环链表想象成一个各元素组成的圆环。
			附:
				1.链表排序：
					如果链表是已排序(sorted)的，则链表的线性顺序与链表元素中关键字的线性顺序一致，据此，最小的元素就是表头元素，而最大的元素则是表尾元素。
					如果链表是未排序(unsorted)的，则各元素可以以任何顺序出现。
		链表的一些操作：
			...

附：
	算法最好结合能结合实际应用部分来学习，不然就略感无聊，
	就似习得18般武艺却毫无用武之地。