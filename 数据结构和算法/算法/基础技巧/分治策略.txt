分治策略：
	在分治策略中，我们递归地求解一个问题，在每层递归中应用如下三个步骤:
		分解(Divide)步骤：
			将问题划分为一些子问题，子问题的形式与原问题一样， 只是规模更小。
		解决(Conquer)步骤：
			递归地求解出子问题。如果子问题的规模足够小，则停止递归，直接求解。
		合并(Combine)步骤：
			将子问题的解组合成原问题的解。
		当子问题足够大，需要递归求解时，我们称之为递归情况( recursive case)。
		当子问题变得足够小，不再需要递归时，我们说递归已经“触底”，进入了基本情况(base case)。
		有时，除了与原问题形式完全一样的规模更小的子问题外，还需要求解与原问题不完全一样的子问题。我们将这些子问题的求解看做合并步骤的一部分。

	递归式
		递归式与分治方法是紧密相关的，因为使用递归式可以很自然地刻画分治算法的运行时间。
		一个递归式(recurrence)就是一个等式或不等式，它通过更小的输入上的函数值来描述一个函数。
		例：
			p37（pdf52）
		三种求解递归式：？
			代入法
			递归树法
			主方法
			
			我们偶尔会遇到不是等式而是不等式的递归式，例如T(n)≤2T(n/2)+Θ(n)。因为这样一种递归式仅描述了T(n)的一个上界，因此可以用大O符号而不是Θ符号来描述其解。
			类似地，如果不等式为T(n)≥2T(n/2)+Θ(n)，则由于递归式只给出了T(n)的一个下界，我们应使用Ω符号来描述其解。
		
例：
	
4.1最大子数组问题
	题目：未来股票价格已知下，你要在某个时刻买进一股该公司的股票，并在之后某个日期将其卖，如何实现最大收益。
	最低价买进，最高价卖出，最大化收益的最简单想法。但遗憾的是，在给定的一段时期内，可能无法做到在最低价格时买进股票，然后在最高价格时卖出。
	例：
		在图4-1中，最低价格发生在第7天，而最高价格发生在第1天一最高 价在前，最低价在后。

暴力求解方法
	简单地尝试每对可能的买进和卖出日期组合，只要卖出日期在买入日期之后即可。
	n天中共有..种日期组合。
	方法的运行时间:
		Ω(n2) 