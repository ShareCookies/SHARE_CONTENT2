最大子数组问题
	题目：未来股票价格已知下，你要在某个时刻买进一股该公司的股票，并在之后某个日期将其卖，如何实现最大收益。
		附：
			最低价买进，最高价卖出，最大化收益的最简单想法。但遗憾的是，在给定的一段时期内，可能无法做到在最低价格时买进股票，然后在最高价格时卖出。
			在图4-1中，最低价格发生在第7天，而最高价格发生在第1天一最高价在前，最低价在后。
	解决：
		暴力求解方法
			简单地尝试每对可能的买进和卖出日期组合，只要卖出日期在买入日期之后即可。
			n天中共有..种日期组合。
			方法的运行时间:
				Ω(n^2) 
		使用分治策略的求解方法:
			问题可以转化为寻找数组A[low.high]的最大子数组。
			我们来思考如何用分治技术来求解最大子数组问题:
				1. 使用分治技术意味着我们要将数组划分为两个规模尽量相等的子数组。(分解步骤)
				2. 那么子数组的中央位置mid,求解两个子数组A[low..mid]和A[mid+1..high]。(分解步骤)
				3. A[low..high]的任何连续子数组所处的位置必然是以下三种情况之一:位于子数组1。位于子数组2。跨越子数组1,2。因此A[lorw..high]的一个最大子数组所处的位置必然是这三种情况之一。(解决思考)
				4. 然后继续把子数组分半，直到无法在分时，在进行合并。(合并)
				合并时进行解决，要么是左有最大子数组，要么是右有，要么跨中间有1。左右都已有(前面跨中间的就是左右值),所以只要计算中间的就好。(合并且解决步骤)
			例：
				1. pdf56
					跨越mid情况下的最大和。
					FIND_MAX_CROSSING_SUBARRAY(A, low, mid, high)
				2. pdf56
					求解最大子数组的分治解法
					FIND-MAXIMUM-SUBARRAY(A, low, high)
				附：
					分治解决的耗时分析：？为什么效率更高
						pdf57

	附：只有当数组中包含负数时，最大子数组问题才有意义。如果所有数组元素都是非负的，最大
	子数组问题没有任何难度，因为整个数组的和肯定是最大的。





FIND_MAX_CROSSING_SUBARRAY(A, low, mid, high){
	left-sum = null;
	sum = 0;
	for(int i = mid; i >= low ; i--){
		sum = sum + A[i];
		if( sum > left-sum){
			left-sum = sum;
			max-left = i;
		}
	}
	//中点起步，左边最大值。
	right-sum = null;
	sum = 0;
	for(int i = mid; i <= high ; i++){
		sum = sum + A[i];
		if( sum > right-sum){
			right-sum = sum;
			max-right = i;
		}
	}
	//中点起步，右边最大值。
	return (max-left,max-right,left-sum+right-sum);
}



FIND-MAXIMUM-SUBARRAY(A, low, high){
	//终止条件:只有一个元素
	if high==low 
		return(low,high,A[low]);
	else {
		// 分解步骤
		mid=[(low+high)/2];
		(left-low,left-high,left-sum)= FIND-MAXIMUM-SUBARRAY(A, low, mid);
		(right-low,right-high,right-sum)= FIND-MAXIMUM-SUBARRAY(A, mid+1, high);
		
		// 解决步骤、合并步骤
		(cross-low,cross-high,cross-sum) = FIND_MAX_CROSSING_SUBARRAY(A, low, mid, high);
		if(left-sum >= right-sum && left-sum >= cross-sum){
			return (left-low,left-high,left-sum);
		}
		else if(right-sum >= left-sum && right-sum >= cross-sum){
			return (right-low,right-high,right-sum);
		}
		else return (cross-low,cross-high,cross-sum);	
	}

}
	
1 2 3 -4案例详细过程：
	1 2 ，3 -4//第1层

	1 ， 2//第2层
	直接返回1//第3层
	直接返回2//第3层
	跨域计算(0,1,3)//第2层
	返回跨域计算结果//第2层

	3，-4//右第2层
	直接返回3//右第3层
	直接返回-4//右第3层
	跨域计算(2,3,-1)//右第2层
	返回左结果(2,2,3)//右第2层


	跨域计算(0,1,3)和左结果(2,2,3)进行解决与并步骤 //1层
	FIND_MAX_CROSSING_SUBARRAY(A, 0, mid, 3)跨域计算结果(1,3,6)  //1层
	返回跨域计算结果  //1层

	！
		方法迭代一次，是又开辟一个空间来存放新的方法内部变量吧，不然迭代异常为什么会有栈溢出。
