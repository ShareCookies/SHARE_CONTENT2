
对代价函数的图像化过程：(仅保留theta1)
	theta1为0.5的代价函数.jpg
	theta1为0的代价函数.jpg
	单变量theta1的函数形状.jpg
	
对代价函数的图像化过程：(保留theta0，theta1)
	双变量函数的三维形状.png	
		当有两个参数时，代价函数形状为3D曲面图，
		轴标为theta0和theta1,改变轴标值时，你会得到不同的代价函数J(Θ_0,Θ_1)的值
	双变量函数的等高线图：
		1. 等高线图，是三维形状在二维上的展示。
		双变量函数的等高线图1.png
		双变量函数的等高线图2.png

		2. 代价函数的等高线图圈越小，那么代价函数就越小，
		那么假设函数越准确
			？这里的假设函数为什么是线性的了，参数又不全在一条线上，没有无规则曲线之类的线性函数吗。
		等高线图代价函数最小点.png
我们程序的目标(作用)是：
	我们真正想要的是一个高效的算法
	来自动找寻代价函数最小值对应的Θ_0,Θ_1
	附：

		我们不希望，编写出一个程序，只能画出代价函数点，然后再尝试手动读取参数
		因为
			1. 麻烦等
			2. 当我们面对更复杂的例子时，更多参数 更高维图形 ，其图形甚至无法绘制 因为很难可视化
	即一种可以自动找到使函数J最小的Θ_0,Θ_1的算法
		