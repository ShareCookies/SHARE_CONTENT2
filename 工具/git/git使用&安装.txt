安装 Git:
	安装方式，主要分为两种，一种是通过编译源代码来安装；另一种是使用为特定平台预编译好的安装包。
	从源代码安装:

	Windows安装包：
		https://www.cnblogs.com/wj-1314/p/7993819.html
		注：
			安装完Git后,就可以用 git 命令了，用 git 把 Git 项目仓库克隆到本地，以便日后随时更新。
	初次运行 Git 前的配置：
		配置的是你个人的用户名称和电子邮件地址。
		git config --global  user.name "Username"
		git config --global  user.email "Username@example.com"
		这两条配置很重要，每次 Git 提交时都会引用这两条信息，说明是谁提交了更新，所以会随更新内容一起被永久纳入历史记录。
git生成密匙并添加到gogs：
	ssh-keygen -t rsa -C 980791027@qq.com
	不输入密码就对了
	https://blog.csdn.net/lqlqlq007/article/details/78983879
git操作：
	注：
		Unix的哲学是“没有消息就是好消息”，说明操作成功。
	创建本地版本库：
		介绍：
			版本库又名仓库，英文名repository，可以简单理解成一个目录。
			这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。
			所以，创建一个版本库非常简单，首先，选择一个合适的地方，创建一个空目录。
			
		通过git init命令把这个目录变成Git可以管理的仓库：
			$ git init
			瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository）。
			细心的读者可以发现当前目录下多了一个.git的目录，这个目录是Git来跟踪管理版本库的，没事千万不要手动修改这个目录里面的文件，不然改乱了，就把Git仓库给破坏了。
			注：
				1.git目录默认是隐藏
				2.也不一定必须在空目录下创建Git仓库，选择一个已经有东西的目录也是可以的。
				不过，不建议你使用自己正在开发的公司项目来学习Git，否则造成的一切后果概不负责。
	添加文件：
		1.第一步，用命令git add告诉Git，把文件添加到仓库：
			$ git add readme.txt
			git所有库中所有文件到暂存库：
				git add -A
			注：
				文件一定要放到版本库目录下（子目录也行），因为这是一个Git仓库，放到其他地方Git再厉害也找不到这个文件。
		2.第二步，用命令git commit告诉Git，把文件提交到仓库：
			$ git commit -m "wrote a readme file"
			git commit命令执行成功后会告诉你，
			1 file changed（我们新添加的readme.txt文件）；1 insertions：插入了1行内容（readme.txt有一行内容）。	
		注：
			1.为什么Git添加文件需要add，commit一共两步。
			因为commit可以一次提交很多文件，所以你可以多次add不同的文件，比如：
				$ git add file1.txt
				$ git add file2.txt file3.txt
				$ git commit -m "add 3 files."
			2.是不是只有提交一遍（或远程拉下来）以后，git才能监控文件。
			此时文件状态是untracked，反正未add到版本库的文件git都不会去监控你改了什么。
			3.git不会监控文件夹状态
		命令解释：
			-m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的，这样你就能从历史记录里方便地找到改动记录。
			git add <file> 可反复多次使用，添加多个文件。
			git commit -m <message>  本次提交
	时光穿梭：
		文件修改：
			git status：
				git status命令可以让我们时刻掌握仓库当前的状态。
				例如命令输出告诉我们，readme.txt被修改过了，但还没有准备提交的修改。
			git diff：
				能看到具体修改了什么内容
				例：git diff readme.txt 
			提交修改和提交新文件是一样的两步，
				第一步是git add：
					此时可以运行git status看看当前仓库的状态，看下要被提交的修改文件。
				第二步git commit 
					此时可再用git status命令看看仓库的当前状态。
		版本回退
			git log命令查看历史版本记录：
				
				
			回退到上个版本：
				git reset --hard HEAD^
				注：
					1.Git中，用HEAD表示当前版本，、上一个版本就是HEAD^，
					上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。
					2.
			恢复到最新版本（跳转到指定版本）：
				后悔回退了，不干了，要跳转到指定版本。
				git reset --hard 1094a
				版本号没必要写全，前几位就可以了，Git会自动去找。
			记录你的每一次命令：
				git reflog
					注：从1-》2版本 则命令前头的版本号是2版本的
		工作区和暂存区：
			Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。

			工作区（Working Directory）
				就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。
			版本库（Repository）
				工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
			暂存区：
				Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，
				还有Git为我们自动创建的第一个分支master？，以及指向master的一个指针叫HEAD。
				
				git add实际上就是把文件修改添加到暂存区。
				git commit实际上就是把暂存区的所有内容提交到当前分支。
					因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，
					所以，现在，git commit就是往master分支上提交更改。		
					一旦提交后，如果你又没有对工作区做任何修改，那么工作区就是“干净”的。
		管理修改:
			Git跟踪并管理的是修改，而非文件。
		撤销修改：
			场景1：git checkout -- file
				当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，git checkout会让文件回到最近一次git commit或git add时的状态。
			git reset HEAD <file>
				改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD <file>，就回到了场景1，第二步按场景1操作。

			场景3：
				已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。
		删除文件：
			1.删除实际文件
			2.git rm <file>
				 注：先手动删除文件，然后使用git rm <file>和git add<file>效果是一样的。
			3.git commit -m "remove file"
			
			删错了，文件恢复：
				因为版本库里还有呢，所以可以git checkout把误删的文件恢复到最新版本。
	远程仓库
		前景：
			Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。
			怎么分布呢，最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。

			实际情况往往是这样，找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，
			并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。
		
		与远程仓库交互需要的设置:
			GitHub网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。
			由于你的本地Git仓库和GitHub仓库之间的传输是通过SSH加密的，所以，需要一点设置：
			1.打开Shell（Windows下打开Git Bash），创建SSH Key：
				$ ssh-keygen -t rsa -C "youremail@example.com"
			2.用户主目录/.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人。
			3.登陆GitHub(或git服务器)，Account settings-》SSH Keys-》Add SSH Key
			
			为什么GitHub需要SSH Key：
				因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人冒充的。
				而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。！为什么
			添加多个key：
				当然，GitHub允许你添加多个Key。
				假定你有若干电脑，你一会儿在公司提交，一会儿在家里提交，只要把每台电脑的Key都添加到GitHub，就可以在每台电脑上往GitHub推送了。
		创建远程库
			现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步。
			这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作，真是一举多得。

			1.首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库。
			2.在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库。
			目前，在GitHub上的这个learngit仓库还是空的。
			GitHub告诉我们，可以从这个仓库克隆出新的仓库，
			也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
		关联远程库：
			关联一个远程库，使用命令git remote add origin git@server-name:账号名/远程库名.git；
		推送版本库内容到远程库：
			关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
			此后，每次提交到本地库后，只要有必要，就可以使用命令git push origin master推送最新修改；
		从远程库克隆：
			$ git clone git@server-name:账号名/远程库名.git
			git clone git@rjgit:hecaigui/test.git
			注：
				1.克隆的库会存到当前文件夹下。一个库一个文件夹，库里头有一个git文件夹。
				2.如果有多个人协作开发，那么每个人各自从远程克隆一份就可以了。
				3.从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。
					如果你的小伙伴要在dev分支上开发，要用这个命令：
					$ git checkout -b dev origin/dev
	分支管理：
		创建与合并分支：
			介绍：
				master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。
				每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长：
			创建分支：
				介绍：
					创建dev分支，Git新建了一个指针叫dev，指向master相同的提交（只有新建分支时dev指针与master指针在同一个位置），
					再把HEAD指向dev，就表示当前分支在dev上。
					以后对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变。
				例：
					1.创建并切换分支
					git checkout -b dev
					命令解释：
						git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
						$ git branch dev
						$ git checkout dev
					2.做修改并提交到本地版本库
					3.切换回master分支
						发现刚才修改不见了，因为那个提交是在dev分支上，而master分支此刻的提交点并没有变。
					4.把dev分支的工作成果合并到master分支上：
						$ git merge dev
					5.删除dev分支了：
						$ git branch -d dev (was b17d20e).
			Git怎么合并：
				最简单的方法，就是直接把master指向dev的当前提交，就完成了合并。
				那这时有代码冲突是不是要手动解决？
			查看分支：
				$ git branch
				git branch命令会列出所有分支，当前分支前面会标一个*号。
			切换分支：
				$ git checkout master
				切换回master分支
			推送分支
				推送分支，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上。
				git push origin 分支
		解决冲突：
			分支合并时产生冲突：
				两分支文件各自都分别有新的提交，这时两分支合并时，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突。
				这是打开要合并的文件，手动解决冲突后再提交，即可合并成功。
			推送分支时产生冲突：
				解决方案：
					1.创建本地dev分支与远程origin/dev分支的链接关系
					$ git branch --set-upstream-to <branch-name> origin/<branch-name>
					2.用git pull把最新的提交从origin/dev抓下来，会自动合并提示冲突。
					3.手动解决冲突，提交到本地版本库。再推送分支
				注：
					Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
					git log --graph命令可以看到分支合并图。
		多人协作的工作模式通常是这样：
			1.首先，可以试图用git push origin <branch-name>推送自己的修改；
			2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
			3.如果合并有冲突，则解决冲突，并在本地提交；
			4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
			注：
				如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建。

		

异常：
	Could not resolve hostname：
		配置本地域名解析。
		例：192.168.210.139 rjgit