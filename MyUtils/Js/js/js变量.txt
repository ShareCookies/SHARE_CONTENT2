https://www.cnblogs.com/cc156676/archive/2016/07/30/5719805.html
介绍：
	hcg：
		es是js的升级版，继承了js的几乎所有语法规则。
		所有主流浏览器均支持es。
变量声明：
	var声明变量：
		1.用var关键字声明的变量，未经初始化时，保存的是一个特殊的值—undefined。
		2.var声明的变量是松散类型的，可以存储任何类型的数据。

	es：
		let声明变量：
			1.同上。未经初始化时，保存的是一个特殊的值—undefined。
			2.同上。可以存储任何类型的数据。
变量赋值：
	介绍：
		JS中的变量可以保存两种不同类型的值。
	判断变量的类型：
		console.log(typeof(a));
	基本类型值：
		Number、String、Boolean、Null、Undefiend
		undefined：
			表示一个未初始化过的对象
		null：
			表示一个空对象
		null与undefined区别：
				console.log(a==b);//结果true，因为==只是判断值是否空缺
				console.log(a===b);//严格相等运算符“===”
	引用类型值：！
		介绍：
			object。
			变量实际上保存的是一个指向该对象的指针。
		例：
			var person1 = {
				name : "CC"
			};
			var person2 = person1;//当复制保存着对象的变量时，复制的其实是指针；复制操作结束后，两个变量指向同一个对象。
			console.log(person2.name);    //"CC"
			person1.name = "VV";
			console.log(person2.name);    //"VV"
			//对于引用类型值，可以为其添加属性和方法，也可以修改或者删除其属性和方法？

	函数类型值：？是否属于引用类型值
		介绍：
			function。
			！就是将函数赋值给变量
		例：
			var s=function (){};console.log(typeof s);
		*函数变量的调用：
			https://blog.csdn.net/u010746364/article/details/53405652
			1.var s = test();//调用test函数并将返回值赋值给变量。
			2.var s = test;//将函数赋值给变量。 alert(s)打印的时候，将整个函数打印出来了。注：test函数赋值给变量s之后，s就是一个函数了，s()就可以调用函数了。
		注：
			js函数的声明有两种方式。
	注：
		1.JS中无法使用变量类型来声明变量，只能使用var，let关键字来声明变量。
		2.typeof
			1.使用typeof 关键字 ，判断变量的类型。
				例:var t=1;console.log(typeof t);
			2.typeof 返回的是字符串
				例：var test={};console.log(typeof test=='object'?'字符串':'非字符串');
	js 对象实现值引用而不是对象引用
		var str = JSON.stringify(datas);
        var dsj = JSON.parse(str);
        //dsj引用datas的值而不是数据地址
变量作用域:
	全局变量：
		介绍：
			所有在全局作用域中声明的变量、函数都会变成window对象的属性和方法。
			全局变量可以通过，window.变量，来访问。
			全局方法也是。
		例：
		　　var age = 55;
		　　console.log(window.age);
		注：
			全局作用域：
				js文件中，顶层作用域即为全局作用域。
				顶层作用域，即未被任何方法或对象等所包裹的域。
	局部变量：
		介绍：
			如在函数内部声明的变量，可称为局部变量。
			该变量只能在该函数，和该函数包裹的作用域内使用。

	for：
		用var在for作用域中声明的变量，能拿到外头使用。
		用let在for作用域中声明的变量，不能拿到外头使用。
		注：
			for作用域：指for的()和{}的范围。
			Javafor中变量不能拿到for外部使用。
		例：
			for(let c=0;c<1;c++){
				console.log(c);
				let d=2;
			}
			console.log(c);
			console.log(d);
	变量声明的提升：
		 var e = "hello";
		 (function func() {
			 //var x; //变量的声明被提升到了这一个位置
			 console.log(e);    //undefined
			 var e = "world";
		 })();
		 注：
			(函数)();该写法用来执行函数？

HTMLCollection 集合对象：
	遍历集合中的元素;
		var myCollection = document.getElementsByTagName("p");
		var i;
		for (i = 0; i < myCollection.length; i++) {
   			 myCollection[i].style.backgroundColor = "red";
		}
	注：
		HTMLCollection 不是一个数组！
		HTMLCollection 看起来可能是一个数组，但其实不是。
		你可以像数组一样，使用索引来获取元素。
		HTMLCollection 无法使用数组的方法： valueOf(), pop(), push(), 或 join() 。


		
变量方法：
	forEach():
		https://www.runoob.com/jsref/jsref-foreach.html
		介绍：
			该方法用于调用数组的每个元素，并将元素传递给回调函数。
			例：
				<button onclick="numbers.forEach(myFunction)">点我</button>
				<script>
					var numbers = [65, 44, 12, 4];
					function myFunction(item,index,arr) {
						console.log(item);
						console.log(index);
						console.log(arr);
					}
				</script>
			例2：
				配合es6箭头函数使用：
				   数组.forEach((item, index) => {
						console.log(item);
					});
		注:
			1.forEach() 对于空数组是不会执行回调函数的。
			2.break;continue;对foreach是无效的。
			3.return
				1.return;只会跳过本次循环
				2.无法通过return从foreach中返回数据。
			4.foreach循环的跳出可通过抛异常：
				try {
                    数组.forEach((item, index) => {
						throw new Error('抛出异常跳出循环');
                    });
                } catch (e) {
                    console.log(e);
                }
			5.foreach this指向问题：
				../this指向.txt
				
注：
	if 为false的情况:
		undefined,null,"",0,false
		