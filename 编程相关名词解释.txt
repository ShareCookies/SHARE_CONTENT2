终端：
	终端（Terminal）也称终端设备，是计算机网络中处于网络最外围的设备，主要用于用户信息的输入以及处理结果的输出等。
回调函数：
	回调函数是一种以参数形式传递给另一个函数的函数。
	例：
		如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个标准的函数，并为每个 AJAX 任务调用该函数。
		该函数调用应该包含 URL 以及发生 onreadystatechange 事件时执行的任务（每次调用可能不尽相同）
		function myFunction(){
			loadXMLDoc("/try/ajax/ajax_info.txt",function(){
				if (xmlhttp.readyState==4 && xmlhttp.status==200){
					document.getElementById("myDiv").innerHTML=xmlhttp.responseText;
				}
			});
		}
	注：
		c中，叫通过函数指针调用的函数，来对特定的事件或条件进行响应
		把函数的指针（地址）作为参数传递给另一个函数，当这个指针被用来调用其所指向的函数时，我们就说这是回调函数。
版本控制：
	https://baike.baidu.com/item/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/3311252
	介绍：
		版本控制是指对软件开发过程中各种程序代码、配置文件及说明文档等文件变更的管理。
	版本控制功能包括：
		检入检出控制、分支和合并、历史记录。
	常用版本控制软件：
		svn
java缓冲区：
	介绍：
		缓冲区就是内存里的一块区域。
		如果是边读边写，就会很慢，也伤硬盘。把数据先存内存里，然后一次性写入，类似数据库的批量操作，这样效率比较高。
	为啥使用缓冲区：
		调用I\O操作的时候，实际上还是一个一个的读或者写，关键就在，CPU只有一个，不论是几个核心。
		CPU在系统调用时，会不会还要参与主要操作？参与多次就会花更多的时间。
		系统调用时，若不用缓冲，CPU会酌情考虑使用 中断。此时CPU是主动地，每个周期中都要花去一部分去询问I\O设备是否读完数据，这段时间CPU不能做任何其他的事情（至少负责执行这段模块的核不能）。所以，调用一次读了一个字，通报一次，CPU腾出时间处理一次。
		而设置缓冲，CPU通常会使用 DMA 方式去执行 I\O 操作。CPU 将这个工作交给DMA控制器来做，自己腾出时间做其他的事，当DMA完成工作时，DMA会主动告诉CPU“操作完成”。这时，CPU接管后续工作。在此，CPU 是被动的。DMA是专门 做 I＼O 与 内存 数据交换的，不仅自身效率高，也节约了CPU时间，CPU在DMA开始和结束时做了一些设置罢了。
		所以，调用一次，不必通报CPU，等缓冲区满了，DMA 会对C PU 说 “嘿，伙计！快过来看看，把他们都搬走吧”。
		综上，设置缓冲，就建立了数据块，使得DMA执行更方便，CPU也有空闲，而不是呆呆地候着I\O数据读来。从微观角度来说，设置缓冲效率要高很多。尽管，不能从这个程序上看出来。 几万字的读写\就能看到差距
语法糖:
	我认为就是一种缩写，
	如v-model可以实现表单数据的双向绑定，但是该效果的实现，实际上就是以另一种写法实现的。

EJB:
	hcg：ejb企业级JavaBean,就是一款java开发框架。
路由：
	把请求转向到一个地方。
	至于是哪个地方，则一般由你来配置。
	例：
		将请求路由到其他的组件之中。
