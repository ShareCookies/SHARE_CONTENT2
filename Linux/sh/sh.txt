https://www.runoob.com/linux/linux-shell.html
https://baijiahao.baidu.com/s?id=1708863054337443037&wfr=spider&for=pc
前言：
	Shell程序：
		Shell 是一个用 C 语言编写的程序，它是用户使用 Linux 的桥梁。
		Shell是外壳的意思，就是操作系统的外壳。我们可以通过shell命令来操作和控制操作系统，
		比如Linux中的Shell命令就包括ls、cd、pwd等等。
	Shell 脚本（shell script）:
		shell脚本就是由Shell命令组成的执行文件，将一些命令整合到一个文件中，进行处理业务逻辑
	附：
		脚本语言：
			脚本语言通常是解释运行的。
			脚本不用编译即可运行。它通过解释器解释运行，所以速度相对来说比较慢。
		
编写shell脚本：
	注释
		# 开头的就是注释，被编译器忽略

		单行注释： 
			#

		多行注释：
			<<EOF … EOF 
			或者 :<<! … ! （:<< 标识多行注释开始，并指定一个标识符作为开始结束的标志）
		#! 
			#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。
			例：test.sh文本内容
				#!/bin/bash
				echo "Hello World !"
			注：
				编写完脚本后，运行不了。
				一直提示 /bin/sh^M: bad interpreter: No such file or directory
				那么注意下是否编码问题，有可能是你用了window的utf-8，改为unix的即可。

			附：
				sh扩展名：
					扩展名并不影响脚本执行，见名知意就好。
				sh/bash/csh/Tcsh/ksh/pdksh等shell的区别:
					...
	变量
		变量类型
			运行shell时，会同时存在三种变量：
			局部变量：
				局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
			环境变量：
				所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
			shell变量：
				shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行
		变量操作
			创建普通变量： 
				name=“test” （=两边不可有空格）
			创建只可函数体中使用的局部变量： 
				local name=“test” （使用local修饰的变量在函数体外无法访问，并且local只能在函数体内使用）
			使用变量： 
				echo $name 或者 echo ${name} （推荐使用大括号版）
			变量重新赋值： 
				name=“new_test” （将原值覆盖）
			只读变量： 
				name=“only_read” -> readonly name （使用readonly标识后的变量，不可被修改）
			删除变量： 
				unset name; （删除之后不可访问，删除不掉只读变量）
		字符串变量
			1）单引号
			单引号变量var='test' ，只能原样输出，变量无效
			单引号中不能出现一个单独的单引号，转义也不可以
			2）双引号
			双引号变量var="my name is ${name}"，变量有效
			可出现转义符
			3）拼接字符串
			中间无任何+，之类的字符
			name=“this is”" my name"; name=“this is my name”; name=“this” is “my name” 等效
			name=‘this is'' my nam'; name=‘this is my name'; name=‘this' is ‘my name' 等效
			4）获取字符串长度
			在${}中使用“#”获取长度
			name=“test”;
			echo ${#name}; # 输出为4
			5）提取子字符串
			1:4 从第2个开始 往后截取4个字符
			::4 从第一个字符开始 往后截取4个字符
			name=“this is my name”;
			echo ${name:1:4} #输出 is i
			echo ${name::4} #输出 this
		数组
			bash只支持一维数组，不支持多维数组
			定义数组：
				array_name=(li wang xiang zhang) （小括号做边界、使用空格分离）
			单独定义数组的元素： 
				array_para[0]=“w”; array_para[3]=“s” （定义时下标不连续也可以）
			赋值数组元素：
				array_name[0]=“zhao”;
			获取数组元素：
				array_name[0]=“li”
				array_name[3]=“zhang”
				echo ${array_name[0]} # 输出"li"
				echo ${array_name[1]} # 输出" "
				echo ${array_name[3]} # 输出"zhang"
				echo ${array_name[@]} # 输出"li zhang" 输出数组所有元素，没有元素的下标省略
			取得元素个数：
				${#array_name[@]} 或者 ${#array_name[*]}
			取得单个元素长度：
				${#array_name[1]}	
		参数传递 获取参数值：？
			$0 ： 固定，代表执行的文件名
			$1 ： 代表传入的第1个参数
			$n ： 代表传入的第n个参数
			$#：参数个数
			$*： 以一个单字符串显示所有向脚本传递的参数。如"$*“用「”」括起来的情况、以"$1 $2 … $n"的形式输出所有参数
			$@：与$*相同，但是使用时加引号，并在引号中返回每个参数。
			$$：脚本运行的当前进程号
			$！：后台运行的最后一个进程的ID
			$?： 显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。
			$* 与 $@ 区别
				相同点：都是引用所有参数。
				不同点：只有在双引号中体现出来。假设在脚本运行时写了三个参数 1、2、3，，则 " * " 等价于 “1 2 3”（传递了一个参数），而 “@” 等价于 “1” “2” “3”（传递了三个参数）。
	运算符
		...
	流程控制
		...
	定义函数
		...
	执行相关
		...

	输出:
		...
	...
运行 Shell 脚本有两种方法：
	1、作为可执行程序
	例：
		chmod +x ./test.sh  #使脚本具有执行权限
		./test.sh  #执行脚本
	附：？
		直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 文件。
		而通常只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里
		

	2、作为解释器参数

		这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名。
		例：
			/bin/sh test.sh
			/bin/php test.php
		附：
			这种方式运行的脚本，可以不需要在第一行指定解释器信息，写了也没用。