数组引用变量声明:
	int demoArray[];
	int[] demoArray;
	注:两种方式均可。

数组初始化:
	静态初始化:
		介绍:
			静态初始化的同时就为数组元素分配空间并赋值。
		例:
			1.int intArray[] = {1,2,3,4};
	动态初始化:
		介绍:
			动态初始化先申明数组为数组分配空间，再为数组复制。
		例:
			//分配内存空间
			int intArray[] = new int[3];
			//赋值
			floatArray[0] = 1;
数组大小：
	数组length是int，所以数组大小理论值是2的31次幂。
	但具体能放多少与 JVM 内存有关
二维数组:
	介绍:
		Java语言中，把二维数组看作是数组的数组，数组空间不是连续分配的，所以不要求二维数组每一维的大小相同。
	二维数组引用变量声明:
		注:与一唯类似。
	二维数组初始化:
		静态初始化:
			int intArray[ ][ ] = { {1,2}, {2,3}, {3,4,5} };
		动态初始化:
			//先分配外围数组内存空间
			int a[ ][ ] = new int[2][ ];
			//在次分配二维的数组内存空间
			a[0] = new int[3];
			a[1] = new int[5];
			//数组赋值
			…
数组的缺点：
	 1）一旦一定大小，就不能再缩小或者扩大规模
	 2）往数组中删除和插入元素成本高昂，容易造成“内存波动”。
	 3）数组元素数据类型单一
	 4）对内存成片性要求高
数组的优点：
	 1）最为轻量级的，低成本的变量集群。(内存消耗少)
	 2）随机检索定位速度最快.
数组常用操作：
	Arrays.asList(s);//数组转list
	list转数组：
		ArrayList<String> list=new ArrayList<String>();
		String[] strings = new String[list.size()];
		list.toArray(strings);
	打印数组内容：
		1.for循环遍历
		2.Arrays.toString() 和 Arrays.deepToString() 