https://blog.csdn.net/tyk9999tyk/article/details/53464353
坐下来，喝杯咖啡，阅读更多的代码：
	我们在阅读别人代码上花的时间比自己写代码的时间多得多，如果你不是的话，从今天就开始做吧。

	不管你现在能写出什么样的代码，总是因为在某年某月你阅读和学习到了什么东西。它只是你已有知识的反映。

	安卓的伟大之处就在于它是一个完全开源的平台。可以去深入研究这些代码看看他们是如何实现framework的。Github中有成千上万的开源库，只需选择一个看看人家是如何实现的，
如何学习：
	不讲原理的学习，都是虚伪的。
		因为技术的特性都是从原理中延伸出来的，理解原理才是真正的学习，效果比官网的文档甚至都好。
		后续个性化改进等都要以理解原理为前提。不然很可能就会出现你意料之外的场景。
	不讲业务(场景)的技术，都是骗人的。
		每个技术都有其适用场景，没有没用的技术也没有完美的技术。
	不讲实战的学习，都是骗人的。
		只有实战，才能真正融会贯通。
如何编程：
	需求一定要清晰：
		新功能和大概动，一定要有份详细的需求文档+和现场的反复沟通和文字确认。
			如果没搞清楚，那么后期返工都算好结果了。
		如果很急，那么整体功能则一定要搞清楚，一些细节和扩展功能可以滞后。
			因为整体功能都没搞懂，那么你搭起来的架构必定是锅，很可能会出现架构重写...
	任何事情都要考虑全面、周全：
		你能想到的bug和场景一定都要去修复和避免。
		因为你担心的场景一定会发生，计算机是门严谨的活。
