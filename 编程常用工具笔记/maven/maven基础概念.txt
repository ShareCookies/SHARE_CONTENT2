Maven生命周期:
    介绍：
        Maven通过Maven生命周期实现项目管理。
        Maven的生命周期就是对项目的构建过程进行抽象和统一；
        包括项目清理，初始化，编译，打包，测试，部署等构建步骤。
	maven用命令管理项目各生命周期：
		./maven命令介绍.txt
    插件：
        https://www.runoob.com/maven/maven-plugins.html
        介绍：
            我们在输入 mvn 命令的时候 比如 mvn clean，clean 对应的就是 Clean 生命周期中的 clean 阶段。
            但是 clean 的具体操作是由 maven-clean-plugin 来实现的。
            所以说 Maven 生命周期的每一个阶段的具体实现都是由 Maven 插件实现的。

        pluginRepositories：
            pluginRepositories 名为插件仓库，存放maven插件的仓库，告诉项目您使用的插件应该去什么地方下载。
            附：
                repositories 名为仓库，解决项目依赖的第三方jar包存放位置，以及多个项目公用第三方jar包。
        附：
            Maven 实际上是一个依赖插件执行的框架，每个任务实际上是由插件完成。
            Maven 插件通常被用来：
                创建 jar 文件
                创建 war 文件
                编译代码文件
                代码单元测试
                创建工程文档
                创建工程报告

maven的依赖管理：
	介绍：
		在对应maven项目的pom.xml中声明依赖，maven就会自动从远程仓库等中自动获取jar包   下载依赖到本地仓库，然后你的项目就可以使用这些依赖了，
		 即 所以你无需手动引入jar包等，类中就可以import对应第三方的包和依赖了。
	仓库：
		介绍：
			仓库就是存放依赖和插件的地方。
				Maven在某个统一的位置存储所有项目的共享的构件，这个统一的位置，就称之为仓库。

            仓库分类：
                https://blog.csdn.net/qq_33807380/article/details/127001425
                本地仓库、第三方仓库(私服)、中央仓库。


                本地仓库：
                    1. Maven会将工程中依赖的构件(Jar包和插件)从远程下载到本机一个目录下管理，每个电脑默认的仓库是在 $user.home/.m2/repository下
                    2. 可以通过settings.xml文件的标签来指定本地仓库的目录。
                    <localRepository>D:\Work\Maven\repositoryNexus</localRepository>
                第三方仓库(私服)
                    介绍：
                        第三方仓库，又称为内部中心仓库，也称为私服。一般是由公司自己设立的，只为本公司内部共享使用。
                        有两个作用：
                            1.存放一些公司内部的包，供公司人员使用。
                            2.作为公用类库镜像缓存，提高jar下载的频率。

                        附：
                            使用nexus构建私服：
                                http://www.yiidian.com/maven/maven-dependence.html
                            使用nexus上传下载第三方jar包：
                                https://www.cnblogs.com/chywx/p/11227151.html
                            批量上传jar包到私服：
                                https://blog.csdn.net/isea533/article/details/77197017
                                例：
                                    ./例/Deploy.java
                                附:
                                    -Durl=xxx指定了上传的仓库位置，从nexus的配置 -》repository ->repositories 中可以复制到对应的仓库地址
                                    2.随便上传到那个仓库都行
                    配置私服信息：
                        如果想让maven连接到私服获取jar包，那么需要配置私服信息。
                        私有仓库又可以根据配置的位置不同可分为全局profile仓库、项目profile仓库、项目仓库、镜像仓库：

                    全局profile仓库：
                        通过 settings.xml 中的 profiles.profile.repositories.repository 配置，对所有使用该maven的项目都生效，但需要激活。
                          <profiles>
                           <profile>
                            <id>dev</id>
                            <repositories>
                              <repository>
                                <id>nexus-repo</id>
                                <name>nexus-repo</name>
                                <url>http://127.0.0.1:8081/repository/maven-public/</url>
                                <layout>default</layout>
                                <releases><enabled>true</enabled></releases>
                                <snapshots><enabled>true</enabled></snapshots>
                              </repository>
                            </repositories>
                          </profile>
                          </profiles>
                          <!--激活profile-->
                          <activeProfiles>
                            <activeProfile>dev</activeProfile>
                          </activeProfiles>
                    项目profile仓库：
                        通过项目的pom.xml 中的 profiles.profile.repositories.repository 配置，仅对该maven的项目都生效。
                    项目仓库：
                        通过项目的pom.xml 中的 repositories.repository 配置，仅对该maven的项目都生效。
                    镜像仓库：
                        通过 settings.xml 中的 mirrors.mirror 配置。主要提供一个方便切换远程仓库地址的途径。
                        <mirror>
                        　　<id>nexus-aliyun</id>
                        　　<name>Nexus aliyun</name>
                        　　<url>http://maven.aliyun.com/nexus/content/groups/public/</url>
                        　　<mirrorOf>central</mirrorOf>
                        </mirror>
                中央仓库：
                    maven默认的远程仓库， 这个公共仓库是由Maven自己维护，里面有大量的常用类库，并包含了世界上大部分流行的开源项目构件，目前是以java为主。
                    Maven已经内置了该远程公用仓库。
                        在maven的lib安装目录中有一个maven-model-builder-3.0.4.jar，在这个jar包中有个org/apache/maven/model/pom-4.0.0.xml文件，在这个pom文件中就配置了中央仓库，默认的中央仓库的id为central。
                    附：
                        发布Jar包到Maven中央仓库：
                            https://www.jianshu.com/p/f726dce40bef
                        从中央仓库获取包:
            　　			1.https://maven.aliyun.com/mvn/search
                            2.输入关键字查询获得需要内容，确定需要版本
                            3.复制获得的坐标即可,获取坐标即三个关键属性值
        从仓库获取jar包过程：
            https://blog.csdn.net/mmdsl083/article/details/128597003
            https://www.cnblogs.com/wudeyun/p/16261862.html
            https://maven.apache.org/guides/introduction/introduction-to-profiles.html
            优先级：
                本地仓库 > 私服（profile）> 远程仓库（repository）
                    即：优先从本地仓库查找，没有的话，如果有私服配置从私服找，没有的话，从中央仓库获取，然后下载到本地仓库
                比较优先级，只比较这三个，镜像不参与比较。
                附：
                    maven配置两个远程仓库源,第一个获取不到，会去第二个源下载。
                        多个私服，根据定义从上到下起作用，跟激活配置顺序无关。有很多 spring 包，在阿里云仓库可能有元数据，但是就是下载不了，需要调整相关仓库顺序
                镜像：
                    确定优先级后，在看是否有匹配的镜像，有匹配则从镜像下载，无匹配则直接走相关仓库。
                    附：
                        1. mirrorOf等于*的时候覆盖所有repository配置。
                        2. 多个相同仓库镜像，按照从上到下顺序，依次查找。找到立即停止，后面镜像就不起作用了
                        3. ？maven在镜像仓库中未找到依赖 会去仓库寻找吗
            maven仓库的执行顺序：
                local_repo > settings_profile_repo > pom_profile_repo > pom_repositories > settings_mirror > central
                ?
                    如何让pom.xml仓库 优先于 settings.xml的仓库
                附：
                    影响构建的本地pom
                        1. 当前项目的pom.xml
                        2. 父的pom.xml,递归查找
                        3. root pom.xml
                    查看完整pom
                        https://blog.csdn.net/qq_22783587/article/details/120612001
                        # 将影响当前pom的配置，通过继承，插值，配置文件 应用到当前pom文件
                        mvn help:effective-pom -Dverbose
        附：repositories、distributionManagement、pluginRepositories中repository的区别
            https://blog.csdn.net/netyeaxi/article/details/95804076