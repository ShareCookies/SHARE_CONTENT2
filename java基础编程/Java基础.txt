8种基本数据类型
	char 字符型
		大小: 2字节 。
		封装类:Character
		默认值:空
		注：
			空字符'\0'
			空格字符' '
			String不是基本数据类型，是引用类型。
	boolean布尔型
		大小:   boolean的大小JVM规范并没有指定。
		封装类:Boolean
		默认值:flase
	6数值型
		1.整型：byte、short、int、long
			整型取值范围：
				java中的整型为有符号数
				byte字节：
					大小:1字节=8位（bit）。范围为-128(-2^7)到127(2^7-1)。 
					封装类：Byte
					默认值: 0
					
					注：
						1.
							8位指的是8个二进制码。
							内存的存储体上面分若干个存储单元，一个存储单元可以存储8位或者16位，或32位的01序列。
						2.
							中文一个字节放不下，需要用两个字节来存储，得占16位。
				short：
					大小:short用2个字节存储。范围为-32,768 (-2^15)到32,767 (2^15-1)。 。封装类Character
					封装类：Short
					默认值: 0
					
					
				int：
					大小:int用4个字节存储。范围为-2,147,483,648 (-2^31)到2,147,483,647 (2^31-1)。
					封装类：Integer
					默认值:0
					
	　　		long：
					大小:long用8个字节存储。范围为-9,223,372,036,854,775,808 (-2^63)到9,223,372,036, 854,775,807 (2^63-1)。
					封装类：Long
					默认值: 0
					在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。
				附：
					/MyUtils\Java\数字.txt
		2.浮点型：
			float、double 4字节 8字节 
			float 单精度: 
				大小： 4字节 32位
				封装类：Float
				默认值: 0.0
			double 双精度：
				大小： 8字节 64位
				封装类：Double
				默认值: 0.0
				java中小数(2.2)默认是double类型。http://www.cnblogs.com/chenjfblog/p/7737332.html
			注：
			
			1.
			不管float还是double,在计算机上的存储都遵循IEEE规范，使用二进制科学计数法，包含三个部分：符号位，指数位和尾数部分。
			float的符号位，指数位，尾数为:1,  8,  23.     
			double 分别为1,  11,  52。
			精度主要取决于尾数部分的位数:
				float:
					float为23位，除去全部为0的情况以外，最小为2的-23次方，约等于1.19乘以10的-7次方，
					所以float小数部分只能精确到后面6位，加上小数点前的一位，即有效数字为7位。
				double:
					类似，double 尾数部分52位，最小为2的-52次方，约为2.22乘以10的-16次方，所以精确到小数点后15位，有效位数为16位。


	注：
		1.默认值：
			https://www.cnblogs.com/xiaostudy/p/10780768.html
			默认值在类实例化，也就是对象中才有默认值，或者是静态变量。

		2.8种包装类与8种基础数据类型之间能自动进行拆箱和装箱。
			注：尽量不要用基本类型变量来赋值包装类型。
			int a = .getNum();// num（interger） 是 null的话，拆箱时类型转成INT是会报null异常的。
			
变量：
	全局方法，常量：
		1.用public static 修饰的方法或变量相当于全局变量或方法。
		因为全局都可访问到，且只有一个实例。
		2.public static final 修饰相当于常量，因为无法定义后无法更改

	字符串：
		1.java中单引号用来存放字符，双引号用来存放字符串。
			注：所以"a"与'a'不能比较
		2.转义：
			转义符\
			注：""中 \\才算一个\

		3.多次修改字符串值：
			字符串值经常变化不要用String
			介绍：
				StringBuffer和StringBuilder类的对象能够被多次的修改，并且不产生新的未使用对象。
			StringBuffer：其方法是线程安全的
			StringBuilder：其方法不是线程安全的，有速度优势
		4.字符串转字符数组：
			char chars[] = 字符串.toCharArray();
	可变参数：
		https://www.cnblogs.com/kkkky/p/7345946.html
		Java1.5增加了新特性可变参数，
		适用于参数个数不确定，类型确定的情况，java把可变参数当做数组处理。

		语法：
			...位于变量类型和变量名之间，前后有无空格都可以；
			注：
				1.只支持有一个可变参数。
				2.可变参数必须位于参数最后一项。
					因为参数个数不定，如果当其后边还有相同类型参数时，java无法区分传入的参数属于前一个可变参数还是后边的参数，所以只能让可变参数位于最后一项。
				3.编译器会为可变参数隐式创建一个数组，所以在方法体中要以数组的形式访问可变参数。
		例：
		public class Varable {
			public static void main(String[] args) {
				System.out.println(add(2, 3));
				System.out.println(add(2, 3, 5));
			}
		 
			public static int add(int x, int... args) {
				int sum = x;
				for (int i = 0; i < args.length; i++) {
					sum += args[i];
				}
				return sum;
			}
		}

基础语法：
	条件语句 if：
		1.if(){}else if(){} else{}
			这三个判断中只会执行一个判断：
				if瞒足则不执行elseIf，else。
				if不满足则判断elseIf，elseIf满足不执行else。
				都不满足执行else。
		2.if的短路功能：
			&&具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式。
			短路||，若左边表达式结果为true则不会对右边的表达式进行判断。
			例：
				对于if(str != null && !str.equals(“”))表达式，
				当str为null时，后面的表达式不会执行，
				所以不会出现NullPointerException
			
			附：
				&，&&，|，||：
					短语的逻辑运算符相对于普通的逻辑运算符效率更高些。
		3.if只能判断boolean不能判断int的0，1
	switch：
		在idk 1.7之前，switch只能支持byte, short, int, char或者其对应的封装类以及Enum类型。
		从idk 1.7之后switch开始支持String。
	异常处理
		try {} catch(){} finally{}：
		finally：
			finally代码块一定执行，即使是try中有return
			例：try {return ;} finally {syso(22);}
运算符:
	==:
		1.对于基础变量，直接存储的是“值”，因此在用关系操作符==来进行比较时，比较的就是 “值” 本身。
			例：int n=3;int m=3;用==比较的时候结果是true。
		2.对于非基本数据类型的变量，可称为引用类型的变量。用==对str1和str2进行第一次比较时，得到的结果是false。
			例：String str1；str1存储的并不是 “值”本身，而是于其关联的对象在内存中的地址。
关键字：	
	continue：
		介绍：
			continue只能用于循环语句。注：也能用于增强for循环。
			作用是跳过本次的循环体内容，继续下一次循环。
		注：
			即跳过continue后的循环体内容但i()会加1。
		附：
			continue配合标记使用：
	break：
		介绍：
			1.跳出循环体，继续执行循环外的函数体
			2.跳出switch。
	return:
		用来跳出整个函数体。
	static：
		静态变量：
			例：
		静态方法：
			例：
		静态代码块：
			例：static{//执行相关操作}
			多用于初始化操作。注：比构造函数先
		修饰内部类：
		静态导包
			例：
			import static java.lang.Math.*;
	final关键字：
		1.被final修饰的类不可以被继承 
		3.被final修饰的变量不可以被改变。如果修饰引用，那么表示引用不可变，引用指向的内容可变。
		5.被final修饰的常量，在编译阶段会存入常量池中。!
		4.被final修饰的方法，JVM会尝试将其内联，以提高运行效率。
			修饰的方法可以继承，但不能重写。可以被重载的
		
		编译器对final域要遵守的两个重排序规则:?
		