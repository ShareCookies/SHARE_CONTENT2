变量：
	8种基本数据类型：primitive type
		char 字符型
			大小: 2字节 。
			封装类:Character
			默认值:空
			注：
				空字符'\0'
				空格字符' '
				String不是基本数据类型，是引用类型。
		boolean布尔型
			大小:   boolean的大小JVM规范并没有指定。
			封装类:Boolean
			默认值:flase
		6数值型
			1.整型：byte、short、int、long
				整型取值范围：
					java中的整型为有符号数
					byte字节：
						大小:1字节=8位（bit）。范围为-128(-2^7)到127(2^7-1)。 
						封装类：Byte
						默认值: 0
						
						注：
							1.
								8位指的是8个二进制码。
								内存的存储体上面分若干个存储单元，一个存储单元可以存储8位或者16位，或32位的01序列。
							2.
								中文一个字节放不下，需要用两个字节来存储，得占16位。
					short：
						大小:short用2个字节存储。范围为-32,768 (-2^15)到32,767 (2^15-1)。
						封装类：Short
						默认值: 0
						
						
					int：
						大小:int用4个字节存储。范围为-2,147,483,648 (-2^31)到2,147,483,647 (2^31-1)。
						封装类：Integer
						默认值:0
						注：
							java数值默认类型
		　　		long：
						大小:long用8个字节存储。范围为-9,223,372,036,854,775,808 (-2^63)到9,223,372,036, 854,775,807 (2^63-1)。
						封装类：Long
						默认值: 0
						在变量初始化的时候，long类型的默认值为0L或0l，也可直接写为0。
					附：
						/MyUtils\Java\数字.txt
			2.浮点型：
				float、double 4字节 8字节 
				float 单精度: 
					大小： 4字节 32位
					封装类：Float
					默认值: 0.0
				double 双精度：
					大小： 8字节 64位
					封装类：Double
					默认值: 0.0
				注：
					http://www.cnblogs.com/chenjfblog/p/7737332.html
					在java中浮点型默认是double的，java中小数(2.2)默认是double类型。
						因为小数要转换二进制进行存储，此时就涉及到数据精度问题。
					浮点型存储结构如下：
						float：
							符号位（1 bit）	 指数（8 bit）	尾数（23 bit）
						double：
							符号位（1 bit）	 指数（11 bit）	 尾数（52 bit）
						附：
							尾数就是小数部分吧
					部分小数无法精确存储：
						例：
							1.1，计算机如何将其据转换成二进制存储的。
							整数部分就是1，转换成二进制1（这里整数转二进制不再赘述）
							小数部分：0.1
								0.1*2=0.2取整数部分0，基数=0.2
								0.2*2=0.4取整数部分0，基数=0.4
								0.4*2=0.8取整数部分0，基数=0.8
								0.8*2=1.6取整数部分1，基数=1.6-1=0.6
								0.6*2=1.2取整数部分1，基数=1.2-1=0.2
								0.2*2=0.4取整数部分0，基数=0.4
								...直至基数为0。
							1.1用二进制表示为：1.000110......
						
						0.1 = 0*2^(-1)+0*2^(-2)+0*2^(-3)+1*2^(-4)+.........而double类型表示小数部分只有52位，当向后计算 52位后基数还不为0，那后面的部分只能舍弃，从这里可以看出float、double并不能准确表示每一位小数，对于有的小数只能无限趋向它。
					小数运算：	
						在计算机 中加减成除运算实际上最后都要在计算机中转换成二进制的加运算。
						由此当计算机运行System.out.println(2.00-1.10)时会拿他们在计算机内存中的二进制表示计算，而1.10的二进制表示本身就不准确，所以会出现0.8999999999999999的结果。
						附：
							但为什么System.out.println(2.00f-1.10f);得出的结果是0.9呢。因为float精度没有double精度那么大，小数部分0.1二进制表示被舍去的比较多。
					BigDecimal	
						1.程序中应尽量避免浮点数的比较 。2.float、double类型的运算往往都不准确
						解决方案是使用BigDecimal提供的方法进行比较或运算。
						但要注意在构造BigDecimal的时候使用float、double的字符串形式构建，BigDecimal(String val)；为什么不用BigDecimal(double val)API里写的比较清楚。
						例：
							减法运算：
							BigDecimal b1 = new BigDecimal(Double.toString(2.00));
							BigDecimal b2 = new BigDecimal(Double.toString(1.10));
							double result = b1.subtract(b2).doubleValue();
				1.
				不管float还是double,在计算机上的存储都遵循IEEE规范，使用二进制科学计数法，包含三个部分：符号位，指数位和尾数部分。
				float的符号位，指数位，尾数为:1,  8,  23.     
				double 分别为1,  11,  52。
				精度主要取决于尾数部分的位数:
					float:
						float为23位，除去全部为0的情况以外，最小为2的-23次方，约等于1.19乘以10的-7次方，
						所以float小数部分只能精确到后面6位，加上小数点前的一位，即有效数字为7位。
					double:
						类似，double 尾数部分52位，最小为2的-52次方，约为2.22乘以10的-16次方，所以精确到小数点后15位，有效位数为16位。
		注：
			1.默认值：
				https://www.cnblogs.com/xiaostudy/p/10780768.html
				默认值在类实例化，也就是对象中才有默认值，或者是静态变量。
			2.8种包装类（引用类reference type）与8种基础数据类型之间能自动进行拆箱和装箱。
				注：尽量不要用基本类型变量来赋值包装类型。
				int a = .getNum();// num（interger） 是 null的话，拆箱时类型转成INT是会报null异常的。
				
				String：

					String直接赋值和使用new的区别：
						https://blog.csdn.net/OREO_GO/article/details/51397903
						String str1 = “ABC”;可能创建一个或者不创建对象
							看方法区常量池是否有对应的字面量
						String str2 = new String(“ABC”);至少创建一个对象，也可能两个。
							看方法区常量池是否有对应的字面量
					String和StringBuilder、StringBuffer的区别：
						Java平台提供了两种类型的字符串：String和StringBuffer/StringBuilder，它们可以储存和操作字符串。
						1. 其中String是只读字符串，也就意味着String引用的字符串内容是不能被改变的。
						2. 而StringBuffer/StringBuilder类表示的字符串对象可以直接进行修改。
							StringBuilder是Java 5中引入的，它和StringBuffer的方法完全相同，区别在于它是在单线程环境下使用的，因为它的所有方面都没有被synchronized修饰，因此它的效率也比StringBuffer要高。
					intern()：
						...
					String 类是final类，不可以被继承。	
			
	全局方法，常量：
		1.用public static 修饰的方法或变量相当于全局变量或方法。
		因为全局都可访问到，且只有一个实例。
		2.public static final 修饰相当于常量，因为无法定义后无法更改
	字符串：
		1.java中单引号用来存放字符，双引号用来存放字符串。
			注：所以"a"与'a'不能比较
		2.转义：
			转义符\
			注：""中 \\才算一个\
		6.
			String直接赋值和使用new的区别:
				https://www.cnblogs.com/qiaoyanlin/p/6877628.html
			String str1 = "ABC";
			String str2 = new String("ABC");//为用到new关键字，肯定会在heap中创建一个str2的String对象，它的value是“ABC”。同时如果这个字符串再java String池里不存在，会在java池里创建这个String对象“ABC”。
			...
		7.字符串的+操作
			字符串的+操作其本质是创建了StringBuilder对象进行append操作，然后将拼接后的StringBuilder对象用toString方法处理成String对象.
			这一点可以用javap -c StringEqualTest.class命令获得class文件对应的JVM字节码指令就可以看出来。
		其余介绍：
			https://github.com/yuyumyself/UtilsProject/blob/master/Utils/src/main/java/com/china/hcg/StringUtils.java
	可变参数：
		https://www.cnblogs.com/kkkky/p/7345946.html
		Java1.5增加了新特性可变参数，
		适用于参数个数不确定，类型确定的情况，java把可变参数当做数组处理。
		语法：
			...位于变量类型和变量名之间，前后有无空格都可以；
			注：
				1.只支持有一个可变参数。
				2.可变参数必须位于参数最后一项。
					因为参数个数不定，如果当其后边还有相同类型参数时，java无法区分传入的参数属于前一个可变参数还是后边的参数，所以只能让可变参数位于最后一项。
				3.编译器会为可变参数隐式创建一个数组，所以在方法体中要以数组的形式访问可变参数。
		例：
		public class Varable {
			public static void main(String[] args) {
				System.out.println(add(2, 3));
				System.out.println(add(2, 3, 5));
			}
		 
			public static int add(int x, int... args) {
				int sum = x;
				for (int i = 0; i < args.length; i++) {
					sum += args[i];
				}
				return sum;
			}
		}
基础语法：
	条件语句 if：
		1.if(){}else if(){} else{}
			这三个判断中只会执行一个判断：
				if瞒足则不执行elseIf，else。
				if不满足则判断elseIf，elseIf满足不执行else。
				都不满足执行else。
		2.if的短路功能：
			&&具有短路的功能，即如果第一个表达式为false，则不再计算第二个表达式。
			短路||，若左边表达式结果为true则不会对右边的表达式进行判断。
			例：
				对于if(str != null && !str.equals(“”))表达式，
				当str为null时，后面的表达式不会执行，
				所以不会出现NullPointerException
			
			附：
				&，&&，|，||：
					短语的逻辑运算符相对于普通的逻辑运算符效率更高些。
		3.if只能判断boolean不能判断int的0，1
	
	异常处理
		try {} catch(){} finally{}：
		finally：
			finally代码块一定执行，即使是try中有return
			例：try {return ;} finally {syso(22);}
运算符:
	https://www.cnblogs.com/shuaiding/p/11124974.html
	运算符1：
		针对2进制而言。
		&与（均1为1）、|或（有1为1）、~非（取反）、^异或(同0异1)
	运算符2：
		...
		分隔符	   
		一元运算符	
		算术运算符
			除法运算：
				java中的“/”、“%”运算，其中前者为取整，后者取余数。
				DecimalFormat：
					https://blog.csdn.net/qq_35573326/article/details/79974366
		移位运算符
		关系运算符	
			==:
				关系操作符==进行比较时有两种情况：引用变量，基本变量。
				2.对于非基本数据类型的变量，可称为引用类型的变量。比较的是对象在内存中的地址
					因为引用变量存储的是对象的引用(内存中的地址)
					例：
						String str1；str1存储的并不是 “值”本身，而是于其关联的对象在内存中的地址。
						用==对str1和str2进行第一次比较时，得到的结果是false。
				1.对于基础变量，比较的就是 “值” 本身。
					因为对于8种基本数据类型的变量，变量直接存储的是“值”，
					例：int n=3;int m=3;用==比较的时候结果是true。
					
		逻辑运算符	
		三目运算符	
		赋值运算符
		++：
			https://blog.csdn.net/cuixianlong/article/details/100151895?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&dist_request_id=1328592.11027.16147547357172587&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control
			https://www.jb51.net/article/179905.htm
			++原理：
				...
			附：
				//		int b = 4;
				//		System.out.println((b++) < 5);
				//		System.out.println(b);
关键字：
	修饰符：
		private,protected,public,package(默认级别，即什么访问修饰符都不写)。
		private：
			介绍：
				私有的
			调用：
				被private关键字私有的成员之后,就只能在本类当中进行访问了。
				附：
					1.私有成员，即使通过对象（引用）打点调用，和类名打点（针对静态）调用，都是不行。
					例：
						以下私有成员的调用编译无法通过
						AccessModifier t = new AccessModifier();
						t.privateMethod();
						AccessModifier.staticPrivateMethod();
			继承：		
				在继承中，私有成员禁止被继承！
					答：应该是有继承的，只是子类也无法访问父类私有成员。			
		protected：
			介绍：
				受保护， protected修饰符与是否同包和子类有关。
			调用：
				对子类相当于公开。
				对同包中类相当于公开。对非同包中（且五父子关系的类）相当于私有。
				例：
					

			继承：
				受保护成员允许被继承，且调用
	　　public：
			介绍：
				公开的
			调用：
				调用方式无限制
			继承：
				公有成员允许被继承，且调用
		default：
			介绍：
				默认级别，即什么访问修饰符都不写。
				默认级别对于同一个包中的其他类相当于公开（public），对于不是同一个包中的其他类相当于私有（private）。
			调用：
				仅分同包与非同包
			继承：
				仅分同包与非同包
		附：
			1.访问修饰符级别总结：
						类内部		本包	子类	外部包
				public 		V		V		V		V
				protected 	V		V		V		X
				default		V		V		X		X
				private		V		X		X		X

			2.类修饰符：Java中，外部类的修饰符只能是public或默认，类的成员（包括内部类）的修饰符可以是以上四种。
	switch：
		在Java 5以前，switch(expr)中，expr只能是byte、short、int、char，或者其对应的封装类。
		从Java 5开始，Java中引入了枚举类型，expr也可以是enum类型。
		从Java 7开始，expr还可以是字符串（String）。
	continue：
		介绍：
			continue只能用于循环语句。注：也能用于增强for循环。
			作用是跳过本次的循环体内容，继续下一次循环。
		注：
			即跳过continue后的循环体内容但i()会加1。
		附：
			continue配合标记使用：
	break：
		介绍：
			1.跳出循环体，继续执行循环外的函数体.(仅跳出最近的一层循环)
			2.跳出switch。
		附：
			在Java中，如何跳出当前的多重嵌套循环。
				在最外层循环前加一个标记如A，然后用break A;可以跳出多重循环。
				（Java中支持带标签的break和continue语句，作用有点类似于C和C++中的goto语句，但是就像要避免使用goto一样，应该避免使用带标签的break和continue，因为它不会让你的程序变得更优雅，很多时候甚至有相反的作用，所以这种语法其实不知道更好）
				例：https://www.cnblogs.com/woaixingxing/p/6394952.html
	return:
		用来跳出整个函数体。
	static：
		静态变量：
			例：
		静态方法：
			静态方法能否被重写：
				https://www.cnblogs.com/vcgo/p/10459352.html
				在Java中静态方法可以被继承，但是不能被覆盖，即不能重写。
				注：
					如果子类中也含有一个返回类型、方法名、参数列表均与之相同的静态方法，那么该子类实际上只是将父类中的该同名方法进行了隐藏，而非重写。
						如何证明只是被隐藏了！反编译看看！
					父类引用指向子类对象时，只会调用父类的静态方法。所以，它们的行为也并不具有多态性。
		静态代码块：
			例：static{//执行相关操作}
			多用于初始化操作。注：比构造函数先
		修饰内部类：
		静态导包
			例：
			import static java.lang.Math.*;
	final关键字：
		https://www.cnblogs.com/dolphin0520/p/3736238.html
		1.修饰类：表示该类不能被继承；
		2.修饰方法：表示方法不能被重写；
		3.修饰变量：表示变量只能一次赋值以后值不能被修改（常量）。
		
		附：
			为什么局部内部类和匿名内部类只能访问局部final变量：
				https://www.cnblogs.com/dolphin0520/p/3811445.html
					1.如果final 修饰的值是确认的，那么会在编译阶段就直接把值传给内部类。（如果局部变量的值在编译期间就可以确定，则直接在匿名内部里面创建一个拷贝）
					2.如果局部变量的值无法在编译期间确定。则通过构造器传参的方式，来先对局部变量进行拷贝，然后在匿名内部类初始化时传递拷贝好的值。
					这样一来就解决了前面所说的 生命周期不一致的问题。
						注：生命周期不一致是指：方法执行完毕之后，变量a的生命周期就结束了，而此时Thread对象的生命周期很可能还没有结束，那么在Thread的run方法中继续访问变量a就变成不可能了，但是又要实现这样的效果，怎么办呢。Java采用了 复制  的手段来解决这个问题。
					但是新的问题又来了，既然在run方法中访问的变量a和test方法中的变量a不是同一个变量，当在run方法中改变变量a的值的话，会出现什么情况。对，会造成数据不一致性，这样就达不到原本的意图和要求。为了解决这个问题，java编译器就限定必须将变量a限制为final变量，不允许对变量a进行更改（对于引用类型的变量，是不允许指向新的对象），这样数据不一致性的问题就得以解决了。
				总结：
					为啥要传给内部类的变量要求为final。
					因为java是用拷贝的方式来解决变量和内部类的生命周期不一致问题。
					但是用该方案会造成拷贝值与原值不一致，此时就要用final来避免变量和内部类的拷贝变量不一致问题。
				static了？
		
	native关键字:
		https://www.cnblogs.com/KingIceMou/p/7239668.html
		Java平台有个用户和本地C代码进行互操作的API，称为Java Native Interface (Java本地接口)。
		使用native修饰的函数(方法)，说明这个方法是原生函数。
		即这个方法是用C/C++语言实现的，且被编译成了DLL，由java负责去调用。
附：
	Java命令：
		javac
			javac是用来编译.java文件的。
		java
			执行.class字节码文件
		javap
			字节码查看工具及反编译工具.
			主要用于帮助开发者深入了解 Java 编译器的机制
	cmd运行class：
		com.test
		那么当前目录下要有目录 com/test.class