工作原理：
	典型的HTTP事务处理有如下的过程： [7] 
		
		（1）客户与服务器建立连接；
		（2）客户向服务器提出请求；
		（3）服务器接受请求，并根据请求返回相应的文件作为应答；
		（4）客户与服务器关闭连接。
		附：
			HTTP是基于客户/服务器模式，且面向连接的。
			客户与服务器之间的HTTP连接是一种一次性连接，它限制每次连接只处理一个请求，当服务器返回本次请求的应答后便立即关闭连接，下次请求再重新建立连接。
				原因：这种一次性连接主要考虑到WWW服务器面向的是Internet中成干上万个用户，且只能提供有限个连接，故服务器不会让一个连接处于等待状态，及时地释放连接可以大大提高服务器的执行效率。
			？
				HTTP是一种无状态协议，即服务器不保留与客户交易时的任何状态。这就大大减轻了服务器记忆负担，从而保持较快的响应速度。
				HTTP是一种面向对象的协议。允许传送任意类型的数据对象。它通过数据类型和长度来标识所传送的数据内容和大小，并允许对数据进行压缩传送。
		附：
			HTTP持久连接：
				1. 在HTTP 0.9和1.0中，连接在单个请求/响应对之后关闭。
				2. 在HTTP 1.1中，引入了保持活动机制，其中连接可以重用于多个请求。
				这样的持久性连接可以明显减少请求延迟，因为在发送第一个请求之后，客户端不需要重新协商TCP 3-Way-Handshake连接。
				？
					另一个积极的副作用是，通常，由于TCP的缓慢启动机制，连接随着时间的推移而变得更快。

					该协议的1.1版还对HTTP / 1.0进行了带宽优化改进。例如，HTTP / 1.1引入了分块传输编码，以允许流传输而不是缓冲持久连接上的内容。
					HTTP流水线进一步减少了延迟时间，允许客户端在等待每个响应之前发送多个请求。
					协议的另一项附加功能是字节服务，即服务器仅传输客户端明确请求的资源部分。
	1.客户与服务器建立连接；
		服务器一直在一特定端口上监听连接。			
		用户在客户端发起一个http请求，客户端(浏览器)将通过TCP/IP协议与指定的服务器建立一个TCP套接字连接。
			注：只有服务器在指定端口上监听连接，连接才会建立起来。
		？一个端口能建立多少个请求
			https://blog.csdn.net/weixin_40710708/article/details/116795880
			https://blog.csdn.net/u011580175/article/details/80306414?utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7EBlogCommendFromMachineLearnPai2%7Edefault-1.control
	2.客户向服务器发送HTTP请求:
		通过TCP套接字，客户端向Web服务器发送一个包含请求报文的数据块.
			一个请求报文由请求行、请求头部、空行和请求数据4部分组成。
			！
				数据块可能很大，但tcp/ip应该会自动切分并合并。
	3. 服务器接受请求并返回HTTP响应
		Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。
			一个响应由状态行、响应头部、空行和响应数据4部分组成。
		附：
		客户端(浏览器)解析响应
			客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。
			然后解析每一个响应头
				例
				响应头告知以下为若干字节的HTML文档和文档的字符集。
				客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。
	4. 释放连接TCP连接
		若connection 模式为close，则服务器主动关闭TCP连接，客户端被动关闭连接，释放TCP连接;
		若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;

	附：
		一个端口可以建立多个连接，但端口到底是什么？
			一个端口可以建立多个连接：
				https://blog.csdn.net/u011580175/article/details/80306414
附：
	HTTP假定其下层协议提供可靠的传输。
	因此，任何能够提供这种保证的协议都可以被其使用。
		这也是为什么TCP/IP协议族使用TCP作为其传输层。
	即HTTP可以在任何互联网协议上，或其他网络上实现。
		尽管TCP/IP协议是互联网上最流行的应用，HTTP协议中，并没有规定必须使用它或它支持的层。
		但tcp/ip是最流行的，所以主流的浏览器和服务器都是基于tcp/ip实现http协议的。
		
		