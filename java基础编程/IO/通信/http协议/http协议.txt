HTTP协议：
	https://www.cnblogs.com/an-wen/p/11180076.html
	https://baike.baidu.com/item/HTTP/243074?fromtitle=HTTP%E5%8D%8F%E8%AE%AE&fromid=1276942&fr=aladdin
	概念：
		超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个能进行简单的请求-响应功能 应用层协议，它通常运行在TCP之上。
		它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。
	
	http报文格式：
		HTTP报文由从客户机到服务器的请求和从服务器到客户机的响应构成。
		请求报文格式如下：
			请求行 － 通用信息头 － 请求头 － 实体头 － 报文主体
			即：
				一个请求报文由请求行、请求头部、空行和请求数据4部分组成。
			请求行:		
				请求行，请求报文的第一行，指明以什么协议、什么方法、请求资源。
				格式如下：
					请求方法 URL  协议/版本
						请求行内容以空格分隔，并以 CRLF(回车符+换行符) 结尾。
				例：
					GET /index.html HTTP/1.1CRLF
				附：
				
				请求方法：
					HTTP/1.1 协议规定的 HTTP 请求方法有
					OPTIONS、GET、HEAD、POST、PUT、DELETE、TRACE、CONNECT这几种。
					POST：
						1. HTTP协议规定 POST 提交的数据必须放在消息主体（entity-body）中。
						2. 虽然并没有规定数据必须使用什么编码方式，但POST 请求通常 包含了 Content-Type 和消息主体编码方式两部分，要便于服务端解析请求体。
						附：
							
							为什么要Content-Type：
								实际上，开发者完全可以自己决定消息主体的格式，只要最后发送的 HTTP 请求满足上面的格式就可以。
								但是，数据发送出去，还要服务端解析成功才有意义。
								一般服务端语言如 php、python 等，以及它们的 framework，都内置了自动解析常见数据格式的功能。
								服务端通常是根据请求头（headers）中的 Content-Type 字段来获知请求中的消息主体是用何种方式编码，再对主体进行解析。
								所以 POST 提交数据包含了 Content-Type 和消息主体编码方式两部分。	
							Content-Type：
								//Http协议中如果不指定Content-Type，则默认传递的参数就是application/x-www-form-urlencoded类型。	
			请求头部：
				请求头包含许多有关的客户端环境和请求正文的有用信息。
					请求头可以声明浏览器所用的语言，请求正文的长度等。
				格式如下：
					头部字段:值CRLF
					...
					CRLF
				例：
					content-type: application/json;charset=UTF-8CRLF

			请求数据：
				请求头和请求正文之间是一个空行(就是请求头部最后的CRLF)，这个行非常重要，它表示请求头已经结束，接下来的是请求正文。
				
		应答报文格式如下：
			状态行 － 通用信息头 － 响应头 － 实体头 － 报文主体
			状态码：
				状态码元由3位数字组成，表示请求是否被理解或被满足。
				原因分析是对原文的状态码作简短的描述，状态码用来支持自动操作，而原因分析用来供用户使用。客户机无需用来检查或显示语法。
			...	
				有关通用信息头，响应头和实体头方面的具体内容可以参照相关文件。	
		!
			请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。
			HTTP规范定义了9种请求方法，每种请求方法规定了客户和服务器之间不同的信息交换方式，常用的请求方法是GET和POST。
		附：
			用户代理和源服务器中间可能存在多个“中间层”，比如代理服务器、网关或者隧道（tunnel）。
	http发展阶段：
		0.9
			0.9协议是适用于各种数据信息的简洁快速协议，但是远不能满足日益发展的各种应用的需要。
			0.9协议就是一个交换信息的无序协议，仅仅限于文字。由于无法进行内容的协商，在双发的握手和协议中，并有规定双发的内容是什么，也就是图片是无法显示和处理的。 [3] 
		1.0
			到了1.0协议阶段，也就是在1982年，TimBerners-Lee提出了HTTP/1.0。在此后的不断丰富和发展中，HTTP/1.0成为最重要的面向事务的应用层协议。该协议对每一次请求/响应建立并拆除一次连接。其特点是简单、易于管理，所以它符合了大家的需要，得到了广泛的应用。
		1.1
			在1.0协议中，双方规定了连接方式和连接类型，这已经极大扩展了HTTP的领域，但对于互联网最重要的速度和效率，并没有太多的考虑。毕竟，作为协议的制定者，当时也没有想到HTTP会有那么快的普及速度。 [3] 
			关于HTTP1.1协议的具体内容可以参考RFC 2616。 [4] 
		2.0
			HTTP2.0的前世是HTTP1.0和HTTP1.1。虽然之前仅仅只有两个版本，但这两个版本所包含的协议规范之庞大，足以让任何一个有经验的工程师为之头疼。网络协议新版本并不会马上取代旧版本。实际上，1.0和1.1在之后很长的一段时间内一直并存，这是由于网络基础设施更新缓慢所决定的。 [5] 
			关于HTTP2.0协议的具体内容可以参考RFC 7540。	
	http工作原理：
		./http协议工作原理.txt

	附：
		Http协议的长度限制:
			https://www.cnblogs.com/ztiandan/archive/2013/04/16/3023758.html
		http与socket：
			http底层应该还是通过socket实现的。
			不不不，socket是一抽象层，你是否使用它来实现http并没什么关系，只要你能从tcp连接中获取数据就行。
			https://www.cnblogs.com/aspirant/p/11334957.html
			https://bbs.csdn.net/topics/390288261/

		Web协议族：
			万维网WWW（world wide web）世界上规模最大的信息系统，在WWW的背后有一系列的协议和标准支持它，这就是Web协议族。
		html表单：
			./html表单.txt