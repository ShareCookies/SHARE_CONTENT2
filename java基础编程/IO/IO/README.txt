JavaIO:
	介绍:
		1.Java中使用java.io中的api来进行数据读取和输出。
		可用于各种数据源端和接收端之间的通信。
			端：可指文件、控制台、网络链接等，这些均可以作为源端或接收端。
			还可以使用多种不同的通信方式。如顺序、随机存取、缓冲、二进制、按字符.按行、按字等。
		2.JavaIO中使用流这个抽象概念，流用来代表任何能出数据的数据源对象或能接收数据的接收端对象。
		"流"屏蔽了与实际的I/O设备通信处理数据的细节。（由专门的程序员）
		附：
			为什么要用抽象概念流：
				底层IO操作是很复杂的，涉及到大量硬件环节和网络传输等。
					比如磁盘存储，涉及到磁道、扇面等非常底层的信息， 
					比如网络通讯，则涉及到TCP/IP非常复杂的内容。
				为了掩盖这些复杂的底层信息，让程序员能够从事更加高层的业务编程，JAVA语言用了I/O流来掩盖了底层实现细节。
					java已经编制了大量底层类，把底层概念封装完毕。
			流的概念：
				流是对数据传输的过程总称和抽象。
					数据则指的是一组有顺序的，有起点和终点的字节集合。
	流的分类：
		https://zhidao.baidu.com/question/541341140.html?sort=11&rn=5&pn=0#wgt-answers
		介绍：
		　　流可以根据处理数据类型的不同划分为：字符流和字节流。
				注：
					字节流可以传送传送任何数据，而不丢失，速度极快。
					但如果用字节流传送文字信息，则可读性太差，人工阅读困难。此时推荐使用字符流。
						即字节流可以用来操作任何数据，而字符流则常用来操作文本数据。
		　　流可以根据数据流向不同划分为：输入流和输出流。
			这只是对javaIO的api作用进行划分，便于理解和使用api。
		根据数据类型来划分流：
			字节流:
				介绍：
					字节流以字节（8bit）为单位，即流传输的数据类型为二进制。
					类的命名为 xxxInputStream, xxxOutputStream一般即为字符流。
				注：					
					字节流能处理所有类型的数据：
						所有的数据传输最初都是以二进制来传输的，但有些可以转换成字符流来传输。
						例：
							1.如：图片、音乐、视频等媒体介质
							2.键盘输入的数据虽然是二进制形式，但它是ASCII码形式的二进制，具备转成字符流的条件。
							3.摄像头的输入也是二进制的但其不能转换成二进制，因为转换成字符流会乱码。
				附：
					byte[]：
						byte数组专门用来存放二进制数据的。
					Base64 ：
						Base64是一种将二进制数据编码的方式，正如UTF-8和UTF-16是将文本数据编码的方式一样。
					二进制流转字符串：
						二进制 转 Base64， Base64 再转 字符串
						https://www.cnblogs.com/test-7/p/10678488.html
						注：
							除非该二进制流的来源为字符（如文本）否则时无法转换成字符串的。
			字符流:
				介绍：
					字符流以字符（16bit）为单位，即流传输的数据类型为字符
					类的命名为 xxxReader, xxxWriter一般即为字符流。
					注：
						字符流本质就是基于字节流读取时，根据码表映射字符。
						字符流只能处理字符类型的数据。
				附：
					常见api介绍：
						InputStreamReader	
							每次只能转换 二进制流的16个bit为字符。即只能读取一个字符
						BufferedReader		
							用来缓存字符，InputStreamReader转换的字符先放到BufferedReader最后在输给cpu。即一次能读一行数据（回车算一行）
						PrintWriter	
							把字符流转换成二进制流
			注：
				什么时候用字节流什么时候用字符流了：
					https://zhidao.baidu.com/question/541341140.html?sort=11&rn=5&pn=0#wgt-answers
					有中文数据就用字符流，没有则用字节流。
					注：
						中文一个字节放不下，需要用两个字节来存储，得占16位。
							字符流一个字符一个字符的往里读，所以能便捷的读出来。
							用字节流一个字符一个字符的往里读，把一个汉字拆成一半了，处理不当操作系统不认识，显示都问号
				
				　　附：				   
						？字节流在操作的时候本身是不会用到缓冲区的，是文件本身的直接操作的；而字符流在操作的时候是会用到缓冲区的，是通过缓冲区来操作文件。
					
		根据数据流向来划分流：
			介绍：
				流的方向是对当前程序来说。
			输入流：
				是指程序从数据源中读取数据，数据流向了程序。
				任何自Inputstream或Reader派生而来的类都含有名为read()的基本方法,用于读取单个字节或者字节数组。
			输出流：
				是指将数据从程序中写到指定的文件中，数据流出了程序；
				任何自OutputStream或Writer派生而来的类都含有名为write()的基本方法,用于写单个字节或者字节数组。
			例子：
				java程序用输入流从cmd读取数据，用输出流往cmd写数据。			
java.io的API:
	java.io.File
		javaIO系统里的一个文件操作类，用来处理文件或文件集（文件夹）。
		与流体系无直接继承关系，但可以通过FileReader或FileInputStream等转为流体系。
	对象流：
		java.io.ObjectOutputStream
			作用：
				可用于把java对象保存成二进制文件
			对象存盘前提：	
				1.：当然java类及其所有属性 要实现Serializable序列号接口(这个接口不需要具体实现？)
				2.：如果不想保存某属性可在属性前加个transient关键字，则此属性就不会存盘且此属性可不用实现序列化接口。
					例：private transient String name;
		java.io.ObjectInputStream
			作用：
				可用于把二进制文件读取为java对象，当然这个二进制文件要是用ObjectOutputStream形成的。
	高效缓冲流
		https://blog.csdn.net/qq_39304441/article/details/99670966
		1、BufferedInputStream和BufferedOutputStream
		2、高效缓冲流是包装类，本身自己不能作为单独的字节流读写字节，用于加强基础的字节流对象，加强之后读写的效率就会提升
		3、使用：
		BufferedInputStream(InputStream is)
				将一个普通的字节输入流，加强为一个高效字节输入流
				例：
					./IO流的典型组合使用方式/BufferedInputFile.java
		BufferedOutputStream(OutputStream os)
				将一个普通的字节输出流，加强为一个高效字节输出流
		高效原因
			1、BufferedInputStream
				当调用read方法时，不是只读取了一个字节，而是一次读取了8192个字节，存储在流对象自己内部维护的缓冲区数组中，拿出了其中第一个字节返回给调用者；
				如果第二次再调用read方法，不需要再次去磁盘中读取字节信息了，只需要从内存的数组中取出第二个字节返回即可，减少了和磁盘交互次数8191次，提升了效率。
				如果数组中的数据全被读完，8193次读取时，就再次到磁盘中读取下一个8192个字节
			2、BufferedOutputStream
				当调用write方法时，不是直接将一个字节写出到磁盘，将该字节写出到BufferedOutputStream自己对象维护的一个私有字节数组中，数组的大小为8192字节。
				等到数组被写满，自动将数组中的数据一次性刷新到目标文件去，减少了和磁盘交互的次数，提升了效率。
	流的刷新和关闭
		1.flush()刷新：
			针对有缓冲区数组的，输出流，缓冲区中的内容，写出到其他设备中
		2.close()关流：
			将流对象关闭，释放资源。
			附：
				在带缓冲的输出流的close方法中，通常包含一个flush。
				close方法执行之后，流对象就不能继续使用了；

附：
	数据源，接收端包括：
		1.字节数组
		2.string对象
		3.文件
		4."管道"
			从一端输入从另一端输出。
			管道操作:A的结果是B操作的数据来源,B的结果是C操作的数据来源。
		5.一个由其他种类的流组成的序列，一边我们把它们收集合并到一个流中。？
		6.其他数据源，如Internet连接等。
		注：
			每一种数据源都可找到其对应的InputStream子类。
	文件的概念：
		狭义文件：
			磁盘的具体文件。
			注：目录是一种特殊的具体文件，目录其实是一个文本文件，其中包含了这个目录下所有文件的信息。
		广义文件概念：
			任何非CPU的介质和外设，我们都可以称其为文件，和其通讯。
			比如：显示器，打印机，扫描仪等。
	序列化：
		介绍：
			对象流就是将对象的内容进行流化，序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。
				流化后的对象可以进行进行读写操作，也可将流化后的对象传输于网络之间。
		例：
			要实现序列化，需要让一个类实现Serializable接口，该接口是一个标识性接口，标注该类对象是可被序列化的。
			然后使用一个输出流来构造一个对象输出流并通过writeObject(Object)方法就可以将实现对象写出（即保存其状态）；
			如果需要反序列化则可以用一个输入流建立对象输入流，然后通过readObject方法从流中读取对象。
		附：
			序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆（可以参考第29题）。