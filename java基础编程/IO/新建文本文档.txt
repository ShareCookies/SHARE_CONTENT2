I/O:
	I/O即输入输出。
	根据操作类型(终端类型),io大概可以分成以下几类：
		磁盘操作：
			File
		网络操作：
			Socket
			...
		...
	各种IO操作的已经由程序语言实现了，用户仅需使用api等即可。
附：
	为什么javaI/O使用流、装饰者模式来实现io：
		1. 流
			因为存在各种I/O源端和想要与之通信的接收端(文件、控制台、网络链接等)。
			使用流这个抽象概念，就可以让用户仅需通过流类，就是对各种io设备操作，其具体io实现则由底层(厂家、java语言、系统)实现.
		2.装饰者模式
			确定了I/O源端和接收端后，还可能以多种不同的方式与它们进行通信(顺序、随机存取、缓冲、二进制、按字符、按行、按字等)。
			Java类库的设计者通过创建大量的(装饰器)类来解决这个难题。
	javaI/O与javaNIO区别：
		javaI/O虽然能实现自由组合实现很多功能，但其(对新人)不好理解，因此java后续进新增了组ioApi，其更好使用且更易理解。

