http://ifeve.com/java-nio-all/
https://www.jianshu.com/p/362b365e1bcc
https://www.jianshu.com/p/052035037297
NIO:
	前言（诞生起因）：
		java 传统的I/O系统具有以下特点.
		1.一连接对一个线程:
			如网络io，一个请求对应一个线程。
			一旦有高并发的大量请求,线程不够用, 就算使用了线程池复用线程也无济于事; 
		2.IO流具有阻塞特性：
			进行io操作的时候，如果发生了阻塞情况，那么当前io线程会被挂起等待。
				阻塞情况：
					1.网络I/O堵塞或有网络抖动或网络故障等。
					2.一个线程调用read或 write方法时，该线程将被阻塞，直到有一些数据被读取，或数据完全写入，该线程在此期间不能再干任何事情了。
	
	NIO介绍：
		java.nio全称java non-blocking IO，JDK 1.4及以上版本里提供的新api（New IO） 。
		
		？为所有的原始类型（boolean类型除外）提供缓存支持的数据容器，使用它可以提供非阻塞式的高伸缩性网络。

		？HTTP2.0使用了多路复用的技术，做到同一个连接并发处理多个请求，而且并发请求的数量比HTTP1.1大了好几个数量级。
		附：
			IO和NIO的区别
				原有的 IO 是面向流的、阻塞的，NIO 则是面向块的、非阻塞的。

			如何理解NIO是面向块的、非阻塞的：
				面向块的：
					NIO是天生就面向缓冲区的。
					数据将被读取到一个它稍后处理的缓冲区。
					甚至可在缓冲区中前后移动，增加了处理过程中的灵活性。
				非阻塞的：
					Java NIO的非阻塞模式。
					非阻塞读：
						一个线程请求从某通道读取数据时，它仅能得到目前可用的数据，如果目前没有数据可用时，就什么都不会获取到，不会保持线程阻塞，所以直至数据变的可以读取之前，该线程可以继续做其他的事情。
					非阻塞写：
						一个线程请求写入一些数据到某通道，可不需要等待它完全写入，线程可以去做别的事情。
					非阻塞读，会一直等到当前能读的数据读完吗？
					非阻塞写意思是，开启了写后，我可以去干别的事吗？
					IO读不到数据会阻塞？
					附：
						即NIO是可以做到用一个线程来处理多个操作的。
						假设有10000个请求过来,根据实际情况，可以分配50或者100个线程来处理。
						不像之前的阻塞IO那样，非得分配10000个。
NIO核心API：
	在NIO中，数据从通道被读取到缓冲区中或者从缓冲区写入到通道中。
	NIO核心API：Channel, Buffer, Selector。
	
	Channel通道：
		通道表示到实体（如硬件设备、文件、网络套接字或程序组件）的开放连接，该实体能够执行一个或多个不同的I/O操作，例如读取或写入。
		
		NIO把它支持的I/O对象抽象为Channel，类似于原I/O中的流（Stream），但有所区别：
			1、流是单向的，通道是双向的，可读可写。
			2、流读写是阻塞的，通道可以异步读写。
				...！
			3、流中的数据可以选择性的先读到缓存中，通道的数据总是要先读到一个缓存中，或从缓存中写入。
		Channel常用方法：
			write：
				从缓存中写入数据到通道。
			read：
				从通道中读取数据到缓存中。
		附：
			Channel的实现类有：
				FileChannel
					一个用来写、读、映射和操作文件的通道。
				DatagramChannel
				SocketChannel
				ServerSocketChannel
	Buffer缓存区：
		介绍：
			一块缓存区，内部使用**数组存储数据，并维护几个特殊变量，实现数据的反复利用。
				具体什么数组由具体实现类决定，如ByteBuffer 则用 byte[]
			Buffer标志:
				Capacity：缓存区大小
					缓存数组大小
				Position：当前读/写的位置 ​
					初始值为0
					position表示当前可以写入或读取数据的位置，当写入或读取一个数据后，position向前移动到下一个位置；
				limit：信息末尾的位置
					在写模式下，缓冲区的limit表示你最多能往Buffer里写多少数据； 
					读模式下，意味着你还能从缓冲区获取多少数据。
				mark：初始值为-1，用于备份当前的position;
		Buffer常用方法：
			mark()：把当前的position赋值给mark
			reset()：把mark值还原给position
			clear()：
				clear会恢复标志至状态值。
				注：
					此方法实际上不会擦除缓冲区中的数据。
				附：
					buffer.compat()只会清空已读取的数据，而还未读取的数据继续保存在Buffer中；
			flip()：			
				通过flip()方法将Buffer从写模式切换到读模式。
				将position值重置为0，limit的值设置为之前position的值；
				此时就可以读取之前写入到buffer的所有数据
			rewind()：
				重置position为0，从头读写数据。
		使用Buffer读取和写入数据通常遵循以下方式：
			1. 写数据到缓冲区；
				数据写入缓存区后，通常要调用buffer.flip()方法。
				附：
				1.当向buffer写入数据时，buffer会记录下写了多少数据
				2.写缓冲区方式：
				    1. 从Channel写到Buffer
						channel.write(Buffer)；
	    			2. 通过Buffer的put方法写到Buffer中；
			
			2. 从缓冲区中读取数据；
				从缓存区读完数据后，通常要调用buffer.clear()等方法，清空缓冲区，让其便于再次被写入。
				附：
				读缓冲区数据方式：
				    1. 从Buffer中读取数据到Channel；
						channel.read(buffer);
				    2. 通过Buffer的get方法从Buffer中读取数据；
				？读一半，在写，在想读了
		附：
			Buffer的实现类：
				ByteBuffer,CharBuffer,DoubleBuffer,FloatBuffer,IntBuffer,LongBuffer,ShortBuffer,MappedByteBuffer
	Selector选择器:
		多个Channel以事件的方式可以注册到同一个Selector，从而达到用一个线程处理多个请求成为可能。
		Selector可以检测多个NIO channel，看看读或者写事件是否就绪(是否为读写事件做好准备)。
案例：
	Socket服务端和客户端案例：
		有问题
		https://blog.csdn.net/u010889616/article/details/80686236
		./例/ServerAndClientOfSocket/
		