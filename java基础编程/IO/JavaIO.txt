管道操作:
	A的结果是B操作的数据来源,B的结果是C操作的数据来源。
文件的概念：
	狭义文件：
		磁盘的具体文件。
		注：目录是一种特殊的具体文件，目录其实是一个文本文件，其中包含了这个目录下所有文件的信息。
	广义文件概念：
		任何非CPU的介质和外设，我们都可以称其为文件，和其通讯。
		比如：显示器，打印机，扫描仪等。

java.io:
	io流的产生：
		底层IO操作是很复杂的，涉及到大量硬件环节，比如磁盘存储，涉及到磁道、扇面等非常底层的信息， 比如网络通讯，则涉及到TCP/IP非常复杂的内容。
		为了掩盖这些复杂的底层信息，让程序员能够从事更加高层的业务编程，JAVA语言用了流I/O模式来掩盖了底层实现细节，同时编制了大量底层类，把底层概念已经封装完毕。
	io流的用途：
		输入流：是指程序从数据源中读取数据。
		输出流：是指将数据从程序中写到指定的文件中；	
		附：除标准输入输出流其余流，其余流都应关闭，因为流的开销很大。(先flush在close，flush是防止你在close时还有东西还在缓存中未保存起来就被你关闭了)
	
	流的类型：
		二进制流 (binary stream):
			二进制流命名：
				一般叫 xxxInputStream, xxxOutputStream
			优点：
				可以传送传送任何数据，而不丢失，速度极快！
			缺点：
				如果传送文字信息，则可读性太差，人工阅读困难。
			任何java流在初始阶段都是二进制流：
				所有的数据传输最初都是以二进制来传输的，但有些可以转换成字符流来传输。
				例：
					键盘输入的数据虽然是二进制形式，但它是ASCII码形式的二进制，具备转成字符流的条件。
					摄像头的输入也是二进制的但其不能转换成二进制，因为转换成字符流会乱码。
				数据最后输出的时候也得以二进制形式。即如果你前期把二进制流转换成字符流，则最后要把字符流转换成二进制输出。!!!
		字符流（character stream）:
			字符流的命名：
				一般叫xxxReader, xxxWriter 
			优点：
				1.：便于人工阅读。！
				2.：有些流里头传送的是字符数据，建议把这样的流在进入CPU前做一个格式转化，把其转成字符流，以提高CPU处理的效率。(即是字符都应转成字符流来传输)
			常见api介绍：
				InputStreamReader	每次只能转换 二进制流的16个bit为字符。即只能读取一个字符
				BufferedReader	用来缓存字符，InputStreamReader转换的字符先放到BufferedReader最后在输给cpu。即一次能读一行数据（回车算一行）
				PrintWriter	把字符流转换成二进制流
java.io的API:
	java.io.File
		关于文件的一些api
		目录tree！！！
	java.io.ObjectOutputStream
		作用：
			可用于把java对象保存成二进制文件
		对象存盘前提：	
			1.：当然java类及其所有属性 要实现Serializable序列号接口(这个接口不需要具体实现？)
			2.：如果不想保存某属性可在属性前加个transient关键字，则此属性就不会存盘且此属性可不用实现序列化接口。
				例：private transient String name;
	java.io.ObjectInputStream
		作用：
			可用于把二进制文件读取为java对象，当然这个二进制文件要是用ObjectOutputStream形成的。