面试官：这次咱们就来聊聊Java 的NIO呗？你对NIO有多少了解？

候选者：嗯，我对Java NIO还是有一定的了解的，NIO是JDK 1.4 开始有的，其目的是为了提高速度。NIO翻译成 no-blocking io 或者 new io 都无所谓啦，反正都说得通

面试官：你先来讲讲NIO和传统IO有什么区别吧

候选者：传统IO是一次一个字节地处理数据，NIO是以块（缓冲区）的形式处理数据。最主要的是，NIO可以实现非阻塞，而传统IO只能是阻塞的。

候选者：IO的实际场景是文件IO和网络IO，NIO在网络IO场景下提升就尤其明显了。

候选者：在Java NIO有三个核心部分组成。分别是Buffer（缓冲区）、Channel（管道）以及Selector（选择器）

候选者：可以简单的理解为：Buffer是存储数据的地方，Channel是运输数据的载体，而Selector用于检查多个Channel的状态变更情况，

候选者：我曾经写过一个NIO Demo，面试官可以看看。

面试官：这都是些API相关的知识，能看得出来你有一定的基础



面试官：你知道IO模型有几种吗

候选者：在Unix下IO模型分别有：阻塞IO、非阻塞IO、IO复用、信号驱动以及异步I/O。在开发中碰得最多的就是阻塞IO、非阻塞IO以及IO复用。

面试官：嗯，来重点讲讲IO复用模型吧

候选者：我就以Linux系统为例好了，我们都知道Linux对文件的操作实际上就是通过文件描述符(fd)

候选者：IO复用模型指的就是：通过一个进程监听多个文件描述符，一旦某个文件描述符准备就绪，就去通知程序做相对应的处理

候选者：这种以通知的方式，优势并不是对于单个连接能处理得更快，而是在于它能处理更多的连接。

候选者：在Linux下IO复用模型用的函数有select/poll和epoll
面试官：那你来讲讲这select和epoll函数的区别呗？

候选者：嗯，先说select吧。

候选者：select函数它支持最大的连接数是1024或2048，因为在select函数下要传入fd_set参数，这个fd_set的大小要么1024或2048（其实就看操作系统的位数）

候选者：fd_set就是bitmap的数据结构，可以简单理解为只要位为0，那说明还没数据到缓冲区，只要位为1，那说明数据已经到缓冲区。

候选者：而select函数做的就是每次将fd_set遍历，判断标志位有没有发现变化，如果有变化则通知程序做中断处理。

候选者：epoll 是在Linux2.6内核正式提出，完善了select 的一些缺点。

候选者：它定义了epoll_event结构体来处理，不存在最大连接数的限制。

候选者：并且它不像select函数每次把所有的文件描述符(fd)都遍历，简单理解就是epoll把就绪的文件描述符(fd)专门维护了一块空间，每次从就绪列表里边拿就好了，不再进行对所有文件描述符(fd)进行遍历。
面试官：嗯。你知道什么叫做零拷贝吗？

