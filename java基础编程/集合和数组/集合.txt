参考：http://m.blog.csdn.net/u014136713/article/details/52089156
集合:
	java集合的主要分为三种类型：
		Set（集）
		List（列表）
		Map（映射）

	集合的继承关系:
		Collection（接口） 
		├List(子接口)
		│├LinkedList（具体实现类，基于链表的二次开发）
		│├ArrayList（具体实现类，基于数组的二次开发）
		│├ ...
		│└Vector （Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用）
		│　└Stack
		└Set(子接口)
			|-HashSet(具体实现类，基于哈希算法的开发)
			|
			|-TreeSet(具体实现类，基于红黑树的开发)
			| ...
			
		Map(接口)
		├HashMap
		├HashTable （线程安全,速度较慢。）
		└TreeMap
		Iterable接口：
		
		注：
			1.Collection和Map都继承了Iterable接口，都拥有一个iterator()的方法，该方法返回一个Iterator对象，可以用来遍历集合中的元素 。
			./遍历小总结.txt
			2.Collection和Collections：
				Collection：
					java.util.Collection 是集合框架的一个父接口。它提供了对集合对象进行基本操作的通用接口方法。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式。
				Collections：
					java.util.Collections 是一个集合类。它包含有各种有关集合操作的静态方法，提供一系列对各种集合的搜索、排序、线程安全化等操作实现。
					注：此类不能实例化（构造方法为private），就像一个工具类。
	
	附：
		集合归类（容器归类）：
			普通容器: List/Set/Map
			同步容器: Vector/HashTable
			并发容器：CopyOnWriteArrayList、ConcurrentHashMap、ArrayBlockQueue
		集合和数组的关系：
			几乎所有的集合都是基于数组来实现的.
				因为集合是对数组做的封装,所以,数组永远比任何一个集合要快
			集合提供了比数组更多的功能：
				例：
					一个数组实例具有固定的大小，不能伸缩。集合则可根据需要动态改变大小。
					


集合具体实现类介绍：
	Set：
		介绍：
			Set接口是Collection接口的一个子接口，它表示数学意义上的集合概念。
			特性：
			1.Set中不包含重复的元素
				即Set中不存两个这样的元素e1和e2，使得e1.equals(e2)为true。
				具体的Set 实现类，依赖添加对象的 equals()方法来检查等同性。
			注：
				Set接口与Collection的接口相同，没有引入新方法。
				
		Set 接口常见的两种实现：
			HashSet 和TreeSet。
		HashSet：	
			对象无序不可重复。基于哈希表的开发，底层是通过HashMap实现的。
				附：
					什么是Hash表：
						https://blog.csdn.net/u011109881/article/details/80379505
						hash函数就是根据key计算出应该存储地址的位置，而哈希表是基于哈希函数建立的一种查找表
			能放入集合的对象：	
				一个类的实例如果想放在hashset中存储的话，建议同时重写equals和hashcode方法，并保持一定的契约关系。
			注:
				HashSet如何判断是否为同一个对象：
					判断过程：
						1.对象存入HashSet前，首先调用hashcode方法判断，（hashcode码约等于内存地址）
						2.如果判断相同则接着调用equals判断是否雷同，还是判断雷同的话才不接收。
					注：
						equals方法比hashcode方法精度高，但hashcode效率高
							hashcode 方法判断不同 equals一定不同
							hashcode 方法判断同   equals可以不同
							注：
								为什么hashcode码可能会相同了，
								因为可能出现4+4等3+5的情况。
						注：
							一个类的实例如果想放在hashset中存储的话，建议同时重写equals和hashcode方法，并保持一定的契约关系。
							
							例：
								目标1.先保证地址不同2.接着保证苹果颜色和重量不同。
								//类实例属性就color，weight
								@Override
								public boolean equals(Object obj) {
									System.out.println("equals method is invoked now!");
									if(obj==null) return false;
									if(obj==this) return true;
									if(!(obj instanceof Apple)) return false;
									Apple otherApple = (Apple)obj; 		
									return this.color.equals(otherApple.color)
											   && Math.abs(this.weight-otherApple.weight)==0;
								}
								@Override
								public int hashCode() { //地址不同
									System.out.println("hashcode method is invoked now!");
									return this.color.hashCode()+this.weight.hashCode();
									/*
									  为什么地址可能会相同了，
									  因为可能出现4+4等3+5的情况。
									*/
								}
		TreeSet:
			对象不能重复但有自然顺序（例从小到大顺序），底层是通过TreeMap实现的。
			能放入集合的对象：		
				一个类的实例如果想放在TreeSet中存储的话，建议实现Comparable接口。
			注：
				对象存入TreeSet要实现Comparable接口：
					TreeSet判断元素是否重复 、以及确定元素的顺序 靠的都是这个方法；
					@override
					public int compareTO(Object o){//当前一个类与另一个类的比较。
						//当前对象的某个判断比另一个对象的小返回-1，大返回1，等于即返回0会被treeset拒绝接收。
							//从大到小排可以乘-1或另一个类与当前类比较。可进行多重比较排序如：颜色不同按颜色排，同按重量排 
					}
		注：？
			为优化 HashSet 空间的使用，您可以调优初始容量和负载因子。
			TreeSet 不包含调优选项，因为树总是平衡的，保证了插入、删除、查询的性能为log(n)。
	List:
		介绍：
			List 接口继承了 Collection 接口，表示一个允许重复项的有序集合概念，称为列表或序列。
				附：List 接口在 iterator、add、remove、equals 和 hashCode 方法的协定上加了一些其他约定，超过了 Collection 接口中指定的约定。非强制限制，只是一种约定!
			特性：
			1.元素允许重复项
			2.有序集合
				按插入的先后顺序排序
		List 接口常见的两种实现：
			ArrayList 和 LinkedList。
		ArrayList
			介绍：					
				数组在使用上较为麻烦，ArrayList在数组的基础上进行了二次开发，从使用角度克服了数组的诸多缺点，但本质上还是依靠数组机制来完成。
				ArrayList内部依赖的是一个对象数组Object[], 其有众多方法，均围绕该对象数组展开。
			
			附：
				适用场景：
					数据录入后，较为稳定，删除和插入操作较少，大多为定位查询操作
					数据增加的频率间隔较长，不会持续性连续增加
					适合队列等对元素的先后顺序极为敏感的数据结构。
				与数组对比：
					优点：
						与数组对比，随机定位速度很快.
						但在编码便捷性上大大优于数组，少写不少控制代码。
						注：
							在多用于查询时ArrayList是首选。
					缺点：
						与数组对比，插入和删除容易造成大幅波动，在元素数量超出范围的时候，也有大量的数组元素拷贝的操作发生，对系统性能有较大影响。
				
				ArrayList的泛型控制（generic type）:
					由于ArrayList很灵活，内部可以放置各种数据类型，导致外部程序，从ArrayList中取出一个元素，还必须谨慎对其判断， 有的时候外部需要大量的各种类型的代码来针对不同的对象进行对应操作，成本高昂。 有的程序员忘记书写了一些代码，经常会导致ClassCastException, 所以后来，人们不得不限制了ArrayList中的元素的类型，要求其内部只能有一种元素。
					实例： List<String> list= new ArrayList<String>();
							（当然你要是没用泛型也可用instanceof 实例关键字来判断list中放的是什么类型;
								if（obj instanceof Interger） Interger i=(Interger)obj;
							）
		LinkedList ：
			介绍：
				以链表为基础实现，底层使用了双向循环链表
				附：
					链表：
						链表介绍：链表是一种数据结构
						一个链表节点组成：上一个节点地址+下个节点地址+当前节点值
			附：
				适用场景：
					数据录入后，较为不稳定，有着频繁删除和插入操作，随机定位查询相对较少。
					适合队列等对元素的先后顺序极为敏感的数据结构。

				LinkedList优点：
					插入和删除性能优越，不会造成内存波动。 因为只要改一下前后节点就可插入和删除。
					对内存成片性要求不高，array和arrayList对内存成片性高。
				缺点：
					与链表类似，随机定位速度慢，需要从头开始依次检索.
					链表的内存消耗大。因为要记住前后地址
		附：
			List提供的常见操作：
				List 接口提供了 4 种对列表元素进行定位（索引）访问方法。
					注:
						1.
						这些操作可能在和某些实现（例如 LinkedList 类）的索引值成比例的时间内执行。
						因此，如果调用方不知道实现，那么在列表元素上迭代通常优于用索引遍历列表。
						2.
						List 接口提供了特殊的迭代器，称为 ListIterator。
						除了允许 Iterator 接口提供的正常操作外，该迭代器还允许元素插入和替换，以及双向访问。
						还提供了一个方法来获取从列表中指定位置开始的列表迭代器。

				List 接口提供了两种搜索指定对象的方法。
					从性能的观点来看，应该小心使用这些方法。在很多实现中，它们将执行高开销的线性搜索。

				List 接口提供了两种在列表的任意位置高效插入和移除多个元素的方法。

				注：
					某些列表实现对列表可能包含的元素有限制：
						试图添加不合格的元素可能会抛出未经检查的异常。
						试图查询不合格的元素可能会抛出异常，也可能返回 false；
				list常用算法：
					List list = new LinkedList();
					Collections.reverse(list);//逆序
					Collections.sort(list);//排序
					Collections.binarySearch(list,"111");//折半查找
	注：
		集合的排序：
			1.针对有顺序的的集合，如 List实现类， TreeSet 或 TreeMap
			2.重写要放入集合的元素的...方法
			3.然后通过 Collections.sort() 来排序。
			例：
				./案例/(排序)listSortModel.java
		对应数据结构特点：
			Linked 改快读慢
			Array 读快改慢
			Hash 两者之间

映射具体实现类介绍：
	Map：
		介绍：
			1.Map是一种把对象映射到其他对象映射的容器。
				即：它的每一个元素都包含一对键对象和值对象。 
			注：
				1.从Map集合中检索元素时，只要给出键对象，就会返回对应的值对象。
					因为这个过程无需遍历，所以仅仅是获取指定元素的话效率高。
					部分set的底层实现基于map，所以在map中找一个元素的效率远高于list中找。
			特性：
				1.键值不能相同。
					即：相同的key指向不同的对象会覆盖，不同的key可以指向相同的对象。
					
		Map 接口常见的实现：
			HashMap , TreeMap
			注：
				1.在Map 中插入、删除和定位元素，HashMap 是最好的选择。
				但如果您要按顺序遍历键，那么TreeMap 会更好。
				如果集合大，先把元素添加到 HashMap，再把这种映射转换成一个用于有序键遍历的 TreeMap 可能更快。
				2.为了优化 HashMap 空间的使用，您可以调优初始容量和负载因子。这个TreeMap 没有调优选项，因为该树总处于平衡状态。


		HashMap实现类：
			介绍：
				基于哈希表实现。
				注：
					1.HashMap允许使用 null 值和 null 键
					2.取代了HashTable，因为Hashtable 类和 Properties 类是Map 接口的历史实现。
			注：
				1.HashMap如何判断键值是否相同：
					https://blog.csdn.net/h704106603/article/details/70226154/
					1.如果key值的hash值相等，并且其key值相等，那么进行覆盖原元素操作。
					所以一个java类如果想作为HashMap的key，建议重写hashcode和equals方法。
						
			HashMap的实现原理：
				https://blog.csdn.net/chenssy/article/details/18323767
		TreeMap实现类：
			https://zhuanlan.zhihu.com/p/105377431
			介绍：
				基于红黑树实现。一种自平衡二叉查找树
				注：TreeMap不允许使用null 键
			注：
				1.TreeMap如何判断键值是否相同：
					TreeMap用compareTo方法来判断是否是同一个key。
						所以一个java类如果想作为TreeMap的key，建议实现Comparable接口 。
					注：TreeMap 实现，添加到映射的元素一定是可排序的。
			
		附：
			map常见操作：
				修改值对象：
					map修改值,重新.put就可以。
				判断是否包含某个键或值：
					containsKey()
					containsValue()
				获取所有key值：
					.keySet()
				Map.Entry 接口
				获取map的键值对条目：
					.entrySet() 方法返回一个实现Map.Entry 接口的对象集合。集合中每个对象都是底层 Map 中一个特定的键-值对。
					通过这个集合迭代，您可以获得每一条目的键或值并对值进行更改。
					注：如果底层 Map 在Map.Entry 接口的setValue() 方法外部被修改，此条目集就会变得无效，并导致迭代器行为未定义。！

				扩展到多维：
					Map<Test,List<Test>>

		附：其余Map实现类
			LinkedHashMap：
				介绍：
					类似hashMap，仅比hashMap慢一点，但迭代访问时更快。	
						注：为了提高速度，LinkedHashMap散列化所有的元素，但又使用了链表保存了顺序。
					迭代遍历它时，取得键值对的顺序是其插入顺序，因为其用链表维护了内部顺序。
				注：
					1.可以在构造器中设定LinkedHashMap,使之采用基于访问的最近最少使用(LRU)算祛，
					于是没有被访问过的(可被看作需要删除的)元素就会出现在队列的前面。
					对于需要定期清理元素以节省空间的程序来说，此功能使得程序很容易得以实现。
				例：
					./案例/LinkedHashMapDemo.java

			WeakHashMap：
			ConcurrentHashMap：
				ConcurrentHashMap的工作原理：
					ConcurrentHashMap在jdk 1.6和jdk 1.8实现原理是不同的。
					jdk 1.6:
						ConcurrentHashMap是线程安全的，但是与Hashtablea相比，实现线程安全的方式不同。Hashtable是通过对hash表结构进行锁定，是阻塞式的，当一个线程占有这个锁时，其他线程必须阻塞等待其释放锁。ConcurrentHashMap是采用分离锁的方式，它并没有对整个hash表进行锁定，而是局部锁定，也就是说当一个线程占有这个局部锁时，不影响其他线程对hash表其他地方的访问。 
						具体实现:ConcurrentHashMap内部有一个Segment.
					jdk 1.8:
						在jdk 8中，ConcurrentHashMap不再使用Segment分离锁，而是采用一种乐观锁CAS算法来实现同步问题，但其底层还是“数组+链表->红黑树”的实现。
			IdentityHashMap：
待看下：
	https://blog.csdn.net/zhangqunshuai/article/details/80660974
	https://blog.csdn.net/qq_22118507/article/details/51576319
	https://blog.csdn.net/bestxiaok/article/details/78413022
