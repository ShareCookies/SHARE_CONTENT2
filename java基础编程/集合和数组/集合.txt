参考：http://m.blog.csdn.net/u014136713/article/details/52089156
集合:
	java集合的主要分为三种类型：
		Set（集）
		List（列表）
		Map（映射）

	集合的继承关系:
		Collection（接口） 
		├List(子接口)
		│├LinkedList（具体实现类，基于链表的二次开发）
		│├ArrayList（具体实现类，基于数组的二次开发）
		│├ ...
		│└Vector （Vector是一种老的动态数组，是线程同步的，效率很低，一般不赞成使用）
		│　└Stack
		└Set(子接口)
			|-HashSet(具体实现类，基于HashMap开发)
			|
			|-TreeSet(具体实现类，基于TreeMap开发)
			| ...
			
		Map(接口)
		├HashMap (具体实现类，基于哈希算法的开发)
		├TreeMap (具体实现类，基于红黑树的开发)	
		├Hashtable （线程安全,速度慢，不推荐）
		└ConcurrentHashMap （线程安全）
	附：
		1.Collection和Map都继承了Iterable接口，都拥有一个iterator()的方法，该方法返回一个Iterator对象，可以用来遍历集合中的元素 。
			例：./遍历小总结.txt
		Collection：
			java.util.Collection 是集合框架的一个父接口。
			它提供了对集合对象进行基本操作的通用接口方法。Collection接口的意义是为各种具体的集合提供了最大化的统一操作方式。
		Collections：
			java.util.Collections 是一个集合工具类。
			提供了一系列的静态方法来辅助容器操作，这些方法包括对容器的搜索、排序、线程安全化等等。
			附：
				此类不能实例化（构造方法为private），仅仅是一个工具类。
			例:
			排序：
				Collections工具类的sort方法有两种使用的形式。
				第一种要求传入的待排序容器中存放的对象比较实现Comparable接口以实现元素的比较；
				第二种不强制性的要求容器中的元素必须可比较，但是要求传入第二个参数，参数是Comparator接口的子类型（需要重写compare方法实现元素的比较），相当于一个临时定义的排序规则，其实就是通过接口注入比较元素大小的算法，也是对回调模式的应用（Java中对函数式编程的支持）!.
				
				例：
					1.只能针对有顺序的的集合使用，如 List实现类， TreeSet 或 TreeMap
					2.重写要放入集合的元素的compare方法
					3.然后通过 Collections.sort() 来排序。
					./案例/(排序)listSortModel.java		
		集合归类（容器归类）：
			普通容器: List/Set/Map
			同步容器: Vector/Hashtable
			并发容器：CopyOnWriteArrayList、ConcurrentHashMap、ArrayBlockQueue
	附：
		对应数据结构特点：
			Linked 改快读慢
			Array 读快改慢
			Hash 两者之间
Map接口：
	介绍：
		1.Map是一种把一对象与其他对象进行关联映射的容器。
			即map容器的每一个元素都包含一对，键对象和值对象。 
		Map 接口常见的实现：HashMap , TreeMap
			注：
			1.HashMap与TreeMap区别：
				在Map 中插入、删除和定位元素，HashMap 是最好的选择。但如果您要按顺序遍历键，那么TreeMap 会更好。
					因为HashMap根据关键字定位能耗时能达到常数O(1),而TreeMap要O(lgn).
					但散列方法的存储对关键字是随机的，不便于顺序查找关键字，也不适合于范围查找，或最大值最小值查找。
			2.Map优化：
				为了优化 HashMap 空间的使用，您可以调优初始容量和负载因子。
				TreeMap 没有调优选项，因为该树总处于平衡状态。
	附：
		map常见操作：
			新增、修改：
				新增put
				修改put
					map修改值,重新.put就可以。
					因为相同key的键值对会覆盖。
			判断是否包含某个键或值：
				containsKey()
				containsValue()
			获取所有key值：
				.keySet()
			Map.Entry 接口
				获取map的键值对条目：
					.entrySet() 方法返回一个实现Map.Entry 接口的对象集合。集合中每个对象都是底层 Map 中一个特定的键-值对。
					通过这个集合迭代，您可以获得每一条目的键或值并对值进行更改。
					注：如果底层 Map 在Map.Entry 接口的setValue() 方法外部被修改，此条目集就会变得无效，并导致迭代器行为未定义。！
				
	
	HashMap实现类：
		介绍：
			基于哈希表实现。
		特性：
			构造方法：
				构造函数HashMap(int initialCapacity, float loadFactor)：构造一个带指定初始容量和加载因子的空 HashMap。
					initialCapacity初始容量：
						数组初始容量(散列表初始容量)。
					loadFactor加载因子：
						用来扩容用。
						随着HashMap中元素的数量越来越多，发生碰撞的概率就越来越大，所产生的链表长度就会越来越长，这样势必会影响HashMap的速度，为了保证HashMap的效率，系统必须要在某个临界点进行扩容处理。该临界点在当HashMap中元素的数量等于table数组长度*加载因子。
						但是扩容是一个非常耗时的过程，因为它需要重新计算这些数据在新table数组中的位置并进行复制处理。所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。
				?
					预知10000个元素，那么初始容量10000吗
			新增put：
				1. 插入重复的key
					插入重复的key，会覆盖掉对应的key，value，并返回被覆盖的value。
					* @return the previous value associated with <tt>key</tt>, or  <tt>null</tt> if there was no mapping for <tt>key</tt>.
				2. HashMap允许使用 null 值和 null 键
			

		HashMap的实现原理：
			https://blog.csdn.net/chenssy/article/details/18323767、
			./java1.8集合源码/hashMap.txt
			附：
				什么是Hash表：
					哈希表是基于哈希函数建立的一种映射表(当作数组)。
					hash函数根据key(hashCode)计算出应该存储在哈希表上那个位置.
						hashMap中hash函数就是取余
				新增：（简版）
					public V put(K key, V value) {
						return putVal(hash(key), key, value, false, true);
					}
					
					1. 插入键值对时，获取key的hash。
						hash来源：
							static final int hash(Object key) {
								int h;
								return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16);
							}
							Object自带hashCode方法：
								https://louluan.blog.csdn.net/article/details/41547649?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromBaidu-1.control
								
								* @return  a hash code value for this object.
								public native int hashCode();
								jvm为对象生成的关键码值(hashCode散列值),关键码值是根据一定的规则将与对象相关的信息（比如对象的存储地址，对象的字段等）映射成一个数值，这个数值称作为散列值。
					putVal():https://blog.csdn.net/hsee2006/article/details/104784557/
					2. 找key在哈希表数组上的位置
						tab[i = (n - 1) & hash] //找插入数据的hash在数组中位置(就是找当前要插入的数据应该在哈希表中的位置)
							(n - 1) & hash 等于hash % n 
							https://blog.csdn.net/argleary/article/details/100940228
							https://blog.csdn.net/q2365921/article/details/96031412?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.control
						当key对应位置无值时，插入元素。
						当key对应位置有值时：
							if 如果key与旧key是一样的则覆盖插入。
								如何判断是一样的：
									两key的hash相等 且(equal对比相等或两key内存地址一样)
								if (p.hash == hash && ((k = p.key) == key || (key != null && key.equals(k))))
							else if // 如果是红黑树节点，则直接在树中插入 or 更新键值对
								else if (p instanceof TreeNode)
									// 如果当前的bucket里面已经是红黑树的话，执行红黑树的添加操作
									e = ((TreeNode<K, V>) p).putTreeVal(this, tab, hash, key, value);						
								
							else // 把节点往链表中插入 or 更新键值对，(当链表长度过长时，链表可能会转为红黑树)
							
								for (int binCount = 0;; ++binCount)
								{
									if ((e = p.next) == null)
									{
										p.next = newNode(hash, key, value, null);
										// TREEIFY_THRESHOLD = 8，判断如果当前bucket的位置链表长度大于8的话就将此链表变成红黑树。
										if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st
											treeifyBin(tab, hash);
										break;
									}
									if (e.hash == hash && ((k = e.key) == key || (key != null && key.equals(k))))
										break;
									p = e;
								}						
			
				HashMap是怎么解决哈希冲突的
					为什么会有hash冲突：
						hash值一样但不是同一个对象，此时就会hash冲突，此时就要通过链表等来存放冲突对象了。
					1. 通过链表。
						JDK1.7的是数组+链表
					2. 通过红黑树。
						JDK1.8的是数组+链表 或者 数组+红黑树
						两种方案分表什么时候使用了：
							数组+链表：
								链表长度大于8
							数组+红黑树：
								链表长度大于8且table的长度大于64
								附：
									如果小于64，就通过扩容的方式来解决，
									
									附：！
									链表长度大于8有两种情况：
										1、table长度足够，hash冲突过多
										2、hash没有冲突，但是在计算table下标的时候，由于table长度太小，导致很多hash不一致的
										第二种情况是可以用扩容的方式来避免的，扩容后链表长度变短，读写效率自然提高。另外，扩容相对于转换为红黑树的好处在于可以保证数据结构更简单。f
					附：
						HashMap红黑树树化过程
							https://www.cnblogs.com/finite/p/8251587.html
				HashMap扩容：
					随着HashMap中元素的数量越来越多，发生碰撞的概率就越来越大，所产生的链表长度就会越来越长，这样势必会影响HashMap的速度，为了保证HashMap的效率，系统必须要在某个临界点进行扩容处理。
					该临界点在当HashMap中元素的数量等于table数组长度*加载因子。
					注：
						但是扩容是一个非常耗时的过程，因为它需要重新计算这些数据在新table数组中的位置并进行复制处理。所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。
					HashMap的扩容操作是怎么实现:
						...
			附:
				1. HashMap如何判断key是否为同一个对象：(HashSet同理因为调用hashmap)
					判断过程：
						1.对象存入HashSet前，首先调用hashcode方法判断
						2.如果判断相同则接着调用equals判断是否雷同，还是判断雷同的话才不接收。
					附：
						equals方法比hashcode方法精度高，但hashcode效率高
							hashcode 方法判断不同 equals一定不同
							hashcode 方法判断同   equals可以不同
							附：
								为什么hashcode码可能会相同了，
								因为可能出现4+4等3+5的情况。
							例：
							两个对象的 hashCode() 相同，equals() 不一定 true。
								String str1 = "通话";
								String str2 = "重地";
								System. out. println(String. format("str1：%d | str2：%d",  str1. hashCode(),str2. hashCode()));
								System. out. println(str1. equals(str2));
								执行的结果：
								str1：1179395 | str2：1179395
								false
								代码解读：
									String对象重写了hashcode方法。
									虽然“通话”和“重地”的 hashCode() 相同，然而 equals() 则为 false。
				2.
				* 一个类的实例如果想放在hashset中存储的话，建议同时重写equals和hashcode方法，并保持一定的契约关系。
				例：
					目标1.先保证地址不同2.接着保证苹果颜色和重量不同。
					//类实例属性就color，weight
					@Override
					public boolean equals(Object obj) {
						System.out.println("equals method is invoked now!");
						if(obj==null) return false;
						if(obj==this) return true;
						if(!(obj instanceof Apple)) return false;
						Apple otherApple = (Apple)obj; 		
						return this.color.equals(otherApple.color)
								   && Math.abs(this.weight-otherApple.weight)==0;
					}
					@Override
					public int hashCode() { //地址不同
						System.out.println("hashcode method is invoked now!");
						return this.color.hashCode()+this.weight.hashCode();
						/*
						  为什么地址可能会相同了，
						  因为可能出现4+4等3+5的情况。
						*/
					}

	TreeMap实现类：
		https://zhuanlan.zhihu.com/p/105377431
		介绍：
			基于红黑树实现。
				附：
					红黑树一种平衡二叉查找树。
					二叉查找树操作耗时O(h) 红黑树高至多lgn 所以红黑树操作耗时O(lgn)
		特性：
			构造方法：
				1. TreeMap要求存放的键值对的键必须实现Comparable接口.
				因为要根据键元素进行对比，然后插入到红黑树中。
				2. TreeMap不允许使用null 键。
					因为key要对比插入
		TreeMap的实现原理：
			新增：
				详：
					./新建文件夹/TreeMap红黑树源码.java
				简：
				1. 插入键值对时，把key从根节点开始对比，找到对应位置插入。
					小在比左边，大在比右，一样大则覆盖value。
					public V put(K key, V value) {
						Entry<K,V> t = root;
						...
						do {
							parent = t;
							cmp = k.compareTo(t.key);
							if (cmp < 0)
								t = t.left;
							else if (cmp > 0)
								t = t.right;
							else
								return t.setValue(value);
						} while (t != null);
					}
					Entry<K,V> e = new Entry<>(key, value, parent);
					if (cmp < 0)
						parent.left = e;
					else
						parent.right = e;
				2. 插入后维护红黑色性质。
					fixAfterInsertion(e);
	
	附：
	其余Map实现类
		Hashtable、ConcurrentHashMap：
			并发容器
		LinkedHashMap：！！！
			介绍：
				类似hashMap，仅比hashMap慢一点，但迭代访问时更快。
					注：为了提高速度，LinkedHashMap散列化所有的元素，但又使用了链表保存了顺序。
				迭代遍历它时，取得键值对的顺序是其插入顺序，因为其用链表维护了内部顺序。
			注：
				1.可以在构造器中设定LinkedHashMap,使之采用基于访问的最近最少使用(LRU)算祛，
				于是没有被访问过的(可被看作需要删除的)元素就会出现在队列的前面。
				对于需要定期清理元素以节省空间的程序来说，此功能使得程序很容易得以实现。
			例：
				./案例/LinkedHashMapDemo.java
			
		WeakHashMap：
			...
		IdentityHashMap：
			...
Collection接口：
	Set接口：
		介绍：
			Set接口是Collection接口的一个子接口，它表示数学意义上的集合概念(不允许重复项集合概念)。
			特性：
				1.Set中不包含重复的元素
				
			Set 接口常见的两种实现：
				HashSet 和TreeSet。
		HashSet：
			对象不可重复、无序。
			原理：
				基于HashMap开发，插入时是直接放入到hashMap的key上。
			附：
				对象存入HashSet建议重写hashCode()和equals()方法，hashMap判断是否重复是通过这两个方法。
		TreeSet:
			对象不能重复但有自然顺序（例从小到大顺序）。
			原理：
				通常是基于TreeMap实现，插入到map的key上。
			
			附：
				对象存入TreeSet要实现Comparable接口。
					TreeSet判断元素是否重复 、以及确定元素的顺序 靠的都是这个方法；
					@override
					public int compareTO(Object o){//当前一个类与另一个类的比较。
						//当前对象的某个判断比另一个对象的小返回-1，大返回1，等于即返回0会被treeset拒绝接收。
							//从大到小排可以乘-1或另一个类与当前类比较。可进行多重比较排序如：颜色不同按颜色排，同按重量排 
					}
		附：
			为优化 HashSet 空间的使用，您可以调优初始容量和负载因子。
			TreeSet 不包含调优选项，因为树总是平衡的，保证了插入、删除、查询的性能为log(n)。
			就是hashmap和treeamp了
	List:接口
		介绍：
			List 接口继承了 Collection 接口，表示一个允许重复项的有序集合概念，称为列表或序列。

			特性：
				1.元素允许重复项
				2.有序集合
					按插入的先后顺序排序
		List 接口常见的两种实现：
			ArrayList 和 LinkedList。
		ArrayList
			介绍：					
				ArrayList基于数组开发。ArrayList内部依赖的是一个对象数组Object[], 其众多方法均围绕该对象数组展开。
					数组在使用上较为麻烦，ArrayList在数组的基础上进行了二次开发，从使用角度克服了数组的诸多缺点，但本质上还是依靠数组机制来完成。
				优点：
					索引数据快而删除插入数据慢：
						附：
							数组在内存中的位置是相邻成片的。
							ArrayList使用数组方式存储数据，数组元素数大于实际存储的数据（便于增加和插入元素）。
						1. 删除会牵涉到数组的移动，所以速度慢。
						2. 当数组不够存储时，插入元素就要涉及数组元素移动等内存操作（因为要先声明个更大数组，然后复制旧数组，在插入），所以插入数据慢。
						3. 因为数组在内存中的位置是相邻成片的， 所以索引数据快。
						
					附：
						适用场景：
							数据录入后，较为稳定，删除和插入操作较少，大多为定位查询操作
							数据增加的频率间隔较长，不会持续性连续增加
							适合队列等对元素的先后顺序极为敏感的数据结构。
						与数组对比：
							优点：
								在编码便捷性上大大优于数组，少写不少控制代码。
							缺点：
								与数组对比，插入和删除容易造成大幅波动，在元素数量超出范围的时候，也有大量的数组元素拷贝的操作发生，对系统性能有较大影响。
				
				ArrayList的泛型控制（generic type）:
					由于ArrayList很灵活，内部可以放置各种数据类型，导致外部程序，从ArrayList中取出一个元素，还必须谨慎对其判断， 有的时候外部需要大量的各种类型的代码来针对不同的对象进行对应操作，成本高昂。 有的程序员忘记书写了一些代码，经常会导致ClassCastException, 所以后来，人们不得不限制了ArrayList中的元素的类型，要求其内部只能有一种元素。
					实例： List<String> list= new ArrayList<String>();
							（当然你要是没用泛型也可用instanceof 实例关键字来判断list中放的是什么类型;
								if（obj instanceof Interger） Interger i=(Interger)obj;
							）
		LinkedList ：
			介绍：
				以链表为基础实现，底层使用了双向循环链表。
				优点：
					索引数据慢而删除插入数据快：
						双向链表存储能将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构。
						这种链式存储方式与数组的连续存储方式相比，内存的利用率更高，插入数据时只需要记录（修改）本项的前后项即可，所以插入速度较快。
						按序号索引数据时需要进行前向或后向遍历，所以查找较慢。
	
					附：
						链表：
							链表介绍：链表是一种数据结构
							一个链表节点组成：上一个节点地址+下个节点地址+当前节点值
					附：
						适用场景：
							数据录入后，较为不稳定，有着频繁删除和插入操作，随机定位查询相对较少。
							适合队列等对元素的先后顺序极为敏感的数据结构。
		附：
			List提供的常见操作：
				List 接口提供了 4 种对列表元素进行定位（索引）访问方法。
					注:
						1.
						这些操作可能在和某些实现（例如 LinkedList 类）的索引值成比例的时间内执行。
						因此，如果调用方不知道实现，那么在列表元素上迭代通常优于用索引遍历列表。
						2.
						List 接口提供了特殊的迭代器，称为 ListIterator。
						除了允许 Iterator 接口提供的正常操作外，该迭代器还允许元素插入和替换，以及双向访问。
						还提供了一个方法来获取从列表中指定位置开始的列表迭代器。

				List 接口提供了两种搜索指定对象的方法。
					从性能的观点来看，应该小心使用这些方法。在很多实现中，它们将执行高开销的线性搜索。

				List 接口提供了两种在列表的任意位置高效插入和移除多个元素的方法。

				注：
					某些列表实现对列表可能包含的元素有限制：
						试图添加不合格的元素可能会抛出未经检查的异常。
						试图查询不合格的元素可能会抛出异常，也可能返回 false；
				list常用算法：
					List list = new LinkedList();
					Collections.reverse(list);//逆序
					Collections.sort(list);//排序
					Collections.binarySearch(list,"111");//折半查找

待看下：
	https://blog.csdn.net/zhangqunshuai/article/details/80660974
	https://blog.csdn.net/qq_22118507/article/details/51576319
	https://blog.csdn.net/bestxiaok/article/details/78413022

	附：
		集合和数组的关系：
			没有必然联系，但有部分集合是基于数组来实现的.
				因为集合是对数组做的封装,所以,数组永远比任何一个集合要快。
			集合提供了比数组更多的功能：
				例：
					一个数组实例具有固定的大小，不能伸缩。集合则可根据需要动态改变大小。
