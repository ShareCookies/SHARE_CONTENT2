二叉树：
	就是有左右节点的树
二叉搜索树性质：
	对任何结点x,其左子树中的关键字最大不超过x.key,其右子树中的关键字最小不低于x. key。
红黑树性质：
	红黑节点
	*红下2黑
	*根黑
	叶黑
	*从任一节点出发，黑高同
	
左右旋：
	y节点右旋：
		把y节点变为右节点，即y节点下拉为y左节点的右节点
	x节点左旋：
		把x节点变为左节点，即x节点下拉为x右节点的左节点
	./左右旋.png
	
	左右旋保持了二叉搜索树的性质。

红黑树修复：
	附：
		红黑树源码插入修复总结.png
	1. 插入节点上红色
	2. 看是否破坏性质(红下2黑性质)
		while (x.parent.color == RED) 
		1. z的父节点为左节点的修复方式
			1. z的叔父节点为红时
			//此时情况：z红，父为左节点且红，叔父节点红，祖父节点黑。
			修复：夫置黑 叔置黑 祖父置红 指针指向祖父
			解析：1. 3个置操作修复了红下2黑问题 且维护了同黑高性质 2. 指向祖父是因为祖父变色可能又破坏了性质
			2. z叔父节点为空
				附：z叔父节点为黑或空？
				一定空，因为黑高要一致
			2.1 z红且为右节点
			//此时情况：z红且为右节点，父为左节点且红，z叔父节点为空
			修复：指针指向父节点左旋
			解析：右旋是为了形成2.2。以便修复红下二黑性质
			2.2 z红且为左节点
			//此时情况：z红且为左节点，父为左节点且红，z叔父节点为空。祖父黑
			修复：夫置黑，祖父置红，祖父右旋。
			解析：颜色变是为了修复红下两黑性质。(为什么祖父要红 因为黑高性质多个黑就要少个黑啊)
			右旋是为了维持黑高一致性质。
		2. z父节点为右节点的修复方式
			右节点同理只是相反
	3. 修复性质(根黑)
		root.color = BLACK;