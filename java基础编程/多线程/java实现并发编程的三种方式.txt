java实现多线程编程的三种方式：
	并发开发步骤：
		1. 任务定义
		2. 构造线程
			...
			Thread.java的init()方法
		3. 启动线程
			线程对象在初始化完成之后，调用start()方法就可以启动这个线程。
			线程start()方法的含义是：当前线程（即parent线程）同步告知Java虚拟机，只要线程规划器空闲，应立即启动调用 start()方法的线程。
	方式1.
		介绍：
			线程可以驱动任务，因此需要一种描述任务的方式。
			Runnable接口可以定义任务，实现Runnable接口重写run()方法即定义了一个任务。
		实现：
			编写任务（即实现Runnable接口）
			创建线程并驱动任务。
				用new Thread(Runnable target).start()启动一线程，并驱动任务：
		例：
			new Thread(new Runnable(){//实现Runnable接口
				@Override
				public void run(){
					System.err.println("线程");
				}
			}).start();
			实现Runnabel接口：
				./案例/Task.java
	方式2.：
		./线程创建之Callable.txt
	方式3.继承Thread，并重写run()方法:
		介绍：
			直接继承Thread，重写run方法来编写任务，最后启动线程来驱动任务。
		例：
			class ThreadTest extends Thread{
				public void run(){//在该方法里写该线程要干的事。
					System.err.println("线程");
				}
			}
			ThreadTest t = new ThreadTest();
			t.start();//线程的启动:
		注：
			为啥可以直接重写Thread的run来实现多线程：
				线程是用来驱动任务的，
				而 Thread 又实现了 Runnabel 接口，
				所以我们可以直接重写Thread的 run 方法来实现任务，并通过Thread的start方法来启用线程来驱动任务执行。
				注：我认为Thread主要功能是用来开启线程，定义任务只是他的一个附属功能。
			注：
				1.
				private native void start0();
				这个是Thread用来启动线程的方法,它是由虚拟机去调用了由c语言实现的启动线程的方法。
				2.
				我认为这句话可以证明,线程是用来驱动任务的
				The <code>Runnable</code> interface should be implemented by any
				class whose instances are intended to be executed by a thread.
并发编程问题之资源共享：
	./共享资源.txt
注：
	给线程任务传参的3种方式：
		https://blog.csdn.net/marvel_cheng/article/details/51992025
		1.构造器
		2.getset
		3.回调函数传参？
	线程池：
		./线程池.txt

	线程的调度:
		./线程相关内容.txt goto:线程的调度
	Thread类方法介绍：
		./Thread类.txt
		设置后台线程：
			./Thread类.txt goto：后台线程
	线程的相关操作：
		捕获线程中异常:
			./线程的相关操作.txt goto:捕获线程中异常
		终结任务:
			./线程的相关操作.txt goto:终结任务
		线程协作（线程通信）:
			./线程的相关操作.txt goto:线程协作（线程通信）
附：
	线程相关内容介绍:
		./线程相关内容.txt goto:线程相关内容介绍
