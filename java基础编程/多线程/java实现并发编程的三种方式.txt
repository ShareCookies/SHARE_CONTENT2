java实现多线程编程的三种方式：
	方式1.
		介绍：
			线程可以驱动任务，因此需要一种描述任务的方式。
			Runnable接口可以定义任务，实现Runnable接口重写run()方法即定义了一个任务。
		实现：
			编写任务（即实现Runnable接口）
			创建线程并驱动任务。
				用new Thread(Runnable target).start()启动一线程，并驱动任务：
		例：
			new Thread(new Runnable(){//实现Runnable接口
				@Override
				public void run(){
					System.err.println("线程");
				}
			}).start();
			实现Runnabel接口：
				./案例/Task.java
	方式2.：
		实现Callable接口
		介绍：
			Callable 接口相较于Runnable 接口，可以有返回值，并且可以抛出异常。
			https://www.cnblogs.com/baizhanshi/p/6425209.html
		实现：
			1.编写任务（即实现Callable接口）
				注：Callable的泛型对应call()的返回值类型
			2.Callable编写的任务需要用Future包裹，可用来接收任务返回值。
				注：FutureTask 是  Future 接口的常用实现类
			3.创建线程驱动修饰过的任务
			4.通过FastTask获取任务完成后的返回结果
		例：
			./案例/Callable/CallaleDemo.java
		附：
			Future：
				方法：
					isDone()：
						isDone()方法可以用来检查分配的任务是否已经被处理了
					get()：	
						接收线程运算后的结果
			异步任务返回结果原理：
				Callable接口
					* A task that returns a result and may throw an exception.
					* <p>The {@code Callable} interface is similar to {@link java.lang.Runnable}, in that both are designed for classes whose
					* instances are potentially executed by another thread.  A {@code Runnable}, however, does not return a result and cannot throw a checked exception.
					就是一个功能性接口，用来表明实现了这个接口的类就是个任务，任务这个概念类似与Runnable，只是Callable任务运行完后会返回结果.
				FutureTask类：
					FutureTask是 RunnableFuture<V>接口的实现类.
						RunnableFuture：
							RunnableFuture接口继承了Runnable，Future<V>接口。
							Runnable：
								就是个功能性描述接口，用来表明实现了这个接口的类就是个任务。
							Future<V>：
								 * A {@code Future} represents the result of an asynchronous computation. 
								 * Methods are provided to check if the computation is complete, to wait for its completion, and to retrieve the result of the computation.
								 Future代表了异步运算结果。（实现类存放了异步结果）
								 Future提供了些对异步运算的操作方法。
					* A cancellable asynchronous computation.  This class provides a base implementation of {@link Future}, with methods to start and cancel
					* a computation, query to see if the computation is complete, and
					* retrieve the result of the computation. 
					FutureTask是 Future接口的基本实现类，提供了开始、查询等操作callable任务结果的方法。
				附：
					为什么要先用FutureTask封装Callable接口：
						因为FutureTask才有实现runnable接口，才能交给thread执行。
						场景：
							FutureTask<String> result = new FutureTask<String>(td);
							new Thread(result).start();
							...
							String sum = result.get();
					thread为什么可以执行futurTask方法：
						public void run() {
							...
							Callable<V> c = callable;
							...
							result = c.call();
						}
						这个run是runnable的，futurTask就是执行了run，然后又调了callable的call方法。
					Callable，FutureTask关系：
						Callable填写用户的业务任务代码，然后返回结果。
						FutureTask（Future），用来运行Callable任务和提供了操作callable任务结果的方法。
					接收线程运算后的结果:
						String sum = result.get();//在所有的线程没有执行完成之后这里是不会执行的
						result.get()实现：
							public V get(long timeout, TimeUnit unit){
								...
								int s = state;
								if (s <= COMPLETING &&
									(s = awaitDone(true, unit.toNanos(timeout))) <= COMPLETING)
									throw new TimeoutException(); //这里用了阻塞(或者轮询)的方式得到任务的结果。
								return report(s);
							}
		附2：
			CompletableFuture：？
				completableFuture是JDK1.8新引入的类。
				CompletableFuture类实现了CompletionStage和Future接口。
					Future是Java 5添加的类，用来描述一个异步计算的结果，但是获取一个结果时方法较少,要么通过轮询isDone，确认完成后，调用get()获取值，要么调用get()设置一个超时时间。但是这个get()方法会阻塞住调用线程，这种阻塞的方式显然和我们的异步编程的初衷相违背。
				为了解决这个问题，JDK吸收了guava的设计思想，加入了Future的诸多扩展功能形成了CompletableFuture。
				CompletionStage是一个接口，从命名上看得知是一个完成的阶段，它里面的方法也标明是在某个运行阶段得到了结果之后要做的事情。
				https://www.jianshu.com/p/6f3ee90ab7d3
				？
					CompletionStage还是在一个线程完成的吧，只是可以在完成不同的阶段完成后做想做的事。
	方式3.继承Thread，并重写run()方法:
		介绍：
			直接继承Thread，重写run方法来编写任务，最后启动线程来驱动任务。
		例：
			class ThreadTest extends Thread{
				public void run(){//在该方法里写该线程要干的事。
					System.err.println("线程");
				}
			}
			ThreadTest t = new ThreadTest();
			t.start();//线程的启动:
		注：
			为啥可以直接重写Thread的run来实现多线程：
				线程是用来驱动任务的，
				而 Thread 又实现了 Runnabel 接口，
				所以我们可以直接重写Thread的 run 方法来实现任务，并通过Thread的start方法来启用线程来驱动任务执行。
				注：我认为Thread主要功能是用来开启线程，定义任务只是他的一个附属功能。
			注：
				1.
				private native void start0();
				这个是Thread用来启动线程的方法,它是由虚拟机去调用了由c语言实现的启动线程的方法。
				2.
				我认为这句话可以证明,线程是用来驱动任务的
				The <code>Runnable</code> interface should be implemented by any
				class whose instances are intended to be executed by a thread.
并发编程问题之资源共享：
	./共享资源.txt
注：
	给线程任务传参的3种方式：
		https://blog.csdn.net/marvel_cheng/article/details/51992025
		1.构造器
		2.getset
		3.回调函数传参？
	线程池：
		./线程池.txt

	线程的调度:
		./线程相关内容.txt goto:线程的调度
	Thread类方法介绍：
		./Thread类.txt
		设置后台线程：
			./Thread类.txt goto：后台线程
	线程的相关操作：
		捕获线程中异常:
			./线程的相关操作.txt goto:捕获线程中异常
		终结任务:
			./线程的相关操作.txt goto:终结任务
		线程协作（线程通信）:
			./线程的相关操作.txt goto:线程协作（线程通信）
附：
	线程相关内容介绍:
		./线程相关内容.txt goto:线程相关内容介绍
