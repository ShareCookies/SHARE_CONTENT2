并发队列：
	介绍：
		队列就是遵从先进先出规则的一种数据结构。
		
		并发队列在任何时刻都只允许一个任务插入或移除元素。
			线程安全的队列。
		JDK提供了两套并发队列实现，一个是以ConcurrentLinkedQueue为代表的高性能队列非阻塞，一个是以BlockingQueue接口为代表的阻塞队列。
			实现一个线程安全的队列有两种实现方式一种是使用阻塞算法，另一种是使用非阻塞算法。
				使用阻塞算法的队列可以用一个锁（入队和出队用同一把锁）或两个锁（入队和出队用不同的锁）等方式来实现。
				而非阻塞的实现方式则可以使用循环CAS的方式来实现。
	阻塞式队列：
		https://www.cnblogs.com/aspirant/p/8657801.html
		什么是阻塞队列，即从队列中新增或获取数据时可能会被阻塞的队列。
			附：
			这里的阻塞主要是指，新增时如果队列满那么阻塞新增线程直到可插入，获取时空则阻塞直到有数据获取。
			lock对象的阻塞主要是为了并发安全。
		附：
		阻塞队列为什么是线程安全的:
			操作里加了lock对象来实现并发安全。
			lock对象下获取不到数据，就阻塞不释放吗？那别的线程也进不来啊，怎么继续最佳元素？即如何实现阻塞效果了？
		
		BlockingQueue接口的核心方法：
		　　1.放入数据
		　　　　（1）offer(anObject):表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则返回false.（本方法不阻塞当前执行方法
		 的线程）；　　　　　　 
			 　　（2）offer(E o, long timeout, TimeUnit unit)：可以设定等待的时间，如果在指定的时间内，还不能往队列中加入BlockingQueue，则返回失败。
		　　　　（3）put(anObject):把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被阻断直到BlockingQueue里面有空间再继续.
		　　2. 获取数据
		　　　　（1）poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null;
		　　　　（2）poll(long timeout, TimeUnit unit)：从BlockingQueue取出一个队首的对象，如果在指定时间内，队列一旦有数据可取，则立即返回队列中的数据。否则知道时间
		超时还没有数据可取，返回失败。
		　　　　（3）take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到BlockingQueue有新的数据被加入; 
		　　　　（4）drainTo():一次性从BlockingQueue获取所有可用的数据对象（还可以指定获取数据的个数），通过该方法，可以提升获取数据效率；不需要多次分批加锁或释放锁。
		JDK提供的阻塞队列：
			1. ArrayBlockingQueue
				基于数组实现的阻塞队列，在内部维护了一个定长数组，以便缓存队列中的数据对象。
					除了一个定长数组外，ArrayBlockingQueue内部还保存着两个整形变量，分别标识着队列的头部和尾部在数组中的位置。
				这是一个常用的阻塞队列。
				附：
					锁对象：
						ArrayBlockingQueue在生产者放入数据和消费者获取数据，都是共用同一个锁对象，由此也意味着两者无法真正并行运行，这点尤其不同于LinkedBlockingQueue；按照实现原理来分析，ArrayBlockingQueue完全可以采用分离锁，从而实现生产者和消费者操作的完全并行运行。Doug Lea之所以没这样去做，也许是因为ArrayBlockingQueue的数据写入和获取操作已经足够轻巧，以至于引入独立的锁机制，除了给代码带来额外的复杂性外，其在性能上完全占不到任何便宜。 
		　　2. LinkedBlockingQueue
		　　3. DelayQueue
		　　4. PriorityBlockingQueue
		　　5. SynchronousQueue(同步阻塞队列)
			　 	与前面的不同，这是一种无缓冲的阻塞等待队列。
					类似于无中介的直接交易，有点像原始社会中的生产者和消费者，生产者拿着产品去集市销售给产品的最终消费者，而消费者必须亲自去集市找到所要商品的直接生产者，如果一方没有找到合适的目标，那么对不起，大家都在集市等待。
					优略势：
					相对于有缓冲的BlockingQueue来说，少了一个中间经销商的环节（缓冲区），
					如果有经销商，生产者直接把产品批发给经销商，而无需在意经销商最终会将这些产品卖给那些消费者，由于经销商可以库存一部分商品，因此相对于直接交易模式，总体来说采用中间经销商的模式会吞吐量高一些（可以批量买卖）；但另一方面，又因为经销商的引入，使得产品从生产者到消费者中间增加了额外的交易环节，单个产品的及时响应性能可能会降低。
	非阻塞式队列：
		ConcurrentLinkedQueue:
			./ConcurrentLinkedQueue.txt