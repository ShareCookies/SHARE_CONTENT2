1. 进程就是运行中的程序，由线程+内存存储空间构成。
2. 线程：java采用线程机制来实现并发。
	线程机制：
		1.线程机制是在单一进程中创建多个线程来执行多任务。
			一个任务中由一个线程来驱动执行。
		java程序是从主线程开始运行的。
			即java程序是从main()开始的，main()被分配了个线程，称为主线程。
			在主线程中可创建线程，称为子线程。
	附：
		1. java程序进程由多个线程构成，每个进程至少存在一个线程。所以java中线程是程序执行流的最小调度单元。
		2. 线程可以利用进程所拥有的资源。
		3. 
			线程构成：
	附：
		多线程作用：(并发好处)
			同一时间进行多个任务的处理。
			1.提交各资源利用效率，处理耗时操作。
			2.避免任务阻塞，导致程序中止
			3.仿真系统
			松耦合设计：
				可以使你创建更加松散耦合的设计。
				否则你的代码各个部分就要显式地关注那些通常可以由线程处理的任务。
		线程数量限制：！!
			多任务系统对可用的线程数量的限制通常是较小的，可能数十或数百。
			这个数字在程序控制范围外可能会发生变化，它可能依赖于平台，如java中，依赖于java的版本。
	附：名词解释：	
			协作式多线程：
				在协作式系统中，每个任务都会自动地放弃控制，这要求程序员要有意识地在每个任务中插入某种类型的让步语句。
				协作式系统的优势是双重的，上下文切换的开销通常比抢占式系统要低廉许多，并且对可以同时执行的线程数量在理论上没有任何限制。
				当你处理大量的仿真元素时,这可以一种理想的解决方案。
				java能实现协作式系统的效果吗！
				
			多线程的上下文切换：
				指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。
	附：
	程序结束：
		1.对Java程序来说，一个进程只要还有一个用户线程在运行，那么进程就不会结束。
		如果一个进程只有后台线程运行，那么该进程就会结束。
			注：一个线程未进入死亡状态，垃圾回收器是无法清除它。



