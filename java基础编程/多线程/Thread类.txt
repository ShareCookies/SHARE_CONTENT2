Thread类:
	方法:
		.start():
			该方法用于启动线程来驱动任务。		
			附：
				启动一个线程是调用start()方法，使线程所代表的虚拟处理机处于可运行状态，这意味着它可以由JVM调度并执行，这并不意味着线程就会立即运行。			
		.run()
			只是调用任务,未开辟线程。
			程序还是按顺序执行。
		.setPriority():
			介绍：
				设置线程的优先级
			例：
				Thread.currentThread().setPriority();
				//值建议Thread.MAX_ PRIORITY、 NORM_ PRIORITY和MIN_ PRIORITY
		.join()：
			/线程通信/Thread.join().txt
		.sleep():
			线程调度/sleep.txt
		.yield():
			介绍：
				设置当前线程让步。
					提示线程调度机制我的任务已经差不多完成，允许放弃cpu资源进入就绪状态重新排队，让别的线程调用cpu。
				执行yield()方法后线程转入就绪（ready）状态。
					这个是一定会有的吧！
				cpu资源通常会给相同优先级或更高优先级的线程以运行的机会；
					这只是对jvm线程调度器的一个建议，没有任何机制保证它会被采纳，所以重要的控制或调用不能依赖于yield。
				附：
					yield()方法不具有很好的可移植性（跟操作系统CPU调度相关）。
			例：
				Thread.yield();
		.interrupt():
			介绍：
				可以用来终止被阻塞的任务。
				该方法将设置线程的状态中断状态，但它不会中断一个正在运行的线程。
				！！！
				更确切的说，如果线程被Object.wait, Thread.join和Thread.sleep三种方法之一阻塞，
				此时调用该线程的interrupt()方法，那么该线程将抛出一个 InterruptedException中断异常（该线程必须事先预备好处理此异常），从而提早地终结被阻塞状态。
				如果线程没有被阻塞，这时调用 interrupt()将不起作用，直到执行到wait(),sleep(),join()时,才马上会抛出 InterruptedException。
				
				即如果一个线程已被阻塞，那么interrupt将设置这个线程的中断状态，然后线程抛出InterruptedException。
				所以在你的线程中应编写catch语句。
			例子：
				Thread.interrupt()//中断当前线程
				thread.interrupt();//中断持有的线程对象
			interrupt、interrupted和isInterrupted区别：
				https://blog.csdn.net/smiles13/article/details/81292608
		.isDaemon():
			介绍：
				判断线程是否是一个后台线程。
			例：
				Thread t=...;
				syso(t.isDaemon);
				或
				Thread.currentThread().isDaemon();//判断当前线程是否为后台线程
		.getName():
			介绍：获取当前线程名字
			例：Thread.currentThread().getName();//主线程默认名main，创建的线程名默认从Thread-0开始
	
中断：
	一个线程不应该由其他线程来强制中断或停止，而是应该由线程自己自行停止。
		所以，Thread.stop, Thread.suspend, Thread.resume 都已经被废弃了。



	每个线程都有一个中断属性(Boolean),用于表示线程的中断状态（interrupted status）。
		中断状态初始时为 false；
	当一个线程A通过调用 threadB.interrupt() 中断线程B时，会出现以下两种情况之一：
		1. 如果那个线程B在执行一个低级可中断阻塞方法，例如 Thread.sleep()、 Thread.join() 或 Object.wait()，那么它将取消阻塞并抛出 InterruptedException。
			? 阻塞状态不是失去cpu使用权吗，那么他是如何响应interrupt的，是先运行在响应吗
		2. 否则， interrupt() 只是设置线程B的中断状态。 
			在被中断线程B中运行的代码以后可以轮询中断状态，看看它是否被请求停止正在做的事情。

	Thread类提供如下3个操作维护这个Boolean变量:
		public void interrupt()
			将线程中断状态设为true
		public static boolean interrupted
			返回当前线程的中断状态，然后reset当前线程的中断状态
		public boolean isInterrupted()
			返回当前线程的中断状态。