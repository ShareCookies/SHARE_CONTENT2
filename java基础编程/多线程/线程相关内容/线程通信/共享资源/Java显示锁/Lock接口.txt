显示锁Lock：
	背景：
	
		Java SE 5之后，并发包提供了种显式的互斥机制 Lock对象(显示锁功能)。
		它提供了与synchronized关键字类似的同步功能,只是在使用时需要显式地获取和释放锁。
		虽然它缺少了隐式获取释放锁的便捷性,但是却拥有了锁获取与释放的可操作性。
	
	介绍：
		Lock是一个接口， 它定义了锁获取和释放的基本操作。
		显示锁(Lock对象)必须被显式地创建、锁定和释放。
		附：
			1. Lock接口的常见实现类有：
				ReentrantLock，ReentrantReadWriteLock。
			2. 显式锁优缺点
				1. 更加灵活
				2. 与内建的锁形式相比，代码缺乏优雅性。
				需要显式的申请和释放
				
			3. 当然，当需要同步时请优先考虑更安全的更易用的隐式锁。	

		
		注：Lock锁使用的注意事项
				1. 不要将获取锁的过程写在try块中，否则可能会因为异常导致锁永远无法释放。？？？
				2. 其释放一定要放到finally块中。
					因为：
					显式锁不像内置锁那样会自动释放，使用显式锁一定要手动释放。
					如果获取锁后由于异常的原因没有释放锁，那么这把锁将永远得不到释放！所以要将unlock()放在finally块中，保证无论发生什么都能够正常释放。			

lock特性：	
	Lock接口提供的synchronized关键字不具备的主要特性：
		1.1 尝试非阻塞地获取锁
			当前线程尝试获取锁，如果这一时刻锁没有被其他线程获取到，则成功获取并持有锁
		1.2 超时获取锁
			在指定的截止时间之前获取锁，如果截止时间到了仍旧无法获取锁，则返回
		2. 能被中断地获取锁
			与synchronized不同，获取到锁的线程能够响应中断，当获取到锁的线程被中断时，
			中断异常将会被抛出，同时锁会被释放
		3. 多条件队列（显示锁如何挂起和唤醒）
					
	1.可定时：(非阻塞)
		介绍：
			Look#tryLock()
			Look#tryLock(long timeout, TimeUnit unit)
			提供了一种以定时结束等待的方式，如果线程在指定的时间内没有获得锁，该方法就会返回false并结束线程等待。
		例：
			try {
				// 可定时，超过指定时间为得到锁就放弃
				lock.tryLock(10, TimeUnit.SECONDS);
				try {
					// your code
				}finally {
					lock.unlock();
				}
			} catch (InterruptedException e1) {
				// exception handling
			}
	2.可中断：
		介绍：
			Look#lockInterruptibly()
			给我们提供了一种可以中断结束等待的方式。
			附：
				可中断性好处：
					你一定见过InterruptedException，很多跟多线程相关的方法会抛出该异常，这个异常并不是一个缺陷导致的负担，而是一种必须，或者说是一件好事。
					可中断性给我们提供了一种让线程提前结束的方式（而不是非得等到线程执行结束），这对于要取消耗时的任务非常有用。
				附：
					对于内置锁，线程拿不到内置锁就会一直等待，除了获取锁没有其他办法能够让其结束等待。
				？
					lock可中断实现原理？
					是因为lock锁东西，是进入等待状态，而不是....?
		例：
			try {
				// 可中断，等待获取锁的过程中线程线程可被中断
				lock.lockInterruptibly();
				try {
					// your code
				}finally {
					lock.unlock();
				}
			} catch (InterruptedException e) {
				// exception handling
			}
	3.多条件队列：(显示锁如何挂起和唤醒) (Condition接口)
		https://www.cnblogs.com/CarpenterLee/p/7896361.html
		介绍：
				任意一个Java对象，都拥有一组监视器方法（定义在java.lang.Object上），主要包括wait()、 wait(long timeout)、notify()以及notifyAll()方法，这些方法与synchronized同步关键字配合，可以实现等待/通知模式。
	
				Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式。
				但是这两者在使用方式以及功能特性上还是有差别的。 
				
		3.1 条件队列(condition queue)：
			1. 线程在获取锁之后，可能会由于等待某个条件发生而进入等待状态.
				附：
				内置锁通过Object.wait()方法，显式锁通过Condition.await()方法。
			2. 进入等待状态的线程会挂起并自动释放锁，这些被挂起的线程放入到条件队列当中。
			3. synchronized对应的只有一个条件队列，而ReentrantLock却可以有多个条件队列
			注：
				所以显示锁通过不同的condition来进行挂起，会让线程进入不同的条件队列进行等待。
				证明：
					./condition等待原理.txt
		附3.2 条件谓词：
			什么是条件谓词：
				线程在获取锁之后，有时候还需要等待某个条件满足才能做事情，这些条件被称作条件谓词。
					比如：生产者需要等到“缓存不满”才能往队列里放入消息，而消费者需要等到“缓存非空”才能从队列里取出消息。
				线程在获取锁之后，然后判断条件谓词是否满足，如果不满足就不往下执行，相应的线程就会放弃执行权并自动释放锁。
		
		附3.3 条件谓词与条件队列：
			多个条件队列的好处：
				使用同一把锁的不同线程可能有不同的条件谓词，
				当只有一个条件队列时，某个条件谓词满足时就无法判断该唤醒条件队列里的哪一个线程；
				但是如果每个条件谓词都有一个单独的条件队列，当某个条件满足时我们就知道应该唤醒对应队列上的线程。
			附：
				内置锁通过Object.notify()或者Object.notifyAll()方法唤醒，显式锁通过Condition.signal()或者Condition.signalAll()方法唤醒。
		例：显示锁条件队列的使用
			介绍：
				ArrayBlockingQueue.put()
				阻塞队列put(E e)方法会以阻塞的方式向队列尾部放入元素，
				如果队列缓存不满就立即放入，否则挂起等待直到缓存不满，这里的谓词就是“缓存不满”，这是生产者要调用的方法。
			put方法的对应代码：
				final ReentrantLock lock = new ReentrantLock();// 显式锁对象
				private final Condition notFull = lock.newCondition();// put()方法的条件队列
				private final Condition notEmpty = lock.newCondition();// take()方法的条件队列
				...

				public void put(E e) throws InterruptedException {
					...
					lock.lockInterruptibly();
					try {
						while (count == items.length)// 条件谓词“缓存不满”
							notFull.await();// 1. 挂起到指定的条件队列进行等待，直到缓存非满
						items[putIndex] = e;// 将元素放入缓存
						putIndex = inc(putIndex);
						++count;
						notEmpty.signal();// 2. 唤醒指定条件队列的消费者线程
					} finally {
						lock.unlock();
					}
				}
		
附：lock对象锁住的是什么了:
	Condition接口
		任意一个Java对象，都拥有一组监视器方法（定义在java.lang.Object上），主要包括wait()、 wait(long timeout)、notify()以及notifyAll()方法，这些方法与synchronized同步关键字配合，可以实现等待/通知模式。
		Condition接口也提供了类似Object的监视器方法，与Lock配合可以实现等待/通知模式，但是这两者在使用方式以及功能特性上还是有差别的。 
		Object的监视器方法与Condition接口的对比:
			pdf263
		Condition使用：
			...
			附：
				1.
				condition的等待通知等操作，都得是在持有对应lock的情况下
				condition.await();
				condition.signal();
			
	Condition的实现分析:
		pdf267