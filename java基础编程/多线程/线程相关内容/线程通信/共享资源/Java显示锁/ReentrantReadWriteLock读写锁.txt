ReentrantReadWriteLock可重入读写锁：
介绍：
	1. 读写锁在同一时刻可以允许多个读线程访问，
	3. 有读锁存在时，写线程也会被阻塞，直到读锁释放。
	2. 在写线程访问时，所有的读线程和其他写线程均被阻塞。
	
	读写锁维护了一对锁，一个读锁和一个写锁，通过分离读锁和写锁，使得并发性相比一般的排他锁有了很大提升。
	
	在显示锁特性基础上，可重入读写锁拥有的特性：
		重进入
			该锁支持重进入
			以读写线程为例:
				读线程在获取了读锁之后，能够再次获取读锁。
				而写线程在获取了写锁之后能够再次获取写锁，同时也可以获取读锁
		公平性选择
			支持非公平(默认)和公平的锁获取方式，吞吐量还是非公平优于公平
			？
				优的具体原因，从源码分析
		锁降级：
			锁降级指的是写锁降级成为读锁。
				如果当前线程拥有写锁，然后将其释放，最后再获取读 锁，这种分段完成的过程不能称之为锁降级。
			即把持住（当前拥有的）写锁，再获取到读锁，随后释放（先前拥有的）写锁的过程。	
			附：锁降级中读锁的获取是否必要呢：
				答案是必要的。
				主要是为了保证数据的可见性，
				如果当前线程不获取读锁而是直接释放写锁，假设此刻另一个线程（记作线程T）获取了写锁并修 改了数据，那么当前线程无法感知线程T的数据更新。
				如果当前线程获取读锁，即遵循锁降级 的步骤，则线程T将会被阻塞，直到当前线程使用数据并释放读锁之后，线程T才能获取写锁进 行数据更新。
				附：
					可结合数据库的隔离性思考，有点点类似mysql读锁手动加排他锁
			例：
				pdf259
读写锁的使用： 
	ReadWriteLock(读写锁)维护了一对锁，一个读锁和一个写锁。
	获取读锁和写锁：
		ReentrantReadWriteLock reentrantReadWriteLock = new ReentrantReadWriteLock();
		//获取读锁
		static Lock readLock = reentrantReadWriteLock.readLock();
		readLock.lock();
		readLock.unLock();
		//获取写锁
		static Lock writeLock = reentrantReadWriteLock.writeLock();
		writeLock.lock();
		writeLock.unLock();
	例：
		./例/ReentrantReadWriteLockTest.java

	附：
		ReentrantReadWriteLock，还提供了一些便于外界监控其内部工作状态的方法：pdf254
			int getReadLockCount()
				返回当前读锁被获取的次数。
				该次数不等于获取读锁的线程数。
				例如，仅一个线程,它连续获取(重进人)了n次读锁，那么占据读锁的线程数是1,但该方法返回n
			int getReadHoldCount()
				返回当前线程获取读锁的次数。
				使用ThreadLocal保存当前线程获取的次数,java6引入该方法这也使得Java 6的实现变得更加复杂
			int getReadHoldCount()
				判断写锁是否被获取
			int getWriteHoldCount()
				返回当前写锁被获取的次数