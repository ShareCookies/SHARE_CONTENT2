介绍：
	读写锁在同一时刻可以允许多个读线程访问，但是在写线程访问时，所有的读线程和其他写线程均被阻塞。
	读写锁维护了一对锁，一个读锁和一个写锁，通过分离读锁和写锁，使得并发性相比一般的排他锁有了很大提升。
	
	ReentrantReadWriteLock的特性：
		重进入
			该锁支持重进入
			以读写线程为例:
				读线程在获取了读锁之后，能够再次获取读锁。
				而写线程在获取了写锁之后能够再次获取写锁，同时也可以获取读锁
		公平性选择
			支持非公平(默认)和公平的锁获取方式，吞吐量还是非公平优于公平
			

		锁降级？
			遵循获取写锁、获取读锁再释放写锁的次序，写锁能够降级成为读锁


读写锁的使用： 
	ReadWriteLock(读写锁)维护了一对锁，一个读锁和一个写锁。
	获取读锁和写锁的两个方法：
		ReentrantReadWriteLock reentrantReadWriteLock = new ReentrantReadWriteLock();
		//获取读锁
		static Lock readLock = reentrantReadWriteLock.readLock();
		readLock.lock();
		readLock.unLock();
		//获取写锁
		static Lock writeLock = reentrantReadWriteLock.writeLock();
		writeLock.lock();
		writeLock.unLock();
	例：
		ReentrantReadWriteLockTest.java

	附：
		ReentrantReadWriteLock，还提供了一些便于外界监控其内部工作状态的方法：
			pdf254
	
读写锁的实现分析
	pdf256
	...
	
	
	读写状态的设计
		1. 读写锁同样依赖自定义同步器来实现同步功能，读写状态就是其同步器的同步状态。
			ReentrantLock中自定义同步器的实现，同步状态表示锁被一个线程重复获取的次数。
			而读写锁的自定义同步器需要在同步状态（一个整型变量）上维护多个读线程和一个写线程的状 态，使得该状态的设计成为读写锁实现的关键。
		2. 如果在一个整型变量上维护多种状态，就一定需要“按位切割使用”这个变量，
		读写锁将 变量切分成了两个部分，高16位表示读，低16位表示写，划分方式如图5-8所示。
			pdf256
			
			高16位...10,读状态=2表示一个线程已经获取了写锁，且重进入了两次
				即连续获取了两次 读锁。
		附：
			读写锁是如何迅速确定读和写各自的状态呢：
				答案是通过位运算。
				假设当前同步状态 值为S，
				写状态等于S&0x0000FFFF（将高16位全部抹去），
				读状态等于S>>>16（无符号补0右移 16位）。
				当写状态增加1时，等于S+1，当读状态增加1时，等于S+(1<<16)，也就是 S+0x00010000。

	读写锁：
		//独写锁实例化时，构造器会实例化个写锁和读锁 供用户使用
		public ReentrantReadWriteLock(boolean fair) {
			sync = fair ? new FairSync() : new NonfairSync();
			readerLock = new ReadLock(this);
			writerLock = new WriteLock(this);
		}
	写锁的获取与释放：
		介绍：
			写锁是一个支持重进入的排它锁。
			重进入：如果当前线程已经获取了写锁，则增加写状态。
			可见性：如果当前线程在获取写锁时，读锁已经被获取（读状态不为0）或者该线程不是已经获取写锁的线程，则当前线程进入等待状态。
				如果存在读锁，则写锁不能被获取，原因在于：读写锁要确保写锁的操作对读锁可见。
				如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当 前写线程的操作。
				
			排它：写锁一旦被获取，则其他读写线程的后续访问均被阻塞。
		写锁的获取:？
			public void lock() {
				sync.acquire(1);
			}
			protected final boolean tryAcquire(int acquires) { 
				 /*
				 * Walkthrough:
				 * 1. If read count nonzero or write count nonzero
				 *    and owner is a different thread, fail.
				 * 2. If count would saturate, fail. (This can only
				 *    happen if count is already nonzero.)
				 * 3. Otherwise, this thread is eligible for lock if
				 *    it is either a reentrant acquire or
				 *    queue policy allows it. If so, update state
				 *    and set owner.
				 */
				Thread current = Thread.currentThread();
				int c = getState();
				int w = exclusiveCount(c); 
				if (c != 0) { 
					// 存在读锁？或者当前获取线程不是已经获取写锁的线程 
					if (w == 0 || current != getExclusiveOwnerThread()) return false;
					if (w + exclusiveCount(acquires) > MAX_COUNT)//？
						throw new Error("Maximum lock count exceeded");
					setState(c + acquires); 
					return true; 
				}
				if (writerShouldBlock() || !compareAndSetState(c, c + acquires)) { 
					return false; 
				}
				setExclusiveOwnerThread(current);
				return true; 
			}
			/** Returns the number of exclusive holds represented in count  ？*/
			static int exclusiveCount(int c) { return c & EXCLUSIVE_MASK; }
		
		写锁的释放：
			写锁的释放与ReentrantLock的释放过程基本类似，每次释放均减少写状态，当写状态为0 时表示写锁已被释放，从而等待的读写线程能够继续访问读写锁。
	读锁的获取与释放：
		介绍：
			读锁是一个支持重进入的共享锁，它能够被多个线程同时获取。
			在没有其他写线程访问时，读锁总会被成功地获取，而所做的也只是（线程安全的）增加读状态。
			如果当前线程在获取读锁时，写锁已被其他线程 获取，则进入等待状态。
			
			获取读锁的实现从Java 5到Java 6变得复杂许多，主要原因是新增了一 些功能，例如getReadHoldCount()方法，作用是返回当前线程获取读锁的次数。读状态是所有线 程获取读锁次数的总和，而每个线程各自获取读锁的次数只能选择保存在ThreadLocal中，由 线程自身维护，这使获取读锁的实现变得复杂。因此，这里将获取读锁的代码做了删减，保留 必要的部分，如代码清单5-18所示。
		读锁的获取：
		public void lock() {
			sync.acquireShared(1);
		}
		
		protected final int tryAcquireShared(int unused) { 
			for (;;) {
				int c = getState(); 
				//读状态!
				int nextc = c + (1 << 16); 
				if (nextc < c) throw new Error("Maximum lock count exceeded");//?
				//当前线程获取读 锁失败，进入等待状态。？
				if (exclusiveCount(c) != 0 && owner != Thread.currentThread()) return -1; // 不等0？ 返回-1？
				//如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全， 依靠CAS保证）增加读状态，成功获取读锁
				if (compareAndSetState(c, nextc)) return 1; } 
		}
		读锁的释放：
			读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态
			
	锁降级：
		...pdf259