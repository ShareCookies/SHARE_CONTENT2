注：
	当线程被阻塞队列阻塞时，线程会进入WAITING（parking）状态。
	我们可以使用jstack dump 阻塞的生产者线程看到这点，如下： 

	"main" prio=5 tid=0x00007fc83c000000 nid=0x10164e000 waiting on condition [0x000000010164d000] 
		java.lang.Thread.State: WAITING (parking) 
			at sun.misc.Unsafe.park(Native Method) 
			- parking to wait for <0x0000000140559fe8> (a java.util.concurrent.locks. AbstractQueuedSynchronizer$ConditionObject) 
			at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186) 
			at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject. 
			await(AbstractQueuedSynchronizer.java:2043) 
			at java.util.concurrent.ArrayBlockingQueue.put(ArrayBlockingQueue.java:324) 
			at blockingqueue.ArrayBlockingQueueTest.main(ArrayBlockingQueueTest.java
总结：
	显示锁condition的等待就是调用
	抽象队列同步器的等待方法
	同步器就是把当前线程加入到等待队列中，然后调用LockSupport#park
	LockSupport又是调用unsafe#park，这又是个本地方法，调用的是系统的线程等待方法。
await源码：AbstractQueuedSynchronizer.ConditionObject
	当往队列里插入一个元素时，如果队列不可用，那么阻塞生产者主要通过 LockSupport.park（this）来实现。

	public final void await() throws InterruptedException {
		//对中断的响应
		if (Thread.interrupted()) throw new InterruptedException(); 
		// 加入到等待队列
		Node node = addConditionWaiter(); 
		int savedState = fullyRelease(node);
		int interruptMode = 0; 
		//节点处于等待队列则挂起(2种状态不挂起：首节点或等待状态)。
		while (!isOnSyncQueue(node)) { 
			LockSupport.park(this); 
			// 是否被中断检查？
			if ((interruptMode = checkInterruptWhileWaiting(node)) != 0) break; 
		}
		//？
		if (acquireQueued(node, savedState) && interruptMode != THROW_IE) interruptMode = REINTERRUPT; 
		if (node.nextWaiter != null) // clean up if cancelled 
			unlinkCancelledWaiters(); 
		if (interruptMode != 0) reportInterruptAfterWait(interruptMode); 
	}
	
	
	/**
	添加个新的等待者(当前线程)到等待队列(链表)
	 * Adds a new waiter to wait queue.
	 * @return its new wait node
	 */
	private Node addConditionWaiter() {
		Node t = lastWaiter;
		// If lastWaiter is cancelled, clean out.
		if (t != null && t.waitStatus != Node.CONDITION) {
			unlinkCancelledWaiters();
			t = lastWaiter;
		}
		Node node = new Node(Thread.currentThread(), Node.CONDITION);
		if (t == null)
			firstWaiter = node;
		else
			t.nextWaiter = node;
		lastWaiter = node;
		return node;
	}
    /**
	返回true，如果节点是队列首节点，且处于等待重新获取状态？。
     * Returns true if a node, always one that was initially placed on
     * a condition queue, is now waiting to reacquire on sync queue.
     * @param node the node
     * @return true if is reacquiring
     */
    final boolean isOnSyncQueue(Node node) {
		//Node.CONDITION 等待状态
        if (node.waitStatus == Node.CONDITION || node.prev == null)
            return false;
        if (node.next != null) // If has successor, it must be on queue
            return true;
        return findNodeFromTail(node);
    }
	

LockSupport#park：
	继续进入源码，发现，然后调用unsafe.park阻塞当前线程。 
	public static void park(Object blocker) {
		Thread t = Thread.currentThread(); 
		//调用setBlocker先保存一下将要阻塞的线程
		setBlocker(t, blocker); 
		//然后调用unsafe.park阻塞当前线程。
		unsafe.park(false, 0L); 
		setBlocker(t, null); 
	}
unsafe#park：
	public native void park(boolean isAbsolute, long time); 
	park这个方法会阻塞当前线程，只有以下4种情况中的一种发生时，该方法才会返回： ·
		1. 与park对应的unpark执行或已经执行时。
			“已经执行”是指unpark先执行，然后再执行park的情况。？ 
		2. ·线程被中断时。
			？如何接收到中断的了
		3. 等待完time参数指定的毫秒数时。 ·
		4. 异常现象发生时，这个异常现象没有任何原因。
	
JVM是如何实现park方法：
	继续看一下JVM是如何实现park方法：
	park在不同的操作系统中使用不同的方式实现，
	在Linux下使用的是系统方法pthread_cond_wait(_cond, _mutex)实现。
		附：
			pthread_cond_wait 是一个多线程的条件变量函数，
				附：cond是condition的缩写，字面意思可以理解为线程在等待一个条件发生，这个条件是一个全局变量。
			这个方法接收两个参数：一个共享变量_cond，一个互斥量_mutex。
			想知道pthread_cond_wait是如何实 现的，可以参考glibc-2.5的nptl/sysdeps/pthread/pthread_cond_wait.c。？
		附：
			而unpark方法在Linux下是使用 pthread_cond_signal 实现的。 
			park方法在Windows下则是使用WaitForSingleObject实现的。

	
	
	实现代码在JVM源码路径，src/os/linux/vm/os_linux.cpp里的os::PlatformEvent::park方法，代码如下：
	void os::PlatformEvent::park() {
		int v ; 
		for (;;) { v = _Event ; if (Atomic::cmpxchg (v-1, &_Event, v) == v) break ; }
		guarantee (v >= 0, "invariant") ; 
		if (v == 0) { 
			// Do this the hard way by blocking ... 
			int status = pthread_mutex_lock(_mutex); 
			assert_status(status == 0, status, "mutex_lock");
			guarantee (_nParked == 0, "invariant") ; 
			++ _nParked ; 
			while (_Event < 0) { 
			status = pthread_cond_wait(_cond, _mutex); 
			// for some reason, under 2.7 lwp_cond_wait() may return ETIME ... 
			// Treat this the same as if the wait was interrupted 
			if (status == ETIME) { status = EINTR; } assert_status(status == 0 || status == EINTR, status, "cond_wait"); }
			-- _nParked ; 
			// In theory we could move the ST of 0 into _Event past the unlock(), 
			// but then we'd need a MEMBAR after the ST. 
			_Event = 0 ;
			status = pthread_mutex_unlock(_mutex); 
			assert_status(status == 0, status, "mutex_unlock"); 
		}
		guarantee (_Event >= 0, "invariant") ; 
		}
	}
？
	看来在支持线程的系统中，最小调度单位就是线程。
	那不支持了，java怎么模拟了，怎么与系统配合了

？唤醒会进入什么状态了？
	为什么显示锁这些实际都是进入等待状态，而不是阻塞了
	
	