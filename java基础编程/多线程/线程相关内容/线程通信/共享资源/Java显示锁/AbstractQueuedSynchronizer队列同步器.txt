队列同步器介绍：
	1. 
		AbstractQueuedSynchronizer(队列同步器 以下称同步器),是用来构建锁或者其他同步组件的基础框架。 	
		并发包的作者(DougLea)期望它能够成为实现大部分同步需求的基础。
	2. 在锁的实现中聚合同步器，利用同步器实现锁的语义。
	附：
		同步器是实现锁（也可以是任意同步组件）的关键，
		可以这样理解二者之间的关系：
			锁是面向使用者的，它定义了使用者与锁交 互的接口（比如可以允许两个线程并行访问），隐藏了实现细节；
			同步器面向的是锁的实现者， 它简化了锁的实现方式，屏蔽了同步状态管理、线程的排队、等待与唤醒等底层操作。
			锁和同 步器很好地隔离了使用者和实现者所需关注的领域。
同步器的使用：
	1.  同步器使用了一个int成员变量表示同步状态,通过内置的FIFO队列来完成资源获取线程的排队工作.
	2.  同步器的设计是基于模板方法模式的， 也就是说，使用者需要继承同步器并重写指定的方法。
	3.	将同步器组合在自定义同步组件的实现中，并调用同步器提供的模板方法来实现某些功能，
			附：这些模板方法会调用使用者重写的方法。

同步器建议重写方法：pdf225
	以下方法在抽象队列中是未实现的，推荐子类实现。
	protected boolean tryAcquire(int arg)
		独占式获取同步状态
		实现该方法需要查询当前状态并判断同步状态是否符合预期，然后再进行CAS设置同步状态
	protected boolean tryRelease(int arg)
		独占式释放同步状态
		等待获取同步状态的线程将有机会获取同步状态
	protected int tryAcquireShared(int arg)
	·	共享式获取同步状态
		返回大于等于0的值，表示获取成功，反之，获取失败
	protected boolean tryReleaseShared(int arg)
		共享式释放同步状态
			
	protected boolean isHeldExclusively(
		当前同步器是否在独占模式下被线程占用，
		一般该方法表示是否被当前线程所独占
	附：
		重写同步器指定的方法时，需要使用队列同步器提供的3个方法对同步状态进行来进行操作,因为它们能够保证状态的改变是安全的。
		getState()：获取当前同步状态。 ·
		setState(int newState)：设置当前同步状态。
			?这个不能确保安全·
		compareAndSetState(int expect,int update)：
			使用CAS设置当前状态，该方法能够保证状态设置的原子性。
			？
				protected final boolean compareAndSetState(int expect, int update) {
					// See below for intrinsics setup to support this
					return unsafe.compareAndSwapInt(this, stateOffset, expect, update);
				}
同步器提供的模板方法：
	附：
		这些方法为什么叫模板方法了，模板即写好了一个算法但把部分步骤留给子类来实现，
		以下这些方法都会调用个需要重写的方法，所以叫模板方法
	附：
		同步器提供的模板方法基本上分为3类：
			独占式获取与释放同步状态、
			共享式获取与释放 同步状态和
			查询同步队列中的等待线程情况。
	void acquire(int arg)
		独占式获取同步状态。
		如果当前线程获取同步状态成功，则由该方法返回(通常即表示获取锁成功)，否则，将会进人同步队列等待，
		该方法将会调用重写的tryAcquire(int arg)方法
	void acquireInterruptibly(int arg)	
		与acquire(int arg)相同，但是该方法响应中断，
		当前线程未获取到同步状态而进人同步队列中，如果当前线程被中断，则该方法会抛出.InterruptedException并返回
		
	boolean tryAcquireNanos(int arg,long nanos)
		在acquireInterruptibly(int arg)基础上增加了超时限制，如果当前线程在超时时间内没有获取到同步状态，那么将会返回false, 如果获取到了返回true
	void acquireShared(int arg)
		共享式的获取同步状态，
		如果当前线程未获取到同步状态，将会进人同步队列等待，
		与独占式获取的主要区别是在同一时刻可以有多个线程获取到同步状态	
	void acquireSharedInterruptibly(int arg)
		与acquireShared(int arg)相同，该方法响应中断
	boolean tryAcquireSharedNanos(int arg, long nanos)
		在acquireSharedInterruptibly(int arg)基础上增加了超时限制
	boolean release(int arg)
		独占式的释放同步状态，
		该方法会在释放同步状态之后，将同步队列中第一个节点包含的线程唤醒
	boolean releaseShared(int arg)
		共享式的释放同步状态？
	Collection<Thread> getQueuedThreads0
		获取等待在同步队列上的线程集合
		？模板那个
		
例：独占锁
	独占锁就是在同一时刻只能有一个线程获取到锁，而其他获取锁的线程只能 处于同步队列中等待，只有获取锁的线程释放了锁，后继的线程才能够获取锁
	./Mutex.java