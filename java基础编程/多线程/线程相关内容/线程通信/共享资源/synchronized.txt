synchronized：
	介绍：
		使用关键字synchronized修饰方法或加在代码段上，就能保证方法或者代码块以同步方式执行.
			附：Java为防止资源冲突提供的内置支持，使用起来非常简单。
		附：
			java同步指：
				即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作， 其他线程才能对该内存地址进行操作.
	使用案例：
		synchronized能加在方法或者代码段上。
		注：*
			持有synchronized锁期间，发生异常的时候，锁会自动释锁。
				附：要想不释放则要捕获异常，不让异常抛出。
		1.同步控制块（临界区）：
			介绍：
				该方式用于防止多个线程同时访问方法内部的部分代码而不是防止访问整个方法。
				通过这种方式分离出来的代码段被称为临界区(critical section)。
				注：
					1. 临界区synchronized要指定锁住那个对象。该对象的锁就会被用来实现对指定代码段的同步控制。
					2. 对象的锁拿来用，那么如果该对象内有多个临界区了：
						使用该方式获得指定对象的锁，那么该对象其他synchronized方法和临界区就不能同时被调用了。
						例：
							...
					3. 通过同步控制块，而不是同步方法，可以使多个任务访问对象的时间性能得到（显著）提高。
			例：
				public  void test() {
					synchronized(this){//this为要锁住的对象.//如果某线程得到this对象锁，其他线程只有等到锁释放才能进入临界区。
						将处理共享资源的代码（或操作）放到一个代码块中
					}
				}				
			原理：
				goto: synchronized实现原理#重量锁原理#monitorenter、monitorexit
		2.同步方法：
			public synchronized void test() {}
			注：
				1.同步方法锁的对象就是当前调用该方法的实例对象。
				2.synchronized关键字不属于方法特征签名组成部分？，所以可以在覆盖方法的时候加上去。
				例：
					../案例/同步与通信/synchronized/
		3.静态方法同步：
			类也有对象(class)，所以其也有锁。
			注：
				1.静态同步方法的锁是该方法所在类的class对象。
			附：
				静态同步方法可以在类的范围内防止对static数据的并发访问。
			废：
				静态方法是可以并发的案例：
					../案例/静态方法并发/静态方法并发案例.txt
				方法调用原理：
					？

	附：
		1.多个线程共享的锁对象必须要同一个：
			例：
				锁对象的创建不能放在实现了Runnable接口的类的run（）方法中，
				否则每个线程运行到run()方法会新建一个锁对象，线程不能产生同步效果。
		？
			在使用并发时，将域设置为private是非常重要的，否则，synchronized关键字就不能防止其他任务直接访问域，这样就会产生冲突。
			？没啊，我将方法设为public，其他任务访问还是要求有锁才能进来啊。
			../案例/同步与通信/synchronized/SynchronizedTestForPublicMethod.java
	附：
		共享资源：
			共享资源一般是以对象形式存在的内存片段，但也可以是文件、输入/输出端口，或者是打印机。
			要控制对共享资源的访问，得先把它包装进一个对象。然后把所有要访问这个资源的方法标记为synchronized。
			那么在这个线程从该方法返回之前，其他所有要调用类中任何标记为synchronized方法的线程都会被阻塞。
			即：
				并发情况下，对每个临界共享资源的访问方法都必须同步，否则将无法正确工作。
		你应该什么时候应用同步呢：？
			可以运用Brian的同步规则:
			1，如果你正在写一个变量，它可能接下来将被另一个线程读取，或者正在读取一个上一次已经被另一个线程写过的变量，那么你必须使用同步，并且，读写线程都必须用相同的监视器锁同步。
			2.如果在你的类中有超过一个方法在处理临界数据，那么你必须同步所有相关的方法。如果只同步一个方法， 那么其他方法将会随意地忽略这个对象锁，并可以在无任何惩罚的情况下被调用。
				还是有可能出错，如果锁的对象不是同一个了！
			3.这是很重要的一点: 每个访问临界共享资源的方法都必须被同步，否则它们就不会正确地工作。

synchronized实现原理：
	./synchronized原理/
	附：
	同步实现思路简易理解：
		当一个线程试图访问同步代码块时，它首先必须得到锁(没得到则阻塞)，退出或抛出异常时必须释放锁。