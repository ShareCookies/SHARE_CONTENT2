https://blog.csdn.net/whut2010hj/article/details/81413887
概要：
	ThreadLocal为每个线程维护一个本地变量,采用空间换时间。
原理：
ThreadLocal类有两个重要方法 set 和 get：
	set就是为当前线程的threadLocalMap设置一个值
		set逻辑：
			获取存在当前线程上ThreadLocalMap。
			把值构成key(ThreadLocal)，value(obj)存入ThreadLocalMap。
			附：
				所以往线程上存一个变量，就要创建一个ThreadLocal对象。
				所以要明白stringThreadLocal.set("test"+id);并不是把值存到ThreadLocal对象上，而是存到线程的ThreadLocalMap上，ThreadLocal对象(hashcode)只是作为map的key。
		public void set(T value) {
			Thread t = Thread.currentThread();
			ThreadLocalMap map = getMap(t);
			if (map != null)
				map.set(this, value);
			else
				createMap(t, value);
		}
		
	   createMap：
		ThreadLocalMap创建逻辑：
			创建个Entry数组，然后把Entry(ThreadLocal, firstValue)对象存入数组指定位置。
		然后把ThreadLocalMap存入当前线程上。
		   void createMap(Thread t, T firstValue) {
				t.threadLocals = new ThreadLocalMap(this, firstValue);
			}
			
			ThreadLocalMap(ThreadLocal<?> firstKey, Object firstValue) {
				table = new Entry[INITIAL_CAPACITY];
				int i = firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1);
				table[i] = new Entry(firstKey, firstValue);
				size = 1;
				setThreshold(INITIAL_CAPACITY);
			}
	get就是获取当前线程的threadLocalMap的一个值(根据ThreadLocal对象hashcode为key去寻找)。
		get逻辑：
			获取存在当前线程上ThreadLocalMap。
			从map的key中找到和当前ThreadLocal对象匹配的值。
				this ThreadLocal 变量对应的值。
			
			如果没有对应的就返回null
		public T get() {
			Thread t = Thread.currentThread();
			ThreadLocalMap map = getMap(t);
			if (map != null) {
				ThreadLocalMap.Entry e = map.getEntry(this);
				if (e != null) {
					@SuppressWarnings("unchecked")
					T result = (T)e.value;？
					return result;
				}
			}
			//如果这个对象没有值就调用setInitialValue
			return setInitialValue();
		}
线程上的ThreadLocalMap:
	介绍：
		线程变量ThreadLocalMap,是一个以ThreadLocal对象为键、任意对象为值的存储结构。
		这个结构被附带在线程上，也就是说一个线程可以根据一个ThreadLocal对象查询到绑定在这个 线程上的一个值。
	1. 在Thread类中有个ThreadLocalMap
		ThreadLocal.ThreadLocalMap threadLocals = null;
	2. 这个map类的键值对是:
		private Entry[] table;		
		static class Entry extends WeakReference<ThreadLocal<?>> {
			/** The value associated with this ThreadLocal. */
			Object value;

			Entry(ThreadLocal<?> k, Object v) {
				super(k);
				value = v;
			}
		}			
			
ThreadLocal可能引起的内存泄露
	https://www.cnblogs.com/onlywujun/p/3524675.html
	
