ConcurrentHashMap:
	介绍：
		ConcurrentHashMap是线程安全且高效的HashMap。
		
	前景：为什么要使用ConcurrentHashMap
		1. 线程不安全的HashMap 
			？
				节点被覆盖我会懂，但为什么会环形结构
			
			
			在多线程环境下，使用HashMap进行put操作会引起死循环，导致CPU利用率接近100%，所 以在并发情况下不能使用HashMap。
			例：
				执行以下代码会引起死循环。
				...
				HashMap在并发执行put操作时会引起死循环，是因为多线程会导致HashMap的Entry链表 形成环形数据结构，
				一旦形成环形数据结构，Entry的next节点永远不为空，就会产生死循环获 取Entry。

		2. 效率低下的HashTable 
			HashTable容器使用synchronized来保证线程安全，因此在线程竞争激烈的情况下HashTable 的效率非常低下。
			附：
				Hashtable K/V都不允许为null；HashMap允许K/V都为null；

	实现思路：
		ConcurrentHashMap在jdk 1.6和jdk 1.8实现原理是不同的。
		jdk 1.7:
			HashTable效率低下的原因是所有访问HashTable的线程都必须竞争同一把锁。
			假如容器里有多把锁，每一把锁用于锁容器其中一部分数据，
			那么当多线程访问容器里不同数据段的数据时，线程间就不会存在锁竞争，从而可以有效提高并 发访问效率，这就是ConcurrentHashMap所使用的锁分段技术。
		jdk 1.8:?
			在jdk 8中，ConcurrentHashMap不再使用Segment分离锁，而是采用一种乐观锁CAS算法来实现同步问题，但其底层还是“数组+链表->红黑树”的实现。
	原理：
		...?