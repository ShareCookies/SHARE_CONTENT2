线程调度：
	介绍：
		线程调度是指jvm(或操作系统)按照特定机制为多个线程分配CPU的使用权。
			附：为什么要分配：
				例：计算机只有一个CPU，在任意时刻只能执行一条机器指令，每个线程只有获得CPU的使用权才能执行指令。
				所谓多线程的并发运行，其实是指从宏观上看，各个线程轮流获得CPU的使用权，分别执行各自的任务。在运行池中，会有多个处于就绪状态的线程在等待CPU，JAVA虚拟机的一项任务就是负责线程的调度
			？
				jvm(或操作系统)具体指那个，单线程操作系统中jvm来，多线程操作系统中操作系统来吗
	线程调度模型：
		线程调度的两种模式：
			分时调度模型：
				所有线程轮流使用 CPU 的使用权，每个线程平均分配占用 CPU 的时间。
			抢占式调度模型：（JVM默认采用）
				让可运行池中优先级高的线程占用更多的cpu时间。
			？：
				./案例/（线程调度器）MoreBasicThread.java
			？
				jvm调度器是指什么
		优先级：
			介绍：
				线程的优先级将该线程的重要性传递给了调度器。
				尽管CPU处理现有线程集的顺序是不确定的，但是调度器将倾向于让优先权最高的线程先执行。
				
			例：
				./案例/SimplePriorities.java
				？
					确认下是否是执行更多吗
					那优先级高的会被最早调用吗
			注：
				1.优先级设置需操作系统的支持，因此多线程程序的功能实现不能依赖于线程的优先级，
				只能把优先级作为一种提高效率的手段。
			附：
				1. 优先级较低的线程仅仅是执行的频率较低，并不意味着得不到执行。			
				2.在绝大多数时间里，所有线程都应该以默认的优先级运行。
				试图操纵线程优先级通常是一种错误。
				3.尽管JDK有10个优先级，但它与多数操作系统都不能映射得很好。
				比如，Windows有7个优先级且不是固定的。 
				唯一可移植的方法是当调整优先级的时候，只使用Thread的MAX_ PRIORITY、 NORM_ PRIORITY和MIN_ PRIORITY三种级别。
附：
	线程调度相关的方法：
		wait()、sleep()、notify()、notityAll()
		这些方法大部分是当前线程让出当前cpu的使用权让给其他线程