并发介绍：
	顺序编程：
		即程序中在任意时刻都只能执行一个步骤。
	并发编程：
		把问题切分成多个可独立运行的部分。
		这些彼此独立运行的部分称为线程。
	附：
		并发能解决的问题：（什么应用并发）
			并发能解决的问题大体上可分为"速度"和"设计可管理性"两种。
			速度问题：
				如果你想要一个程序运行的更快，那么可以将其断开为多个片段，在单独的处理器上运行每个片段。
				以多核处理器的形式，使程序运行的更快。所以你得学习如何使用并发来利用这些额外的处理器。
				注：
					1.但并发也可以提高运行在单处理器上程序的性能。
					因为如果程序是顺序执行的话，当发生任务阻塞时（通常是I/O），将导致程序无法执行。
					2.如果假设单处理器程序不会出现任务阻塞，那么在单处理器上运行的并发程序开销，将比程序所有部分均顺序执行的开销大，
					因为其中增加了上下文切换的代价。（从一个任务切换到另一个任务）
		名词概念介绍：
			进程：
				一个运行在内存中的程序，叫做进程。
				进程又是由：多个线程+内存中存储进程数据的空间构成。
				注：
					一个程序至少有一个进程。
			单线程的程序：
				每个java程序都有一个main线程，且java程序都是从main线程开始启动运行的。
				例：
					我们平时写的只有mian函数的程序，就是单线程程序。
			多线程程序：
				main线程中，只要有进行开辟子线程的就算多线程程序。即算java实现并发编程。
				web系统：
					web系统是最常见的java多线程系统应用，其基本的web类库、Servlet具有天生的多线程性。
					//因为web服务器经常包含多个处理器，而并发是充分利用这些处理器的理想方式。
					//web服务器通常为每个请求分配一个线程

并发的实现方案：
	这里的实现方案，是指实现并发的原理概念。
	方式1：进程的并发：
		多任务操作系统可通过周期性地将CPU从一个进程切换到另一个进程，来实现同时运行多个进程。
		操作系统通常会将进程互相隔离开，因此它们不会彼此干涉，使得进程编程相对容易一些。
		有例子吗！
	方式2：独特编程语言的并发：
		某些编程语言可以将并发任务彼此隔离，其中每个函数调用不会产生任何副作用（并因此而不能干涉其他函数）。
		这些语言通常称为函数型语言，如Erlang。
	方式3：java的并发：
		Java采取在顺序语言的基础上提供对线程的支持，即采用线程机制来实现并发。
		线程机制：
			1.线程机制是在单一进程中创建多个任务来执行。
			2.这些独立任务中的每一个都将由线程驱动来执行任务。
				独立任务（即并发编程将程序划分为多个分离的任务。）
			注：
				java程序是从main()开始的，
				main()也分配了个线程，通常叫主线程。
				在主线程中可创建线程，通常叫子线程。
			附：
				1.java线程机制是抢占式算法的。
					这表示调度机制会周期性的中断线程，将上下文切换到另一个线程。
					从而为每个线程都提供时间片，使得每个线程都会分配到数量合理的时间去驱动它的任务。
					注：
						如何切分cpu时间，通常无需开发者考虑。
						线程调度机制会根据线程优先级、线程饥饿情况等数据，分配出下一个时间片给某个线程执行。
				2.线程机制好处：
					1.该方式的一好处在于操作系统的透明性。
						即某些操作系统不支持多任务，而java是在顺序语言的基础上添加线程来实现的并发，所以同样能运行在这类系统上。
					2.可以使你从线程分配层次抽身出来，
					即代码无需知道它是运行在具体一个还是多个cpu上，这些分配均有虚拟机来控制。
					注：如果程序运行的太慢，为机器添加一个cpu就能很容易的加快程序的运行速度。
		
				3.
					java的线程机制基于来自c的低级的p线程方式。
				4. 早期并发编程：
					较早的jdk并不会频繁对时间切片，jdk5以后会有更好的时间切片行为。
					最好的编程方式是编写使用线程的代码时，尽可能保守，不依赖于线程的行为。
摘要：
	进程：
		一个运行在内存中的程序，叫做进程。
	线程：
		java采用线程机制来实现并发。
		线程机制：
			1.线程机制是在单一进程中创建多个线程来执行任务。
				附：任务是指完成一个工作的一段代码。通常一个任务由一个线程来驱动执行。
			java程序是从主线程开始运行的。
				即java程序是从main()开始的，main()被分配了个线程，称为主线程。
				在主线程中可创建线程，称为子线程。
		附：
			线程是jvm的最小调度单元.
				
			进程由线程+内存数据存储空间构成，线程由极小的栈空间+...组成，线程间共享进程的存储空间(堆等)。
	附：
		系统的最小调度单元是进程还是线程看具体系统实现。
			在引入线程的操作系统中，
			通常都是把进程作为分配资源的基本单位，
			而把线程作为独立运行和独立调度的基本单位。
			



