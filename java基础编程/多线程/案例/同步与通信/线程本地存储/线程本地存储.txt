https://blog.csdn.net/whut2010hj/article/details/81413887
原理：
	在Thread类中有个ThreadLocalMap
		/* ThreadLocal values pertaining to this thread. This map is maintained by the InheritableThreadLocal class. */
		map中有有关于当前线程的threadLocals，该map是为ThreadLocal保留的。	
		ThreadLocal.ThreadLocalMap threadLocals = null;
			这个map类的键值对是 
				Entry(ThreadLocal<?> k, Object v)
			这个map在每个Thread里存了ThreadLocal对象和某个其他共享资源对象。
	ThreadLocal类有两个重要方法 set 和 get：
		get就是获取这个ThreadLocal变量在当前类的值：

			/**
			 * Returns the value in the current thread's copy of this
			 * thread-local variable.  If the variable has no value for the
			 * current thread, it is first initialized to the value returned
			 * by an invocation of the {@link #initialValue} method.
			 *
			 * @return the current thread's value of this thread-local
			 */
			返回当前线程的threadLocal变量。
				可以看到这个方法先要获取当前线程的map，然后在 map 里面找 this ThreadLocal 变量对应的值。
				如果这个对象没有值就调用setInitialValue()
			
			public T get() {
				Thread t = Thread.currentThread();
				ThreadLocalMap map = getMap(t);
				if (map != null) {
					ThreadLocalMap.Entry e = map.getEntry(this);//获取当前线程的ThreadLocal变量//通过map（key 就是当前线程，value就是当前线程相关的ThreadLocal）
					if (e != null) {
						@SuppressWarnings("unchecked")
						T result = (T)e.value;？
						return result;
					}
				}
				return setInitialValue();
			}
		set就是为当前线程的threadLocalMap设置一个指定值（共享值）
			/**
			 * Sets the current thread's copy of this thread-local variable
			 * to the specified value.  Most subclasses will have no need to
			 * override this method, relying solely on the {@link #initialValue}
			 * method to set the values of thread-locals.
			 *
			 * @param value the value to be stored in the current thread's copy of
			 *        this thread-local.
			 */
			public void set(T value) {
				Thread t = Thread.currentThread();
				ThreadLocalMap map = getMap(t);
				if (map != null)
					map.set(this, value);
				else
					createMap(t, value);
			}
ThreadLocal可能引起的内存泄露
	https://www.cnblogs.com/onlywujun/p/3524675.html
	
