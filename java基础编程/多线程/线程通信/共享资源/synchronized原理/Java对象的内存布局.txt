Java对象的内存布局:
	在JVM中，对象在内存中的布局分为三块区域：对象头、实例数据和对齐填充。
	附：
		实例变量：
			存放类的属性数据信息，包括父类的属性信息。
			如果是数组的实例部分还包括数组的长度，这部分内存按4字节对齐。
		填充数据：
			由于虚拟机要求对象起始地址必须是8字节的整数倍。
			填充数据不是必须存在的，仅仅是为了字节对齐，这点了解即可。
	

	Java对象头：pdf27
		Java对象头则是实现synchronized的锁对象的基础。
		synchronized用的锁相关信息是存在Java对象头里的。
		java对象头有两种类型：
			1. 对象是非数组类型，则用2字宽存储对象头。
				Mark Word (32 bits) Klass Word (32 bits)
			2. 对象是数组类型，则虚拟机用3个字宽 （Word）存储对象头
				Mark Word(32bits) Klass Word(32bits) array length(32bits)
			附：在32位虚拟机中，1字宽 等于4字节，即32bit。
		对象头的组成：
		Mark Word：
			1. 32位JVM 的Mark Word的默认存储结构如表2-3所示：
				...pdf27
				Java对象头里的Mark Word里默认存储对象的HashCode、分代年龄和锁标记位。
			2. 在运行期间，Mark Word里存储的数据会随着锁标志位的变化而变化。
				./附件/不同标记位下的MarkWord.png
				或...pdf27
			lock：
				2位的锁状态标记位。
				该标记的值不同，整个mark word表示的含义不同。
				附：
					lock标记，能够使Mark Word用尽可能少的二进制位表示尽可能多的信息。
			age：
				4位的Java对象年龄。
				在GC中，如果对象在Survivor区复制一次，年龄增加1。当对象达到设定的阈值时，将会晋升到老年代。默认情况下，并行GC的年龄阈值为15，并发GC的年龄阈值为6。由于age只有4位，所以最大值为15，这就是-XX:MaxTenuringThreshold选项最大值为15的原因。？
			identity_hashcode：25位的对象标识Hash码。
				采用延迟加载技术。调用方法System.identityHashCode()计算，并会将结果写到该对象头中。
				当对象被锁定时，该值会移动到管程Monitor中。
				？
					偏向锁状态和轻量锁装态hashcode了
			thread：
				持有偏向锁的线程ID。
			ptr_to_lock_record：
				指向栈中锁记录的指针。

			ptr_to_heavyweight_monitor：
				指向monitor对象（也称为管程或监视器锁）的起始地址，每个对象都存在着一个monitor与之关联。
				附：
					对象与其monitor之间的关系有存在多种实现方式，如monitor对象可以与对象一起创建销毁或当前线程试图获取对象锁时自动生，但当一个monitor被某个线程持有后，它便处于锁定状态。
			...
			附：
				mark word的位长度为JVM的一个Word大小，也就是说32位JVM的Mark word为32位，64位JVM为64位。
		附：
		class pointer
			这一部分用于存储对象的类型指针，该指针指向它的类元数据，JVM通过这个指针确定对象是哪个类的实例。
			该指针的位长度为JVM的一个字大小，即32位的JVM为32位，64位的JVM为64位。
			附：指针的压缩！
				如果应用的对象过多，使用64位的指针将浪费大量内存，统计而言，64位的JVM将会比32位的JVM多耗费50%的内存。为了节约内存可以使用选项+UseCompressedOops开启指针压缩，其中，oop即ordinary object pointer普通对象指针。开启该选项后，下列指针将压缩至32位：

				每个Class的属性指针（即静态变量）
				每个对象的属性指针（即对象变量）
				普通对象数组的每个元素指针
				当然，也不是所有的指针都会压缩，一些特殊类型的指针JVM不会优化，比如指向PermGen的Class对象指针(JDK8中指向元空间的Class对象指针)、本地变量、堆栈元素、入参、返回值和NULL指针等。

		array length
			如果对象是一个数组，那么对象头还需要有额外的空间用于存储数组的长度。
			附：
				这部分数据的长度也随着JVM架构的不同而不同：32位的JVM上，长度为32位；64位JVM则为64位。
				64位JVM如果开启+UseCompressedOops选项，该区域长度也将由64位压缩至32位。