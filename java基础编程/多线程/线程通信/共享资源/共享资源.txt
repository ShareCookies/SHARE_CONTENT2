共享资源：
	java线程间共享了堆资源，即支持多个线程访问同一个对象或者对象的成员变量。
	所以共享资源也是java的一种线程协作方式，因为多线程之间可以通过共享资源来协作。
共享资源缺陷：
	java线程间共享了堆资源,使用了并发后，多个线程彼此干涉的问题就产生了。
		例：两线程同时改变同一个值，同时访问一打印机等。
	解决方案：
		1. 可以使用同步来解决临界区的问题：
			线程同步：
				即当有一个线程在对内存进行操作时，其他线程都不可以对这个内存地址进行操作，直到该线程完成操作， 其他线程才能对该内存地址进行操作.
				1. 隐式锁synchronized。
					./synchronized.txt
				2. 显示锁Lock对象。
					./Java显示锁/
		附：
			volatile：
				./volatile.txt
			ThreadLocal：
				也可使用线程本地存储解决共享资源问题。
				./ThreadLocal.txt


附：
	原子类:
		./原子操作类/
	
	CountDownLatch
		CountDownLatch 是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程执行完后再执行。