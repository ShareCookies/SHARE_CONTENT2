5.1 Lock接口
	锁是用来控制多个线程访问共享资源的方式，一般来说,一个锁能够防止多个线程同时访问共享资源(但是有些锁可以允许多个线程并发的访问共享资源，比如读写锁)。
	在Lock接口出现之前, Java程序是靠synchronized关键字实现锁功能的,而Java SE 5之后，并发包中新增
	了Lock接口(以及相关实现类)用来实现锁功能,它提供了与synchronized关键字类似的同步功
	能,只是在使用时需要显式地获取和释放锁。
	虽然它缺少了(通过synchronized块或者方法所提供的)隐式获取释放锁的便捷性,但是却拥有了锁获取与释放的可操作性、可中断的获取锁以及超时获取锁等多种synchronized关键字所不具备的同步特性。



使用synchronized关键字将会隐式地获取锁，但是它将锁的获取和释放固化了，也就是先 获取再释放。当然，这种方式简化了同步的管理，可是扩展性没有显示的锁获取和释放来的 好。


附：
	不要将获取锁的过程写在try块中，因为如果在获取锁(自定义锁的实现)时发生了异常,异常抛出的同时,也会导致锁无故释放。
		是指获取锁时，没获取到出异常了，进行释放把别人的释放掉了吗
		
		
Lock是一个接口， 它定义了锁获取和释放的基本操作,
Lock接口的实现ReentrantLock。Lock接口的实现基本都是通过聚合了一个同步器的子类来完成线程访问控制的。


	