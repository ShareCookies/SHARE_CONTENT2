JVM加载class文件的原理机制：
	由于Java的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。
	当Java源程序的类经过JVM加载、连接（验证、准备和解析）和初始化后，就可被java程序使用。
	类的加载:
		类的加载是指把类的.class文件中的数据读入到内存中，通常是创建一个字节数组读入.class文件，然后产生与所加载类对应的Class对象。
		类的加载过程：
			1. 通过一个类的全限定名来获取定义次类的二进制流(ZIP 包、网络、运算生成、JSP 生成、数据库读取)。
			2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。
			3. 在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法去这个类的各种数据的访问入口。
			？
				2，3具体区别
			附:
				数组类的特殊性：数组类本身不通过类加载器创建，它是由 Java 虚拟机直接创建的。
				但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型最终是要靠类加载器去创建的，数组创建过程如下：

					如果数组的组件类型是引用类型，那就递归采用类加载加载。
					如果数组的组件类型不是引用类型，Java 虚拟机会把数组标记为引导类加载器关联。
					数组类的可见性与他的组件类型的可见性一致，如果组件类型不是引用类型，那数组类的可见性将默认为 public。
加载阶段与连接阶段的部分内容是交叉进行的，但是开始时间保持先后顺序。				
		类加载器：
			Java中的类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。
				通过一个类的全限定名来获取描述此类的二进制字节流。
			类加载器包括：根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）和用户自定义类加载器（java.lang.ClassLoader的子类）。
			父委托机制（PDM）：
				从Java 2（JDK 1.2）开始，类加载过程采取了父亲委托机制（PDM），PDM更好的保证了Java平台的安全性。
				在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。
				类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。
			关于几个类加载器说明：
				Bootstrap：一般用本地代码实现，负责加载JVM基础核心类库（rt.jar）；
				Extension：从java.ext.dirs系统属性所指定的目录中加载类库，它的父加载器是Bootstrap；
				System：又叫应用类加载器，其父类是Extension。它是应用最广泛的类加载器。它从环境变量classpath或者系统属性java.class.path所指定的目录中记载类，是用户自定义加载器的默认父加载器。
	类的连接:		
		加载完成后，Class对象还不完整，所以此时的类还不可用。
		当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。
		验证
			验证是连接的第一步，确保 Class 文件的字节流中包含的信息符合要求。
			文件格式验证:
				...
				只有通过这个阶段的验证后，字节流才会进入内存的方法区进行存储，所以后面 3 个验证阶段全部是基于方法区的存储结构进行的，不再直接操作字节流。
			元数据验证
				...
			字节码验证
				...
			符号引用验证
				……
				附：
					符号引用的目的是确保解析动作能正常执行。
					如果无法通过符号引用验证将抛出一个 java.lang.IncompatibleClass.ChangeError 异常的子类。如 java.lang.IllegalAccessError、java.lang.NoSuchFieldError、java.lang.NoSuchMethodError 等。
		准备
			这个阶段正式为类分配内存并设置类变量初始值。

			基本数据类型的零值：
				...
			?
				非基本变量初始值了
		解析?
			这个阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。

			符号引用
				符号引用以一组符号来描述所引用的目标，符号可以使任何形式的字面量。
			直接引用
				直接引用可以使直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用和迅疾的内存布局实现有关
			解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符 7 类符号引用进行，分别对应于常量池的 7 中常量类型。

		附：?
			解析阶段可以在初始化之后再开始(运行时绑定或动态绑定或晚期绑定)。
	类的初始化:
		前面过程都是以虚拟机主导，而初始化阶段开始执行类中的 Java 代码。
		包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。
	