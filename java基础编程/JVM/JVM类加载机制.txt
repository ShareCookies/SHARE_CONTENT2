JVM加载class文件的原理机制：
	由于JVM的跨平台性，经过编译的Java源程序并不是一个可执行程序，而是一个或多个类文件。
		附：所以理论上任何语言只要能编译成字节码文件，都能在jvm上运行。
	当类文件经过JVM加载、连接（验证、准备和解析）和初始化后，就可被使用。
	类的加载:

	类的连接:		
		加载完成后，Class对象还不完整，所以此时的类还不可用。
		当类被加载后就进入连接阶段，这一阶段包括验证、准备（为静态变量分配内存并设置默认的初始值）和解析（将符号引用替换为直接引用）三个步骤。
		验证
			验证是连接的第一步，确保 Class 文件的字节流中包含的信息符合要求。
			文件格式验证:
				...
				只有通过这个阶段的验证后，字节流才会进入内存的方法区进行存储，所以后面 3 个验证阶段全部是基于方法区的存储结构进行的，不再直接操作字节流。
			元数据验证
				...
			字节码验证
				...
			符号引用验证
				……
				附：
					符号引用的目的是确保解析动作能正常执行。
					如果无法通过符号引用验证将抛出一个 java.lang.IncompatibleClass.ChangeError 异常的子类。如 java.lang.IllegalAccessError、java.lang.NoSuchFieldError、java.lang.NoSuchMethodError 等。
		准备
			这个阶段正式为类分配内存并设置类变量初始值。

			基本数据类型的零值：
				...
			?
				非基本变量初始值了
		解析?
			这个阶段是虚拟机将常量池内的符号引用替换为直接引用的过程。

			符号引用
				符号引用以一组符号来描述所引用的目标，符号可以使任何形式的字面量。
			直接引用
				直接引用可以使直接指向目标的指针、相对偏移量或是一个能间接定位到目标的句柄。直接引用和迅疾的内存布局实现有关
			解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符 7 类符号引用进行，分别对应于常量池的 7 中常量类型。

		附：?
			解析阶段可以在初始化之后再开始(运行时绑定或动态绑定或晚期绑定)。
	类的初始化:
		前面过程都是以虚拟机主导，而初始化阶段开始执行类中的 Java 代码。
		包括：1)如果类存在直接的父类并且这个类还没有被初始化，那么就先初始化父类；2)如果类中存在初始化语句，就依次执行这些初始化语句。
	