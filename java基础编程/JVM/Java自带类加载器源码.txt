Launcher
	sun.misc.Launcher,它是一个java虚拟机的入口应用。
	
	从以下代码中我们可以得到相关信息：
		1. Launcher初始化了ExtClassLoader和AppClassLoader。
		2. 虽然Launcher中并没有看见BootstrapClassLoader,但有bootClassPath.
			bootClassPath是通过System.getProperty("sun.boot.class.path")得到的
		这个就是BootstrapClassLoader加载的jar包路径，即JRE目录下的jar包和class文件。
			？然后这个值有什么用了，Launcher在rt.jar中，bc还要在加载吗
			？Launcher是被谁加载的了，bt吗
		3. 	即BootstrapClassLoader、ExtClassLoader、AppClassloader实际是查阅相应的环境属性来加载资源文件的。
			(sun.boot.class.path、java.ext.dirs和java.class.path)
	public class Launcher {
		private static Launcher launcher = new Launcher();
		private static String bootClassPath =
			System.getProperty("sun.boot.class.path");

		public static Launcher getLauncher() {
			return launcher;
		}

		private ClassLoader loader;

		public Launcher() {
			// Create the extension class loader
			ClassLoader extcl;
			try {
				extcl = ExtClassLoader.getExtClassLoader();
			} catch (IOException e) {
				throw new InternalError(
					"Could not create extension class loader", e);
			}

			// Now create the class loader to use to launch the application
			try {
				loader = AppClassLoader.getAppClassLoader(extcl);
			} catch (IOException e) {
				throw new InternalError(
					"Could not create application class loader", e);
			}

			//设置AppClassLoader为线程上下文类加载器，这个文章后面部分讲解
			Thread.currentThread().setContextClassLoader(loader);
		}

		/*
		 * Returns the class loader used to launch the main application.
		 */
		public ClassLoader getClassLoader() {
			return loader;
		}
		/*
		 * The class loader used for loading installed extensions.
		 */
		static class ExtClassLoader extends URLClassLoader {}

		/**
		 * The class loader used for loading from java.class.path.
		 * runs in a restricted security context.
		 */
		static class AppClassLoader extends URLClassLoader {}
	}				

	/*
     * The class loader used for loading installed extensions.
     */
    static class ExtClassLoader extends URLClassLoader {

        static {
            ClassLoader.registerAsParallelCapable();
        }

        /**
         * create an ExtClassLoader. The ExtClassLoader is created
         * within a context that limits which files it can read
         */
        public static ExtClassLoader getExtClassLoader() throws IOException
        {
            final File[] dirs = getExtDirs();

            try {
                // Prior implementations of this doPrivileged() block supplied
                // aa synthesized ACC via a call to the private method
                // ExtClassLoader.getContext().

                return AccessController.doPrivileged(
                    new PrivilegedExceptionAction<ExtClassLoader>() {
                        public ExtClassLoader run() throws IOException {
                            int len = dirs.length;
                            for (int i = 0; i < len; i++) {
                                MetaIndex.registerDirectory(dirs[i]);
                            }
                            return new ExtClassLoader(dirs);
                        }
                    });
            } catch (java.security.PrivilegedActionException e) {
                throw (IOException) e.getException();
            }
        }

        private static File[] getExtDirs() {
            String s = System.getProperty("java.ext.dirs");
            File[] dirs;
            if (s != null) {
                StringTokenizer st =
                    new StringTokenizer(s, File.pathSeparator);
                int count = st.countTokens();
                dirs = new File[count];
                for (int i = 0; i < count; i++) {
                    dirs[i] = new File(st.nextToken());
                }
            } else {
                dirs = new File[0];
            }
            return dirs;
        }
 
		......
    }



	/**
     * The class loader used for loading from java.class.path.
     * runs in a restricted security context.
     */

    static class AppClassLoader extends URLClassLoader {

        public static ClassLoader getAppClassLoader(final ClassLoader extcl)
            throws IOException
        {
            final String s = System.getProperty("java.class.path");
            final File[] path = (s == null) ? new File[0] : getClassPath(s);

     
            return AccessController.doPrivileged(
                new PrivilegedAction<AppClassLoader>() {
                    public AppClassLoader run() {
                    URL[] urls =
                        (s == null) ? new URL[0] : pathToURLs(path);
                    return new AppClassLoader(urls, extcl);
                }
            });
        }
        ......
    }
	AppClassLoader加载的就是java.class.path下的路径。 
	例：
		System.out.println(System.getProperty("java.class.path"));
		结果 D:\workspace\ClassLoaderDemo\bin
		这个路径就是当前java工程目录bin,里面存放的是编译生成的class文件。
	