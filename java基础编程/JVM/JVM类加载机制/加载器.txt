附：每个类加载器都有一个父加载器的证明
	附：
		通过.getParent方法获取父加载器。
			ClassLoader cl = Test.class.getClassLoader();
			System.out.println("ClassLoader is:"+cl.toString());
			System.out.println("ClassLoader\'s parent is:"+cl.getParent().toString());
	父加载器的赋值是在ClassLoader对象的构造方法中，它有两个情况:
		1.由外部类创建ClassLoader时直接指定一个ClassLoader为parent。
		2.由getSystemClassLoader()方法生成，也就是在sun.misc.Laucher通过getClassLoader()获取，也就是AppClassLoader。
		即：一个ClassLoader创建时如果没有指定parent,那么它的parent默认就是AppClassLoader.
	父加载器:
		
		AppClassLoader的parent是ExtClassloader。
		ExtClassLoader的parent是null。
			ExtClassLoader的父加载器为nll,但是BootstrapCLassLoader却可以当成它的父加载器这又是为何呢。
		自定义加载器的父加载器为AppClassLoader。
		证：
		public abstract class ClassLoader {

			// The parent class loader for delegation
			// Note: VM hardcoded the offset of this field, thus all new fields
			// must be added *after* it.
			private final ClassLoader parent;
			// The class loader for the system
				// @GuardedBy("ClassLoader.class")
			private static ClassLoader scl;

			private ClassLoader(Void unused, ClassLoader parent) {
				this.parent = parent;
				...
			}
			protected ClassLoader(ClassLoader parent) {
				this(checkCreateClassLoader(), parent);
			}
			protected ClassLoader() {
				this(checkCreateClassLoader(), getSystemClassLoader());
			}
			public final ClassLoader getParent() {
				if (parent == null)
					return null;
				return parent;
			}
			public static ClassLoader getSystemClassLoader() {
				initSystemClassLoader();
				if (scl == null) {
					return null;
				}
				return scl;
			}

			private static synchronized void initSystemClassLoader() {
				if (!sclSet) {
					if (scl != null)
						throw new IllegalStateException("recursive invocation");
					sun.misc.Launcher l = sun.misc.Launcher.getLauncher();
					if (l != null) {
						Throwable oops = null;
						//通过Launcher获取ClassLoader
						scl = l.getClassLoader();
						try {
							scl = AccessController.doPrivileged(
								new SystemClassLoaderAction(scl));
						} catch (PrivilegedActionException pae) {
							oops = pae.getCause();
							if (oops instanceof InvocationTargetException) {
								oops = oops.getCause();
							}
						}
						if (oops != null) {
							if (oops instanceof Error) {
								throw (Error) oops;
							} else {
								// wrap the exception
								throw new Error(oops);
							}
						}
					}
					sclSet = true;
				}
			}
		}


不过，细心的同学发现，还是有疑问的我们只看到ExtClassLoader和AppClassLoader的创建，那么BootstrapClassLoader呢?
还有，ExtClassLoader的父加载器为nll,但是BootstrapCLassLoader却可以当成它的父加载器这又是为何呢?

public class Launcher {
    private static URLStreamHandlerFactory factory = new Factory();
    private static Launcher launcher = new Launcher();
    private static String bootClassPath =
        System.getProperty("sun.boot.class.path");

    public static Launcher getLauncher() {
        return launcher;
    }

    private ClassLoader loader;

	//代码已经说明了问题AppClassloader的parent是一个ExtClassloader实例。
	//ExtClassLoader并没有直接找到对parent的赋值。//它调用了它的父类也就是URLClassLoder的构造方法并传递了3个参数。
    public Launcher() {
		// Create the extension class loader
		ClassLoader extcl;
		try {
			extcl = ExtClassLoader.getExtClassLoader();
		} catch (IOException e) {
			throw new InternalError(
				"Could not create extension class loader", e);
		}

		// Now create the class loader to use to launch the application
		try {
		//将ExtClassLoader对象实例传递进去
			loader = AppClassLoader.getAppClassLoader(extcl);
		} catch (IOException e) {
			throw new InternalError(
				"Could not create application class loader", e);
		}
	}
	public ClassLoader getClassLoader() {
		return loader;
	}
	static class ExtClassLoader extends URLClassLoader {

		/**
		 * create an ExtClassLoader. The ExtClassLoader is created
		 * within a context that limits which files it can read
		 */
		public static ExtClassLoader getExtClassLoader() throws IOException
		{
			final File[] dirs = getExtDirs();

			try {
				// Prior implementations of this doPrivileged() block supplied
				// aa synthesized ACC via a call to the private method
				// ExtClassLoader.getContext().

				return AccessController.doPrivileged(
					new PrivilegedExceptionAction<ExtClassLoader>() {
						public ExtClassLoader run() throws IOException {
							//ExtClassLoader在这里创建
							return new ExtClassLoader(dirs);
						}
					});
			} catch (java.security.PrivilegedActionException e) {
				throw (IOException) e.getException();
			}
		}


		/*
		 * Creates a new ExtClassLoader for the specified directories.
		 */
		public ExtClassLoader(File[] dirs) throws IOException {
			super(getExtURLs(dirs), null, factory);
		   
		}
	}
}
Bootstrap ClassLoader
	Bootstrap ClassLoader是由C/C++编写的,它本身是虚拟机的一部分，
	所以它并不是一个JAVA类,也就是无法在java代码中获取它的引用。
	JVM启动时通过Bootstrap类加载器加载rt.jar等核心jar包中的class文件,之前的int.class ,String.class都是由它加载。
	
	然后呢,我们前面已经分析了，JVM初始化sun.misc.Launcher
		并创建ExtensionClassloader和AppClassLoader实例。
		并将ExtClassLoader设置为AppClassLoader的父加载器。
		Bootstrap没有父加载器，但是它却可以作用一个ClassLoader的父加载器。比如ExtClassLoader。
		这也可以解释之前通过ExtClassLoader的getParent方法获取为Nul的现象。
		具体是什么原因,很快就知道答案了。

即：
	1.一个AppClassLoader查找资源(class和resource)时，先看看缓存是否有，缓存有从缓存中获取,否则委托给父加载器。

	3.如果ExtClassLoader也没有加载过，则由BootstrapClassLoader出面，它首先查找缓存?，如果没有找到的话，就去找自己的规定的
	路径下，也就是sun.mic.boot.class下面的路径。找到就返回，没有找到，让子加载器自己去找。
	4. BootstrapClassloader如果没有查找成功，则ExtClassLoader自己在java.ext.dirs路径中去查找，查找成功就返回，查找不成功，再向下让子加载器找。
	5. ExtClassLoader查找不成功，AppClassLoader就自己查找， 在java.class.path路径下查找。找到就返回。如果没有找到就让子类找，如果没有子类会怎么样?抛出各种异常。
	我们可以发现委托是从下向上,然后具体查找过程却是自上至下。
	
加载类方法的一般步骤是：
	1.执行findLoadedClass(String)去检测这个class是不是已经加载过了。
	2.执行父加载器的loadClass方法。
	如果父加载器为null,则jvm内置的加载器去替代,也就是BootstrapClassLoader。
	这也解释了ExtClassLoader的parent为nll,但仍然说BootstrapClassLoader是它的父加载器。
	3.如果向.上委托父加载器没有加载成功，则通过findClass(String)查找。
	如果class在上面的步骤中找到了，参数resolve又是true的话,那么loadClass()又会调用resolveClass(Class)这个方法来生成最终的Class对象。
	protected Class<?> loadClass(String name, boolean resolve)
			throws ClassNotFoundException
	{
		synchronized (getClassLoadingLock(name)) {
			// 首先，检测是否已经加载
			Class<?> c = findLoadedClass(name);
			if (c == null) {
				long t0 = System.nanoTime();
				try {
					if (parent != null) {
						//父加载器不为空则调用父加载器的loadClass
						c = parent.loadClass(name, false);
					} else {
						//父加载器为空则调用Bootstrap Classloader
						c = findBootstrapClassOrNull(name);
					}
				} catch (ClassNotFoundException e) {
					// ClassNotFoundException thrown if class not found
					// from the non-null parent class loader
				}

				if (c == null) {
					// If still not found, then invoke findClass in order
					// to find the class.
					long t1 = System.nanoTime();
					//父加载器没有找到，则调用findclass
					c = findClass(name);

					// this is the defining class loader; record the stats
					sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);
					sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);
					sun.misc.PerfCounter.getFindClasses().increment();
				}
			}
			if (resolve) {
				//调用resolveClass()
				resolveClass(c);
			}
			return c;
		}
	}

