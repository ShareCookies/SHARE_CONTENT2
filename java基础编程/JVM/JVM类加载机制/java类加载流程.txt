class对象介绍：
	1. .class文件，类的字节码文件。
		它包含了与类有关的信息。
	2. jvm每加载一个新的.class，都会生成这个类的Class对象。
	附：
		Class对象对应着java.lang.Class类。
		实例对象就是通过Class对象来创建的。
		java世界里，一切皆对象。
			基本类型、数组、就连关键字void也有Class对象（void.class）
			jvm中对象可以分为两种：实例对象和Class对象。
	3. //所以可以认为，类的字节码文件是类结构的文本形式，class对象是类结构的运行时形式(内存形式)。
	？
		Class类分析
类的加载过程：
	类的加载(类加载器)是指把类的.class文件中的数据读入到内存中，然后在方法区产生与所加载类对应的Class对象。
	类的加载过程：	
		1. 通过一个类的全限定名来获取类的二进制流。
		数据来源可为：
			jar包、.class文件、ZIP 包、网络、运算生成、JSP 生成等
			例：
				.class文件在当前目录的，对应包名目录下，com/test/Hello.class
				那么就可通过命令行输入“java 包名.Hello”运行 Java 程序
		2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。？
		3. 在内存中生成一个代表这个类的 java.lang.Class对象。
	
		附:数组类？
			数组类的特殊性：
				数组类本身不通过类加载器创建，它是由 Java 虚拟机直接创建的。
			但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型最终是要靠类加载器去创建的，数组创建过程如下：

				如果数组的组件类型是引用类型，那就递归采用类加载加载。
				如果数组的组件类型不是引用类型，Java 虚拟机会把数组标记为引导类加载器关联。
				数组类的可见性与他的组件类型的可见性一致，如果组件类型不是引用类型，那数组类的可见性将默认为 public。		
		
https://blog.csdn.net/briblue/article/details/54973413
类加载器:
	jvm通过类加载器来实现类的加载。
		类加载器是一个重要的Java运行时系统组件，它负责在运行时查找和装入类文件中的类。
	类加载器包括：
		根加载器（BootStrap）、扩展加载器（Extension）、系统加载器（System）
		和用户自定义类加载器（java.lang.ClassLoader的子类）。

	Java语言系统自带的三个类加载器:
		1. BootstrapClassLoader最顶层的加载类，主要加载核心类库.
			%JRE_HOME%\lib下的rtjar、resources.jar、charsets.jar和class等。
			附：
				可以通过启动jvm时指定Xbootclasspath和路径来改变BootstrapClassLoader的加载目录。
				比如java -Xbootclasspath/a:path被指定的文件追加到默认的bootstrap路径中
		2. ExtentionClassLoader扩展类加载器，加载目录%JRE_HOME%\ib\ext目录下的jar包和class文件。
		它的父加载器是Bootstrap；
			附：
				可以加载-Djava.ext.dirs选项指定的目录。
		3. AppClassLoader也称为SystemAppClass，加载当前应用classpath下的所有类。
		其父类加载器是ExtentionClassLoader。是用户自定义加载器的默认父加载器。		
		附：？
			./Java自带类加载器源码.txt
			加载器.txt
	父委托机制（PDM）：（双亲委托）
		1. 从JDK 1.2(Java 2)开始，类加载过程采取了父亲委托机制（PDM），PDM更好的保证了Java平台的安全性。
		2. 在该机制中，JVM自带的Bootstrap是根加载器，其他的加载器都有且仅有一个父类加载器。
		
		3.类的加载首先请求父类加载器加载，父类加载器无能为力时才由其子类加载器自行加载。
		


	自定义加载器：
		自定义类加载器.txt